// DO NOT EDIT. Generated by protoc-gen-dart-ext/tools.
// ignore_for_file: non_constant_identifier_names
import 'package:pgde/plural.dart' as $0 show Form;
import 'package:flutter/material.dart' as $1
    show BuildContext, Locale, Localizations, LocalizationsDelegate;
import 'package:flutter/foundation.dart' as $2 show SynchronousFuture;
import 'dart:collection' as $3 show HashSet;

class _PgdeLocalizationsDelegate
    extends $1.LocalizationsDelegate<PgdeLocalizations> {
  const _PgdeLocalizationsDelegate();

  @override
  bool isSupported($1.Locale locale) =>
      kSupportedLanguages.contains(locale.languageCode);

  @override
  Future<PgdeLocalizations> load($1.Locale locale) =>
      $2.SynchronousFuture<PgdeLocalizations>(_getTranslation(locale));

  @override
  bool shouldReload(_PgdeLocalizationsDelegate old) => false;

  static final Set<String> kSupportedLanguages =
      $3.HashSet<String>.from(const <String>[
    'ar',
    'en',
    'zh',
  ]);

  static PgdeLocalizations _getTranslation($1.Locale locale) {
    switch (locale.languageCode) {
      case 'ar':
        {
          return PgdeLocalizationsAr();
        }

      case 'en':
        {
          return PgdeLocalizationsEnUS();
        }

      case 'zh':
        {
          return PgdeLocalizationsZh();
        }
    }
    assert(false, 'getTranslation() called for unsupported locale "$locale"');
    return null;
  }
}

class PgdeLocalizationsAr extends PgdeLocalizations {
  PgdeLocalizationsAr();

  String atomMeter($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'meters';

      case $0.Form.one:
        return r'meter';

      case $0.Form.two:
        return r'meters';

      case $0.Form.few:
        return r'meters';

      case $0.Form.many:
        return r'meters';

      default:
        return r'meters';
    }
  }

  String atomFoot($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'feet';

      case $0.Form.one:
        return r'foot';

      case $0.Form.two:
        return r'feet';

      case $0.Form.few:
        return r'feet';

      case $0.Form.many:
        return r'feet';

      default:
        return r'feet';
    }
  }

  String atomInch($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'inches';

      case $0.Form.one:
        return r'inch';

      case $0.Form.two:
        return r'inches';

      case $0.Form.few:
        return r'inches';

      case $0.Form.many:
        return r'inches';

      default:
        return r'inches';
    }
  }

  String atomYard($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'yards';

      case $0.Form.one:
        return r'yard';

      case $0.Form.two:
        return r'yards';

      case $0.Form.few:
        return r'yards';

      case $0.Form.many:
        return r'yards';

      default:
        return r'yards';
    }
  }

  String atomMile($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'miles';

      case $0.Form.one:
        return r'mile';

      case $0.Form.two:
        return r'miles';

      case $0.Form.few:
        return r'miles';

      case $0.Form.many:
        return r'miles';

      default:
        return r'miles';
    }
  }

  String atomNauticalMile($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'nautical miles';

      case $0.Form.one:
        return r'nautical mile';

      case $0.Form.two:
        return r'nautical miles';

      case $0.Form.few:
        return r'nautical miles';

      case $0.Form.many:
        return r'nautical miles';

      default:
        return r'nautical miles';
    }
  }

  String atomLightYear($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'light years';

      case $0.Form.one:
        return r'light year';

      case $0.Form.two:
        return r'light years';

      case $0.Form.few:
        return r'light years';

      case $0.Form.many:
        return r'light years';

      default:
        return r'light years';
    }
  }

  String atomHectare($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'hectares';

      case $0.Form.one:
        return r'hectare';

      case $0.Form.two:
        return r'hectares';

      case $0.Form.few:
        return r'hectares';

      case $0.Form.many:
        return r'hectares';

      default:
        return r'hectares';
    }
  }

  String atomAre($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'ares';

      case $0.Form.one:
        return r'are';

      case $0.Form.two:
        return r'ares';

      case $0.Form.few:
        return r'ares';

      case $0.Form.many:
        return r'ares';

      default:
        return r'ares';
    }
  }

  String atomLiter($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'liters';

      case $0.Form.one:
        return r'liter';

      case $0.Form.two:
        return r'liters';

      case $0.Form.few:
        return r'liters';

      case $0.Form.many:
        return r'liters';

      default:
        return r'liters';
    }
  }

  String atomGallon($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'gallons';

      case $0.Form.one:
        return r'gallon';

      case $0.Form.two:
        return r'gallons';

      case $0.Form.few:
        return r'gallons';

      case $0.Form.many:
        return r'gallons';

      default:
        return r'gallons';
    }
  }

  String atomBarrel($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'barrels';

      case $0.Form.one:
        return r'barrel';

      case $0.Form.two:
        return r'barrels';

      case $0.Form.few:
        return r'barrels';

      case $0.Form.many:
        return r'barrels';

      default:
        return r'barrels';
    }
  }

  String atomGram($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'grams';

      case $0.Form.one:
        return r'gram';

      case $0.Form.two:
        return r'grams';

      case $0.Form.few:
        return r'grams';

      case $0.Form.many:
        return r'grams';

      default:
        return r'grams';
    }
  }

  String atomTon($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'tons';

      case $0.Form.one:
        return r'ton';

      case $0.Form.two:
        return r'tons';

      case $0.Form.few:
        return r'tons';

      case $0.Form.many:
        return r'tons';

      default:
        return r'tons';
    }
  }

  String atomPound($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'pounds';

      case $0.Form.one:
        return r'pound';

      case $0.Form.two:
        return r'pounds';

      case $0.Form.few:
        return r'pounds';

      case $0.Form.many:
        return r'pounds';

      default:
        return r'pounds';
    }
  }

  String atomOunce($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'ounces';

      case $0.Form.one:
        return r'ounce';

      case $0.Form.two:
        return r'ounces';

      case $0.Form.few:
        return r'ounces';

      case $0.Form.many:
        return r'ounces';

      default:
        return r'ounces';
    }
  }

  String atomSecond($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'seconds';

      case $0.Form.one:
        return r'second';

      case $0.Form.two:
        return r'seconds';

      case $0.Form.few:
        return r'seconds';

      case $0.Form.many:
        return r'seconds';

      default:
        return r'seconds';
    }
  }

  String atomMinute($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'minutes';

      case $0.Form.one:
        return r'minute';

      case $0.Form.two:
        return r'minutes';

      case $0.Form.few:
        return r'minutes';

      case $0.Form.many:
        return r'minutes';

      default:
        return r'minutes';
    }
  }

  String atomHour($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'hours';

      case $0.Form.one:
        return r'hour';

      case $0.Form.two:
        return r'hours';

      case $0.Form.few:
        return r'hours';

      case $0.Form.many:
        return r'hours';

      default:
        return r'hours';
    }
  }

  String atomDay($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'days';

      case $0.Form.one:
        return r'day';

      case $0.Form.two:
        return r'days';

      case $0.Form.few:
        return r'days';

      case $0.Form.many:
        return r'days';

      default:
        return r'days';
    }
  }

  String atomWeek($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'weeks';

      case $0.Form.one:
        return r'week';

      case $0.Form.two:
        return r'weeks';

      case $0.Form.few:
        return r'weeks';

      case $0.Form.many:
        return r'weeks';

      default:
        return r'weeks';
    }
  }

  String atomMonth($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'months';

      case $0.Form.one:
        return r'month';

      case $0.Form.two:
        return r'months';

      case $0.Form.few:
        return r'months';

      case $0.Form.many:
        return r'months';

      default:
        return r'months';
    }
  }

  String atomYear($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'years';

      case $0.Form.one:
        return r'year';

      case $0.Form.two:
        return r'years';

      case $0.Form.few:
        return r'years';

      case $0.Form.many:
        return r'years';

      default:
        return r'years';
    }
  }

  String atomCentury($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'centuries';

      case $0.Form.one:
        return r'century';

      case $0.Form.two:
        return r'centuries';

      case $0.Form.few:
        return r'centuries';

      case $0.Form.many:
        return r'centuries';

      default:
        return r'centuries';
    }
  }

  String atomSecondAngle($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'seconds';

      case $0.Form.one:
        return r'second';

      case $0.Form.two:
        return r'seconds';

      case $0.Form.few:
        return r'seconds';

      case $0.Form.many:
        return r'seconds';

      default:
        return r'seconds';
    }
  }

  String atomMinuteAngle($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'minutes';

      case $0.Form.one:
        return r'minute';

      case $0.Form.two:
        return r'minutes';

      case $0.Form.few:
        return r'minutes';

      case $0.Form.many:
        return r'minutes';

      default:
        return r'minutes';
    }
  }

  String atomDegree($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'degrees';

      case $0.Form.one:
        return r'degree';

      case $0.Form.two:
        return r'degrees';

      case $0.Form.few:
        return r'degrees';

      case $0.Form.many:
        return r'degrees';

      default:
        return r'degrees';
    }
  }

  String atomAmpere($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'amperes';

      case $0.Form.one:
        return r'ampere';

      case $0.Form.two:
        return r'amperes';

      case $0.Form.few:
        return r'amperes';

      case $0.Form.many:
        return r'amperes';

      default:
        return r'amperes';
    }
  }

  String atomElectronvolt($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'electronvolts';

      case $0.Form.one:
        return r'electronvolt';

      case $0.Form.two:
        return r'electronvolts';

      case $0.Form.few:
        return r'electronvolts';

      case $0.Form.many:
        return r'electronvolts';

      default:
        return r'electronvolts';
    }
  }

  String atomBel($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'bels';

      case $0.Form.one:
        return r'bel';

      case $0.Form.two:
        return r'bels';

      case $0.Form.few:
        return r'bels';

      case $0.Form.many:
        return r'bels';

      default:
        return r'bels';
    }
  }

  String atomKelvin($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'kelvins';

      case $0.Form.one:
        return r'kelvin';

      case $0.Form.two:
        return r'kelvins';

      case $0.Form.few:
        return r'kelvins';

      case $0.Form.many:
        return r'kelvins';

      default:
        return r'kelvins';
    }
  }

  String atomMole($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'moles';

      case $0.Form.one:
        return r'mole';

      case $0.Form.two:
        return r'moles';

      case $0.Form.few:
        return r'moles';

      case $0.Form.many:
        return r'moles';

      default:
        return r'moles';
    }
  }

  String atomCandela($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'candelas';

      case $0.Form.one:
        return r'candela';

      case $0.Form.two:
        return r'candelas';

      case $0.Form.few:
        return r'candelas';

      case $0.Form.many:
        return r'candelas';

      default:
        return r'candelas';
    }
  }

  String atomPercent($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'percent';

      case $0.Form.one:
        return r'percent';

      case $0.Form.two:
        return r'percent';

      case $0.Form.few:
        return r'percent';

      case $0.Form.many:
        return r'percent';

      default:
        return r'percent';
    }
  }

  String atomPerThousand($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'per thousand';

      case $0.Form.one:
        return r'per thousand';

      case $0.Form.two:
        return r'per thousand';

      case $0.Form.few:
        return r'per thousand';

      case $0.Form.many:
        return r'per thousand';

      default:
        return r'per thousand';
    }
  }

  String atomBit($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'bits';

      case $0.Form.one:
        return r'bit';

      case $0.Form.two:
        return r'bits';

      case $0.Form.few:
        return r'bits';

      case $0.Form.many:
        return r'bits';

      default:
        return r'bits';
    }
  }

  String atomByte($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'bytes';

      case $0.Form.one:
        return r'byte';

      case $0.Form.two:
        return r'bytes';

      case $0.Form.few:
        return r'bytes';

      case $0.Form.many:
        return r'bytes';

      default:
        return r'bytes';
    }
  }

  String atomCharacter($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'characters';

      case $0.Form.one:
        return r'character';

      case $0.Form.two:
        return r'characters';

      case $0.Form.few:
        return r'characters';

      case $0.Form.many:
        return r'characters';

      default:
        return r'characters';
    }
  }

  String atomWord($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'words';

      case $0.Form.one:
        return r'word';

      case $0.Form.two:
        return r'words';

      case $0.Form.few:
        return r'words';

      case $0.Form.many:
        return r'words';

      default:
        return r'words';
    }
  }

  String atomRadian($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'radians';

      case $0.Form.one:
        return r'radian';

      case $0.Form.two:
        return r'radians';

      case $0.Form.few:
        return r'radians';

      case $0.Form.many:
        return r'radians';

      default:
        return r'radians';
    }
  }

  String atomSteradian($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'steradians';

      case $0.Form.one:
        return r'steradian';

      case $0.Form.two:
        return r'steradians';

      case $0.Form.few:
        return r'steradians';

      case $0.Form.many:
        return r'steradians';

      default:
        return r'steradians';
    }
  }

  String atomHertz($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'hertz';

      case $0.Form.one:
        return r'hertz';

      case $0.Form.two:
        return r'hertz';

      case $0.Form.few:
        return r'hertz';

      case $0.Form.many:
        return r'hertz';

      default:
        return r'hertz';
    }
  }

  String atomNewton($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'newtons';

      case $0.Form.one:
        return r'newton';

      case $0.Form.two:
        return r'newtons';

      case $0.Form.few:
        return r'newtons';

      case $0.Form.many:
        return r'newtons';

      default:
        return r'newtons';
    }
  }

  String atomPascal($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'pascals';

      case $0.Form.one:
        return r'pascal';

      case $0.Form.two:
        return r'pascals';

      case $0.Form.few:
        return r'pascals';

      case $0.Form.many:
        return r'pascals';

      default:
        return r'pascals';
    }
  }

  String atomJoule($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'joules';

      case $0.Form.one:
        return r'joule';

      case $0.Form.two:
        return r'joules';

      case $0.Form.few:
        return r'joules';

      case $0.Form.many:
        return r'joules';

      default:
        return r'joules';
    }
  }

  String atomWatt($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'watts';

      case $0.Form.one:
        return r'watt';

      case $0.Form.two:
        return r'watts';

      case $0.Form.few:
        return r'watts';

      case $0.Form.many:
        return r'watts';

      default:
        return r'watts';
    }
  }

  String atomCoulomb($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'coulombs';

      case $0.Form.one:
        return r'coulomb';

      case $0.Form.two:
        return r'coulombs';

      case $0.Form.few:
        return r'coulombs';

      case $0.Form.many:
        return r'coulombs';

      default:
        return r'coulombs';
    }
  }

  String atomVolt($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'volts';

      case $0.Form.one:
        return r'volt';

      case $0.Form.two:
        return r'volts';

      case $0.Form.few:
        return r'volts';

      case $0.Form.many:
        return r'volts';

      default:
        return r'volts';
    }
  }

  String atomFarad($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'farads';

      case $0.Form.one:
        return r'farad';

      case $0.Form.two:
        return r'farads';

      case $0.Form.few:
        return r'farads';

      case $0.Form.many:
        return r'farads';

      default:
        return r'farads';
    }
  }

  String atomOhm($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'ohms';

      case $0.Form.one:
        return r'ohm';

      case $0.Form.two:
        return r'ohms';

      case $0.Form.few:
        return r'ohms';

      case $0.Form.many:
        return r'ohms';

      default:
        return r'ohms';
    }
  }

  String atomSiemens($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'siemens';

      case $0.Form.one:
        return r'siemens';

      case $0.Form.two:
        return r'siemens';

      case $0.Form.few:
        return r'siemens';

      case $0.Form.many:
        return r'siemens';

      default:
        return r'siemens';
    }
  }

  String atomWeber($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'webers';

      case $0.Form.one:
        return r'weber';

      case $0.Form.two:
        return r'webers';

      case $0.Form.few:
        return r'webers';

      case $0.Form.many:
        return r'webers';

      default:
        return r'webers';
    }
  }

  String atomTesla($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'teslas';

      case $0.Form.one:
        return r'tesla';

      case $0.Form.two:
        return r'teslas';

      case $0.Form.few:
        return r'teslas';

      case $0.Form.many:
        return r'teslas';

      default:
        return r'teslas';
    }
  }

  String atomHenry($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'henries';

      case $0.Form.one:
        return r'henry';

      case $0.Form.two:
        return r'henries';

      case $0.Form.few:
        return r'henries';

      case $0.Form.many:
        return r'henries';

      default:
        return r'henries';
    }
  }

  String atomDegreeCelsius($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'degrees Celsius';

      case $0.Form.one:
        return r'degree Celsius';

      case $0.Form.two:
        return r'degrees Celsius';

      case $0.Form.few:
        return r'degrees Celsius';

      case $0.Form.many:
        return r'degrees Celsius';

      default:
        return r'degrees Celsius';
    }
  }

  String atomLumen($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'lumens';

      case $0.Form.one:
        return r'lumen';

      case $0.Form.two:
        return r'lumens';

      case $0.Form.few:
        return r'lumens';

      case $0.Form.many:
        return r'lumens';

      default:
        return r'lumens';
    }
  }

  String atomLux($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'luxes';

      case $0.Form.one:
        return r'lux';

      case $0.Form.two:
        return r'luxes';

      case $0.Form.few:
        return r'luxes';

      case $0.Form.many:
        return r'luxes';

      default:
        return r'luxes';
    }
  }

  String atomBecquerel($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'becquerels';

      case $0.Form.one:
        return r'becquerel';

      case $0.Form.two:
        return r'becquerels';

      case $0.Form.few:
        return r'becquerels';

      case $0.Form.many:
        return r'becquerels';

      default:
        return r'becquerels';
    }
  }

  String atomGray($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'grays';

      case $0.Form.one:
        return r'gray';

      case $0.Form.two:
        return r'grays';

      case $0.Form.few:
        return r'grays';

      case $0.Form.many:
        return r'grays';

      default:
        return r'grays';
    }
  }

  String atomSievert($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'sieverts';

      case $0.Form.one:
        return r'sievert';

      case $0.Form.two:
        return r'sieverts';

      case $0.Form.few:
        return r'sieverts';

      case $0.Form.many:
        return r'sieverts';

      default:
        return r'sieverts';
    }
  }

  String atomKatal($0.Form form) {
    switch (form) {
      case $0.Form.zero:
        return r'katals';

      case $0.Form.one:
        return r'katal';

      case $0.Form.two:
        return r'katals';

      case $0.Form.few:
        return r'katals';

      case $0.Form.many:
        return r'katals';

      default:
        return r'katals';
    }
  }

  String get prefixYotta => r'yotta';

  String get prefixZetta => r'zetta';

  String get prefixExa => r'exa';

  String get prefixPeta => r'peta';

  String get prefixTera => r'tera';

  String get prefixGiga => r'giga';

  String get prefixMega => r'mega';

  String get prefixKilo => r'kilo';

  String get prefixHecto => r'hecto';

  String get prefixDeka => r'deka';

  String get prefixDeci => r'deci';

  String get prefixCenti => r'centi';

  String get prefixMilli => r'milli';

  String get prefixMicro => r'micro';

  String get prefixNano => r'nano';

  String get prefixPico => r'pico';

  String get prefixFemto => r'femto';

  String get prefixAtto => r'atto';

  String get prefixZepto => r'zepto';

  String get prefixYocto => r'yocto';

  String get prefixKibi => r'kibi';

  String get prefixMebi => r'mebi';

  String get prefixGibi => r'gibi';

  String get prefixTebi => r'tebi';

  String get prefixPebi => r'pebi';

  String get prefixExbi => r'exbi';

  String get currencyALL => r'Lek';

  String get currencyDZD => r'Algerian Dinar';

  String get currencyARS => r'Argentine Peso';

  String get currencyAUD => r'Australian Dollar';

  String get currencyBSD => r'Bahamian Dollar';

  String get currencyBHD => r'Bahraini Dinar';

  String get currencyBDT => r'Taka';

  String get currencyAMD => r'Armenian Dram';

  String get currencyBBD => r'Barbados Dollar';

  String get currencyBMD => r'Bermudian Dollar';

  String get currencyBTN => r'Ngultrum';

  String get currencyBOB => r'Boliviano';

  String get currencyBWP => r'Pula';

  String get currencyBZD => r'Belize Dollar';

  String get currencySBD => r'Solomon Islands Dollar';

  String get currencyBND => r'Brunei Dollar';

  String get currencyMMK => r'Kyat';

  String get currencyBIF => r'Burundi Franc';

  String get currencyKHR => r'Riel';

  String get currencyCAD => r'Canadian Dollar';

  String get currencyCVE => r'Cabo Verde Escudo';

  String get currencyKYD => r'Cayman Islands Dollar';

  String get currencyLKR => r'Sri Lanka Rupee';

  String get currencyCLP => r'Chilean Peso';

  String get currencyCNY => r'Yuan Renminbi';

  String get currencyCOP => r'Colombian Peso';

  String get currencyKMF => r'Comorian Franc ';

  String get currencyCRC => r'Costa Rican Colon';

  String get currencyHRK => r'Kuna';

  String get currencyCUP => r'Cuban Peso';

  String get currencyCZK => r'Czech Koruna';

  String get currencyDKK => r'Danish Krone';

  String get currencyDOP => r'Dominican Peso';

  String get currencySVC => r'El Salvador Colon';

  String get currencyETB => r'Ethiopian Birr';

  String get currencyERN => r'Nakfa';

  String get currencyFKP => r'Falkland Islands Pound';

  String get currencyFJD => r'Fiji Dollar';

  String get currencyDJF => r'Djibouti Franc';

  String get currencyGMD => r'Dalasi';

  String get currencyGIP => r'Gibraltar Pound';

  String get currencyGTQ => r'Quetzal';

  String get currencyGNF => r'Guinean Franc';

  String get currencyGYD => r'Guyana Dollar';

  String get currencyHTG => r'Gourde';

  String get currencyHNL => r'Lempira';

  String get currencyHKD => r'Hong Kong Dollar';

  String get currencyHUF => r'Forint';

  String get currencyISK => r'Iceland Krona';

  String get currencyINR => r'Indian Rupee';

  String get currencyIDR => r'Rupiah';

  String get currencyIRR => r'Iranian Rial';

  String get currencyIQD => r'Iraqi Dinar';

  String get currencyILS => r'New Israeli Sheqel';

  String get currencyJMD => r'Jamaican Dollar';

  String get currencyJPY => r'Yen';

  String get currencyKZT => r'Tenge';

  String get currencyJOD => r'Jordanian Dinar';

  String get currencyKES => r'Kenyan Shilling';

  String get currencyKPW => r'North Korean Won';

  String get currencyKRW => r'Won';

  String get currencyKWD => r'Kuwaiti Dinar';

  String get currencyKGS => r'Som';

  String get currencyLAK => r'Lao Kip';

  String get currencyLBP => r'Lebanese Pound';

  String get currencyLSL => r'Loti';

  String get currencyLRD => r'Liberian Dollar';

  String get currencyLYD => r'Libyan Dinar';

  String get currencyMOP => r'Pataca';

  String get currencyMWK => r'Malawi Kwacha';

  String get currencyMYR => r'Malaysian Ringgit';

  String get currencyMVR => r'Rufiyaa';

  String get currencyMUR => r'Mauritius Rupee';

  String get currencyMXN => r'Mexican Peso';

  String get currencyMNT => r'Tugrik';

  String get currencyMDL => r'Moldovan Leu';

  String get currencyMAD => r'Moroccan Dirham';

  String get currencyOMR => r'Rial Omani';

  String get currencyNAD => r'Namibia Dollar';

  String get currencyNPR => r'Nepalese Rupee';

  String get currencyANG => r'Netherlands Antillean Guilder';

  String get currencyAWG => r'Aruban Florin';

  String get currencyVUV => r'Vatu';

  String get currencyNZD => r'New Zealand Dollar';

  String get currencyNIO => r'Cordoba Oro';

  String get currencyNGN => r'Naira';

  String get currencyNOK => r'Norwegian Krone';

  String get currencyPKR => r'Pakistan Rupee';

  String get currencyPAB => r'Balboa';

  String get currencyPGK => r'Kina';

  String get currencyPYG => r'Guarani';

  String get currencyPEN => r'Sol';

  String get currencyPHP => r'Philippine Peso';

  String get currencyQAR => r'Qatari Rial';

  String get currencyRUB => r'Russian Ruble';

  String get currencyRWF => r'Rwanda Franc';

  String get currencySHP => r'Saint Helena Pound';

  String get currencySAR => r'Saudi Riyal';

  String get currencySCR => r'Seychelles Rupee';

  String get currencySLL => r'Leone';

  String get currencySGD => r'Singapore Dollar';

  String get currencyVND => r'Dong';

  String get currencySOS => r'Somali Shilling';

  String get currencyZAR => r'Rand';

  String get currencySSP => r'South Sudanese Pound';

  String get currencySZL => r'Lilangeni';

  String get currencySEK => r'Swedish Krona';

  String get currencyCHF => r'Swiss Franc';

  String get currencySYP => r'Syrian Pound';

  String get currencyTHB => r'Baht';

  String get currencyTOP => r'Pa’anga';

  String get currencyTTD => r'Trinidad and Tobago Dollar';

  String get currencyAED => r'UAE Dirham';

  String get currencyTND => r'Tunisian Dinar';

  String get currencyUGX => r'Uganda Shilling';

  String get currencyMKD => r'Denar';

  String get currencyEGP => r'Egyptian Pound';

  String get currencyGBP => r'Pound Sterling';

  String get currencyTZS => r'Tanzanian Shilling';

  String get currencyUSD => r'US Dollar';

  String get currencyUYU => r'Peso Uruguayo';

  String get currencyUZS => r'Uzbekistan Sum';

  String get currencyWST => r'Tala';

  String get currencyYER => r'Yemeni Rial';

  String get currencyTWD => r'New Taiwan Dollar';

  String get currencyUYW => r'Unidad Previsional';

  String get currencyVES => r'Bolívar Soberano';

  String get currencyMRU => r'Ouguiya';

  String get currencySTN => r'Dobra';

  String get currencyCUC => r'Peso Convertible';

  String get currencyZWL => r'Zimbabwe Dollar';

  String get currencyBYN => r'Belarusian Ruble';

  String get currencyTMT => r'Turkmenistan New Manat';

  String get currencyGHS => r'Ghana Cedi';

  String get currencySDG => r'Sudanese Pound';

  String get currencyUYI => r'Uruguay Peso en Unidades Indexadas (UI)';

  String get currencyRSD => r'Serbian Dinar';

  String get currencyMZN => r'Mozambique Metical';

  String get currencyAZN => r'Azerbaijan Manat';

  String get currencyRON => r'Romanian Leu';

  String get currencyCHE => r'WIR Euro';

  String get currencyCHW => r'WIR Franc';

  String get currencyTRY => r'Turkish Lira';

  String get currencyXAF => r'CFA Franc BEAC';

  String get currencyXCD => r'East Caribbean Dollar';

  String get currencyXOF => r'CFA Franc BCEAO';

  String get currencyXPF => r'CFP Franc';

  String get currencyXBA =>
      r'Bond Markets Unit European Composite Unit (EURCO)';

  String get currencyXBB =>
      r'Bond Markets Unit European Monetary Unit (E.M.U.-6)';

  String get currencyXBC =>
      r'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)';

  String get currencyXBD =>
      r'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)';

  String get currencyXAU => r'Gold';

  String get currencyXDR => r'SDR (Special Drawing Right)';

  String get currencyXAG => r'Silver';

  String get currencyXPT => r'Platinum';

  String get currencyXTS => r'Codes specifically reserved for testing purposes';

  String get currencyXPD => r'Palladium';

  String get currencyXUA => r'ADB Unit of Account';

  String get currencyZMW => r'Zambian Kwacha';

  String get currencySRD => r'Surinam Dollar';

  String get currencyMGA => r'Malagasy Ariary';

  String get currencyCOU => r'Unidad de Valor Real';

  String get currencyAFN => r'Afghani';

  String get currencyTJS => r'Somoni';

  String get currencyAOA => r'Kwanza';

  String get currencyBGN => r'Bulgarian Lev';

  String get currencyCDF => r'Congolese Franc';

  String get currencyBAM => r'Convertible Mark';

  String get currencyEUR => r'Euro';

  String get currencyMXV => r'Mexican Unidad de Inversion (UDI)';

  String get currencyUAH => r'Hryvnia';

  String get currencyGEL => r'Lari';

  String get currencyBOV => r'Mvdol';

  String get currencyPLN => r'Zloty';

  String get currencyBRL => r'Brazilian Real';

  String get currencyCLF => r'Unidad de Fomento';

  String get currencyXSU => r'Sucre';

  String get currencyUSN => r'US Dollar (Next day)';

  String validateFieldLength(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' length');

    return output.toString();
  }

  String validateFieldItems(String field) {
    final output = StringBuffer();

    output.write(r'The items of ');

    output.write(field);
    return output.toString();
  }

  String get validateNow => r'now';

  String get validateEq => r'equal';

  String get validateGt => r'be greater than';

  String get validateGte => r'be greater than or equal to';

  String get validateLt => r'less than';

  String get validateLte => r'less than or equal to';

  String get validateOneof => r'be one of';

  String get validateOneofx => r'not be one of';

  String get validateRange => r'be inside range';

  String get validateRangex => r'be outside range';

  String get validatePattern => r'match the pattern';

  String get validatePrefix => r'have prefix';

  String get validateSuffix => r'have suffix';

  String get validateContains => r'contain';

  String validateMustConst(String field, String rule, String kConstWithUnit) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must ');

    output.write(rule);

    output.write(r' ');

    output.write(kConstWithUnit);
    return output.toString();
  }

  String validateUnique(int position) {
    final output = StringBuffer();

    output.write(r'unique, but the No.');

    output.write(position.toString());

    output.write(r' item is repeated');

    return output.toString();
  }

  String validateNoSparse(String key) {
    final output = StringBuffer();

    output.write(r'a non-sparse map, but the value of `');

    output.write(key);

    output.write(r'` is nil');

    return output.toString();
  }

  String get validateEmail => r'email';

  String get validateHostname => r'hostname';

  String get validateIp => r'ip';

  String get validateIpv4 => r'ipv4';

  String get validateIpv6 => r'ipv6';

  String get validateUri => r'uri';

  String get validateUriRef => r'uri ref';

  String validateMustBe(String field, String something) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be ');

    output.write(something);
    return output.toString();
  }

  String validateMustWithinNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be within ');

    output.write(duration);

    output.write(r' of now');

    return output.toString();
  }

  String validateMustWithinGtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be greater than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateMustWithinLtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be less than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateRequired(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' is required');

    return output.toString();
  }

  String get formRetry => r'Retry';

  String get formBackAlertTitle => r'Alert';

  String get formBackAlertContent => r'Changes exist!';

  String get formBackAlertStay => r'Stay';

  String get formBackAlertGoBack => r'Go back';

  String get formReset => r'Reset';

  String get formEdit => r'Edit';
}

class PgdeLocalizationsEnUS extends PgdeLocalizations {
  PgdeLocalizationsEnUS();

  String atomMeter($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'meter';

      default:
        return r'meters';
    }
  }

  String atomFoot($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'foot';

      default:
        return r'feet';
    }
  }

  String atomInch($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'inch';

      default:
        return r'inches';
    }
  }

  String atomYard($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'yard';

      default:
        return r'yards';
    }
  }

  String atomMile($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'mile';

      default:
        return r'miles';
    }
  }

  String atomNauticalMile($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'nautical mile';

      default:
        return r'nautical miles';
    }
  }

  String atomLightYear($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'light year';

      default:
        return r'light years';
    }
  }

  String atomHectare($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'hectare';

      default:
        return r'hectares';
    }
  }

  String atomAre($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'are';

      default:
        return r'ares';
    }
  }

  String atomLiter($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'liter';

      default:
        return r'liters';
    }
  }

  String atomGallon($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'gallon';

      default:
        return r'gallons';
    }
  }

  String atomBarrel($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'barrel';

      default:
        return r'barrels';
    }
  }

  String atomGram($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'gram';

      default:
        return r'grams';
    }
  }

  String atomTon($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'ton';

      default:
        return r'tons';
    }
  }

  String atomPound($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'pound';

      default:
        return r'pounds';
    }
  }

  String atomOunce($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'ounce';

      default:
        return r'ounces';
    }
  }

  String atomSecond($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'second';

      default:
        return r'seconds';
    }
  }

  String atomMinute($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'minute';

      default:
        return r'minutes';
    }
  }

  String atomHour($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'hour';

      default:
        return r'hours';
    }
  }

  String atomDay($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'day';

      default:
        return r'days';
    }
  }

  String atomWeek($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'week';

      default:
        return r'weeks';
    }
  }

  String atomMonth($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'month';

      default:
        return r'months';
    }
  }

  String atomYear($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'year';

      default:
        return r'years';
    }
  }

  String atomCentury($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'century';

      default:
        return r'centuries';
    }
  }

  String atomSecondAngle($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'second';

      default:
        return r'seconds';
    }
  }

  String atomMinuteAngle($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'minute';

      default:
        return r'minutes';
    }
  }

  String atomDegree($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'degree';

      default:
        return r'degrees';
    }
  }

  String atomAmpere($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'ampere';

      default:
        return r'amperes';
    }
  }

  String atomElectronvolt($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'electronvolt';

      default:
        return r'electronvolts';
    }
  }

  String atomBel($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'bel';

      default:
        return r'bels';
    }
  }

  String atomKelvin($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'kelvin';

      default:
        return r'kelvins';
    }
  }

  String atomMole($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'mole';

      default:
        return r'moles';
    }
  }

  String atomCandela($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'candela';

      default:
        return r'candelas';
    }
  }

  String atomPercent($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'percent';

      default:
        return r'percent';
    }
  }

  String atomPerThousand($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'per thousand';

      default:
        return r'per thousand';
    }
  }

  String atomBit($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'bit';

      default:
        return r'bits';
    }
  }

  String atomByte($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'byte';

      default:
        return r'bytes';
    }
  }

  String atomCharacter($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'character';

      default:
        return r'characters';
    }
  }

  String atomWord($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'word';

      default:
        return r'words';
    }
  }

  String atomRadian($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'radian';

      default:
        return r'radians';
    }
  }

  String atomSteradian($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'steradian';

      default:
        return r'steradians';
    }
  }

  String atomHertz($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'hertz';

      default:
        return r'hertz';
    }
  }

  String atomNewton($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'newton';

      default:
        return r'newtons';
    }
  }

  String atomPascal($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'pascal';

      default:
        return r'pascals';
    }
  }

  String atomJoule($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'joule';

      default:
        return r'joules';
    }
  }

  String atomWatt($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'watt';

      default:
        return r'watts';
    }
  }

  String atomCoulomb($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'coulomb';

      default:
        return r'coulombs';
    }
  }

  String atomVolt($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'volt';

      default:
        return r'volts';
    }
  }

  String atomFarad($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'farad';

      default:
        return r'farads';
    }
  }

  String atomOhm($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'ohm';

      default:
        return r'ohms';
    }
  }

  String atomSiemens($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'siemens';

      default:
        return r'siemens';
    }
  }

  String atomWeber($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'weber';

      default:
        return r'webers';
    }
  }

  String atomTesla($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'tesla';

      default:
        return r'teslas';
    }
  }

  String atomHenry($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'henry';

      default:
        return r'henries';
    }
  }

  String atomDegreeCelsius($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'degree Celsius';

      default:
        return r'degrees Celsius';
    }
  }

  String atomLumen($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'lumen';

      default:
        return r'lumens';
    }
  }

  String atomLux($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'lux';

      default:
        return r'luxes';
    }
  }

  String atomBecquerel($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'becquerel';

      default:
        return r'becquerels';
    }
  }

  String atomGray($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'gray';

      default:
        return r'grays';
    }
  }

  String atomSievert($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'sievert';

      default:
        return r'sieverts';
    }
  }

  String atomKatal($0.Form form) {
    switch (form) {
      case $0.Form.one:
        return r'katal';

      default:
        return r'katals';
    }
  }

  String get prefixYotta => r'yotta';

  String get prefixZetta => r'zetta';

  String get prefixExa => r'exa';

  String get prefixPeta => r'peta';

  String get prefixTera => r'tera';

  String get prefixGiga => r'giga';

  String get prefixMega => r'mega';

  String get prefixKilo => r'kilo';

  String get prefixHecto => r'hecto';

  String get prefixDeka => r'deka';

  String get prefixDeci => r'deci';

  String get prefixCenti => r'centi';

  String get prefixMilli => r'milli';

  String get prefixMicro => r'micro';

  String get prefixNano => r'nano';

  String get prefixPico => r'pico';

  String get prefixFemto => r'femto';

  String get prefixAtto => r'atto';

  String get prefixZepto => r'zepto';

  String get prefixYocto => r'yocto';

  String get prefixKibi => r'kibi';

  String get prefixMebi => r'mebi';

  String get prefixGibi => r'gibi';

  String get prefixTebi => r'tebi';

  String get prefixPebi => r'pebi';

  String get prefixExbi => r'exbi';

  String get currencyALL => r'Lek';

  String get currencyDZD => r'Algerian Dinar';

  String get currencyARS => r'Argentine Peso';

  String get currencyAUD => r'Australian Dollar';

  String get currencyBSD => r'Bahamian Dollar';

  String get currencyBHD => r'Bahraini Dinar';

  String get currencyBDT => r'Taka';

  String get currencyAMD => r'Armenian Dram';

  String get currencyBBD => r'Barbados Dollar';

  String get currencyBMD => r'Bermudian Dollar';

  String get currencyBTN => r'Ngultrum';

  String get currencyBOB => r'Boliviano';

  String get currencyBWP => r'Pula';

  String get currencyBZD => r'Belize Dollar';

  String get currencySBD => r'Solomon Islands Dollar';

  String get currencyBND => r'Brunei Dollar';

  String get currencyMMK => r'Kyat';

  String get currencyBIF => r'Burundi Franc';

  String get currencyKHR => r'Riel';

  String get currencyCAD => r'Canadian Dollar';

  String get currencyCVE => r'Cabo Verde Escudo';

  String get currencyKYD => r'Cayman Islands Dollar';

  String get currencyLKR => r'Sri Lanka Rupee';

  String get currencyCLP => r'Chilean Peso';

  String get currencyCNY => r'Yuan Renminbi';

  String get currencyCOP => r'Colombian Peso';

  String get currencyKMF => r'Comorian Franc ';

  String get currencyCRC => r'Costa Rican Colon';

  String get currencyHRK => r'Kuna';

  String get currencyCUP => r'Cuban Peso';

  String get currencyCZK => r'Czech Koruna';

  String get currencyDKK => r'Danish Krone';

  String get currencyDOP => r'Dominican Peso';

  String get currencySVC => r'El Salvador Colon';

  String get currencyETB => r'Ethiopian Birr';

  String get currencyERN => r'Nakfa';

  String get currencyFKP => r'Falkland Islands Pound';

  String get currencyFJD => r'Fiji Dollar';

  String get currencyDJF => r'Djibouti Franc';

  String get currencyGMD => r'Dalasi';

  String get currencyGIP => r'Gibraltar Pound';

  String get currencyGTQ => r'Quetzal';

  String get currencyGNF => r'Guinean Franc';

  String get currencyGYD => r'Guyana Dollar';

  String get currencyHTG => r'Gourde';

  String get currencyHNL => r'Lempira';

  String get currencyHKD => r'Hong Kong Dollar';

  String get currencyHUF => r'Forint';

  String get currencyISK => r'Iceland Krona';

  String get currencyINR => r'Indian Rupee';

  String get currencyIDR => r'Rupiah';

  String get currencyIRR => r'Iranian Rial';

  String get currencyIQD => r'Iraqi Dinar';

  String get currencyILS => r'New Israeli Sheqel';

  String get currencyJMD => r'Jamaican Dollar';

  String get currencyJPY => r'Yen';

  String get currencyKZT => r'Tenge';

  String get currencyJOD => r'Jordanian Dinar';

  String get currencyKES => r'Kenyan Shilling';

  String get currencyKPW => r'North Korean Won';

  String get currencyKRW => r'Won';

  String get currencyKWD => r'Kuwaiti Dinar';

  String get currencyKGS => r'Som';

  String get currencyLAK => r'Lao Kip';

  String get currencyLBP => r'Lebanese Pound';

  String get currencyLSL => r'Loti';

  String get currencyLRD => r'Liberian Dollar';

  String get currencyLYD => r'Libyan Dinar';

  String get currencyMOP => r'Pataca';

  String get currencyMWK => r'Malawi Kwacha';

  String get currencyMYR => r'Malaysian Ringgit';

  String get currencyMVR => r'Rufiyaa';

  String get currencyMUR => r'Mauritius Rupee';

  String get currencyMXN => r'Mexican Peso';

  String get currencyMNT => r'Tugrik';

  String get currencyMDL => r'Moldovan Leu';

  String get currencyMAD => r'Moroccan Dirham';

  String get currencyOMR => r'Rial Omani';

  String get currencyNAD => r'Namibia Dollar';

  String get currencyNPR => r'Nepalese Rupee';

  String get currencyANG => r'Netherlands Antillean Guilder';

  String get currencyAWG => r'Aruban Florin';

  String get currencyVUV => r'Vatu';

  String get currencyNZD => r'New Zealand Dollar';

  String get currencyNIO => r'Cordoba Oro';

  String get currencyNGN => r'Naira';

  String get currencyNOK => r'Norwegian Krone';

  String get currencyPKR => r'Pakistan Rupee';

  String get currencyPAB => r'Balboa';

  String get currencyPGK => r'Kina';

  String get currencyPYG => r'Guarani';

  String get currencyPEN => r'Sol';

  String get currencyPHP => r'Philippine Peso';

  String get currencyQAR => r'Qatari Rial';

  String get currencyRUB => r'Russian Ruble';

  String get currencyRWF => r'Rwanda Franc';

  String get currencySHP => r'Saint Helena Pound';

  String get currencySAR => r'Saudi Riyal';

  String get currencySCR => r'Seychelles Rupee';

  String get currencySLL => r'Leone';

  String get currencySGD => r'Singapore Dollar';

  String get currencyVND => r'Dong';

  String get currencySOS => r'Somali Shilling';

  String get currencyZAR => r'Rand';

  String get currencySSP => r'South Sudanese Pound';

  String get currencySZL => r'Lilangeni';

  String get currencySEK => r'Swedish Krona';

  String get currencyCHF => r'Swiss Franc';

  String get currencySYP => r'Syrian Pound';

  String get currencyTHB => r'Baht';

  String get currencyTOP => r'Pa’anga';

  String get currencyTTD => r'Trinidad and Tobago Dollar';

  String get currencyAED => r'UAE Dirham';

  String get currencyTND => r'Tunisian Dinar';

  String get currencyUGX => r'Uganda Shilling';

  String get currencyMKD => r'Denar';

  String get currencyEGP => r'Egyptian Pound';

  String get currencyGBP => r'Pound Sterling';

  String get currencyTZS => r'Tanzanian Shilling';

  String get currencyUSD => r'US Dollar';

  String get currencyUYU => r'Peso Uruguayo';

  String get currencyUZS => r'Uzbekistan Sum';

  String get currencyWST => r'Tala';

  String get currencyYER => r'Yemeni Rial';

  String get currencyTWD => r'New Taiwan Dollar';

  String get currencyUYW => r'Unidad Previsional';

  String get currencyVES => r'Bolívar Soberano';

  String get currencyMRU => r'Ouguiya';

  String get currencySTN => r'Dobra';

  String get currencyCUC => r'Peso Convertible';

  String get currencyZWL => r'Zimbabwe Dollar';

  String get currencyBYN => r'Belarusian Ruble';

  String get currencyTMT => r'Turkmenistan New Manat';

  String get currencyGHS => r'Ghana Cedi';

  String get currencySDG => r'Sudanese Pound';

  String get currencyUYI => r'Uruguay Peso en Unidades Indexadas (UI)';

  String get currencyRSD => r'Serbian Dinar';

  String get currencyMZN => r'Mozambique Metical';

  String get currencyAZN => r'Azerbaijan Manat';

  String get currencyRON => r'Romanian Leu';

  String get currencyCHE => r'WIR Euro';

  String get currencyCHW => r'WIR Franc';

  String get currencyTRY => r'Turkish Lira';

  String get currencyXAF => r'CFA Franc BEAC';

  String get currencyXCD => r'East Caribbean Dollar';

  String get currencyXOF => r'CFA Franc BCEAO';

  String get currencyXPF => r'CFP Franc';

  String get currencyXBA =>
      r'Bond Markets Unit European Composite Unit (EURCO)';

  String get currencyXBB =>
      r'Bond Markets Unit European Monetary Unit (E.M.U.-6)';

  String get currencyXBC =>
      r'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)';

  String get currencyXBD =>
      r'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)';

  String get currencyXAU => r'Gold';

  String get currencyXDR => r'SDR (Special Drawing Right)';

  String get currencyXAG => r'Silver';

  String get currencyXPT => r'Platinum';

  String get currencyXTS => r'Codes specifically reserved for testing purposes';

  String get currencyXPD => r'Palladium';

  String get currencyXUA => r'ADB Unit of Account';

  String get currencyZMW => r'Zambian Kwacha';

  String get currencySRD => r'Surinam Dollar';

  String get currencyMGA => r'Malagasy Ariary';

  String get currencyCOU => r'Unidad de Valor Real';

  String get currencyAFN => r'Afghani';

  String get currencyTJS => r'Somoni';

  String get currencyAOA => r'Kwanza';

  String get currencyBGN => r'Bulgarian Lev';

  String get currencyCDF => r'Congolese Franc';

  String get currencyBAM => r'Convertible Mark';

  String get currencyEUR => r'Euro';

  String get currencyMXV => r'Mexican Unidad de Inversion (UDI)';

  String get currencyUAH => r'Hryvnia';

  String get currencyGEL => r'Lari';

  String get currencyBOV => r'Mvdol';

  String get currencyPLN => r'Zloty';

  String get currencyBRL => r'Brazilian Real';

  String get currencyCLF => r'Unidad de Fomento';

  String get currencyXSU => r'Sucre';

  String get currencyUSN => r'US Dollar (Next day)';

  String validateFieldLength(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' length');

    return output.toString();
  }

  String validateFieldItems(String field) {
    final output = StringBuffer();

    output.write(r'The items of ');

    output.write(field);
    return output.toString();
  }

  String get validateNow => r'now';

  String get validateEq => r'equal';

  String get validateGt => r'be greater than';

  String get validateGte => r'be greater than or equal to';

  String get validateLt => r'less than';

  String get validateLte => r'less than or equal to';

  String get validateOneof => r'be one of';

  String get validateOneofx => r'not be one of';

  String get validateRange => r'be inside range';

  String get validateRangex => r'be outside range';

  String get validatePattern => r'match the pattern';

  String get validatePrefix => r'have prefix';

  String get validateSuffix => r'have suffix';

  String get validateContains => r'contain';

  String validateMustConst(String field, String rule, String kConstWithUnit) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must ');

    output.write(rule);

    output.write(r' ');

    output.write(kConstWithUnit);
    return output.toString();
  }

  String validateUnique(int position) {
    final output = StringBuffer();

    output.write(r'unique, but the No.');

    output.write(position.toString());

    output.write(r' item is repeated');

    return output.toString();
  }

  String validateNoSparse(String key) {
    final output = StringBuffer();

    output.write(r'a non-sparse map, but the value of `');

    output.write(key);

    output.write(r'` is nil');

    return output.toString();
  }

  String get validateEmail => r'email';

  String get validateHostname => r'hostname';

  String get validateIp => r'ip';

  String get validateIpv4 => r'ipv4';

  String get validateIpv6 => r'ipv6';

  String get validateUri => r'uri';

  String get validateUriRef => r'uri ref';

  String validateMustBe(String field, String something) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be ');

    output.write(something);
    return output.toString();
  }

  String validateMustWithinNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be within ');

    output.write(duration);

    output.write(r' of now');

    return output.toString();
  }

  String validateMustWithinGtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be greater than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateMustWithinLtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be less than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateRequired(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' is required');

    return output.toString();
  }

  String get formRetry => r'Retry';

  String get formBackAlertTitle => r'Alert';

  String get formBackAlertContent => r'Changes exist!';

  String get formBackAlertStay => r'Stay';

  String get formBackAlertGoBack => r'Go back';

  String get formReset => r'Reset';

  String get formEdit => r'Edit';
}

class PgdeLocalizationsZh extends PgdeLocalizations {
  PgdeLocalizationsZh();

  String atomMeter($0.Form form) {
    return r'meters';
  }

  String atomFoot($0.Form form) {
    return r'feet';
  }

  String atomInch($0.Form form) {
    return r'inches';
  }

  String atomYard($0.Form form) {
    return r'yards';
  }

  String atomMile($0.Form form) {
    return r'miles';
  }

  String atomNauticalMile($0.Form form) {
    return r'nautical miles';
  }

  String atomLightYear($0.Form form) {
    return r'light years';
  }

  String atomHectare($0.Form form) {
    return r'hectares';
  }

  String atomAre($0.Form form) {
    return r'ares';
  }

  String atomLiter($0.Form form) {
    return r'liters';
  }

  String atomGallon($0.Form form) {
    return r'gallons';
  }

  String atomBarrel($0.Form form) {
    return r'barrels';
  }

  String atomGram($0.Form form) {
    return r'grams';
  }

  String atomTon($0.Form form) {
    return r'tons';
  }

  String atomPound($0.Form form) {
    return r'pounds';
  }

  String atomOunce($0.Form form) {
    return r'ounces';
  }

  String atomSecond($0.Form form) {
    return r'seconds';
  }

  String atomMinute($0.Form form) {
    return r'minutes';
  }

  String atomHour($0.Form form) {
    return r'hours';
  }

  String atomDay($0.Form form) {
    return r'days';
  }

  String atomWeek($0.Form form) {
    return r'weeks';
  }

  String atomMonth($0.Form form) {
    return r'months';
  }

  String atomYear($0.Form form) {
    return r'years';
  }

  String atomCentury($0.Form form) {
    return r'centuries';
  }

  String atomSecondAngle($0.Form form) {
    return r'seconds';
  }

  String atomMinuteAngle($0.Form form) {
    return r'minutes';
  }

  String atomDegree($0.Form form) {
    return r'degrees';
  }

  String atomAmpere($0.Form form) {
    return r'amperes';
  }

  String atomElectronvolt($0.Form form) {
    return r'electronvolts';
  }

  String atomBel($0.Form form) {
    return r'bels';
  }

  String atomKelvin($0.Form form) {
    return r'kelvins';
  }

  String atomMole($0.Form form) {
    return r'moles';
  }

  String atomCandela($0.Form form) {
    return r'candelas';
  }

  String atomPercent($0.Form form) {
    return r'percent';
  }

  String atomPerThousand($0.Form form) {
    return r'per thousand';
  }

  String atomBit($0.Form form) {
    return r'bits';
  }

  String atomByte($0.Form form) {
    return r'bytes';
  }

  String atomCharacter($0.Form form) {
    return r'characters';
  }

  String atomWord($0.Form form) {
    return r'words';
  }

  String atomRadian($0.Form form) {
    return r'radians';
  }

  String atomSteradian($0.Form form) {
    return r'steradians';
  }

  String atomHertz($0.Form form) {
    return r'hertz';
  }

  String atomNewton($0.Form form) {
    return r'newtons';
  }

  String atomPascal($0.Form form) {
    return r'pascals';
  }

  String atomJoule($0.Form form) {
    return r'joules';
  }

  String atomWatt($0.Form form) {
    return r'watts';
  }

  String atomCoulomb($0.Form form) {
    return r'coulombs';
  }

  String atomVolt($0.Form form) {
    return r'volts';
  }

  String atomFarad($0.Form form) {
    return r'farads';
  }

  String atomOhm($0.Form form) {
    return r'ohms';
  }

  String atomSiemens($0.Form form) {
    return r'siemens';
  }

  String atomWeber($0.Form form) {
    return r'webers';
  }

  String atomTesla($0.Form form) {
    return r'teslas';
  }

  String atomHenry($0.Form form) {
    return r'henries';
  }

  String atomDegreeCelsius($0.Form form) {
    return r'degrees Celsius';
  }

  String atomLumen($0.Form form) {
    return r'lumens';
  }

  String atomLux($0.Form form) {
    return r'luxes';
  }

  String atomBecquerel($0.Form form) {
    return r'becquerels';
  }

  String atomGray($0.Form form) {
    return r'grays';
  }

  String atomSievert($0.Form form) {
    return r'sieverts';
  }

  String atomKatal($0.Form form) {
    return r'katals';
  }

  String get prefixYotta => r'yotta';

  String get prefixZetta => r'zetta';

  String get prefixExa => r'exa';

  String get prefixPeta => r'peta';

  String get prefixTera => r'tera';

  String get prefixGiga => r'giga';

  String get prefixMega => r'mega';

  String get prefixKilo => r'kilo';

  String get prefixHecto => r'hecto';

  String get prefixDeka => r'deka';

  String get prefixDeci => r'deci';

  String get prefixCenti => r'centi';

  String get prefixMilli => r'milli';

  String get prefixMicro => r'micro';

  String get prefixNano => r'nano';

  String get prefixPico => r'pico';

  String get prefixFemto => r'femto';

  String get prefixAtto => r'atto';

  String get prefixZepto => r'zepto';

  String get prefixYocto => r'yocto';

  String get prefixKibi => r'kibi';

  String get prefixMebi => r'mebi';

  String get prefixGibi => r'gibi';

  String get prefixTebi => r'tebi';

  String get prefixPebi => r'pebi';

  String get prefixExbi => r'exbi';

  String get currencyALL => r'Lek';

  String get currencyDZD => r'Algerian Dinar';

  String get currencyARS => r'Argentine Peso';

  String get currencyAUD => r'Australian Dollar';

  String get currencyBSD => r'Bahamian Dollar';

  String get currencyBHD => r'Bahraini Dinar';

  String get currencyBDT => r'Taka';

  String get currencyAMD => r'Armenian Dram';

  String get currencyBBD => r'Barbados Dollar';

  String get currencyBMD => r'Bermudian Dollar';

  String get currencyBTN => r'Ngultrum';

  String get currencyBOB => r'Boliviano';

  String get currencyBWP => r'Pula';

  String get currencyBZD => r'Belize Dollar';

  String get currencySBD => r'Solomon Islands Dollar';

  String get currencyBND => r'Brunei Dollar';

  String get currencyMMK => r'Kyat';

  String get currencyBIF => r'Burundi Franc';

  String get currencyKHR => r'Riel';

  String get currencyCAD => r'Canadian Dollar';

  String get currencyCVE => r'Cabo Verde Escudo';

  String get currencyKYD => r'Cayman Islands Dollar';

  String get currencyLKR => r'Sri Lanka Rupee';

  String get currencyCLP => r'Chilean Peso';

  String get currencyCNY => r'Yuan Renminbi';

  String get currencyCOP => r'Colombian Peso';

  String get currencyKMF => r'Comorian Franc ';

  String get currencyCRC => r'Costa Rican Colon';

  String get currencyHRK => r'Kuna';

  String get currencyCUP => r'Cuban Peso';

  String get currencyCZK => r'Czech Koruna';

  String get currencyDKK => r'Danish Krone';

  String get currencyDOP => r'Dominican Peso';

  String get currencySVC => r'El Salvador Colon';

  String get currencyETB => r'Ethiopian Birr';

  String get currencyERN => r'Nakfa';

  String get currencyFKP => r'Falkland Islands Pound';

  String get currencyFJD => r'Fiji Dollar';

  String get currencyDJF => r'Djibouti Franc';

  String get currencyGMD => r'Dalasi';

  String get currencyGIP => r'Gibraltar Pound';

  String get currencyGTQ => r'Quetzal';

  String get currencyGNF => r'Guinean Franc';

  String get currencyGYD => r'Guyana Dollar';

  String get currencyHTG => r'Gourde';

  String get currencyHNL => r'Lempira';

  String get currencyHKD => r'Hong Kong Dollar';

  String get currencyHUF => r'Forint';

  String get currencyISK => r'Iceland Krona';

  String get currencyINR => r'Indian Rupee';

  String get currencyIDR => r'Rupiah';

  String get currencyIRR => r'Iranian Rial';

  String get currencyIQD => r'Iraqi Dinar';

  String get currencyILS => r'New Israeli Sheqel';

  String get currencyJMD => r'Jamaican Dollar';

  String get currencyJPY => r'Yen';

  String get currencyKZT => r'Tenge';

  String get currencyJOD => r'Jordanian Dinar';

  String get currencyKES => r'Kenyan Shilling';

  String get currencyKPW => r'North Korean Won';

  String get currencyKRW => r'Won';

  String get currencyKWD => r'Kuwaiti Dinar';

  String get currencyKGS => r'Som';

  String get currencyLAK => r'Lao Kip';

  String get currencyLBP => r'Lebanese Pound';

  String get currencyLSL => r'Loti';

  String get currencyLRD => r'Liberian Dollar';

  String get currencyLYD => r'Libyan Dinar';

  String get currencyMOP => r'Pataca';

  String get currencyMWK => r'Malawi Kwacha';

  String get currencyMYR => r'Malaysian Ringgit';

  String get currencyMVR => r'Rufiyaa';

  String get currencyMUR => r'Mauritius Rupee';

  String get currencyMXN => r'Mexican Peso';

  String get currencyMNT => r'Tugrik';

  String get currencyMDL => r'Moldovan Leu';

  String get currencyMAD => r'Moroccan Dirham';

  String get currencyOMR => r'Rial Omani';

  String get currencyNAD => r'Namibia Dollar';

  String get currencyNPR => r'Nepalese Rupee';

  String get currencyANG => r'Netherlands Antillean Guilder';

  String get currencyAWG => r'Aruban Florin';

  String get currencyVUV => r'Vatu';

  String get currencyNZD => r'New Zealand Dollar';

  String get currencyNIO => r'Cordoba Oro';

  String get currencyNGN => r'Naira';

  String get currencyNOK => r'Norwegian Krone';

  String get currencyPKR => r'Pakistan Rupee';

  String get currencyPAB => r'Balboa';

  String get currencyPGK => r'Kina';

  String get currencyPYG => r'Guarani';

  String get currencyPEN => r'Sol';

  String get currencyPHP => r'Philippine Peso';

  String get currencyQAR => r'Qatari Rial';

  String get currencyRUB => r'Russian Ruble';

  String get currencyRWF => r'Rwanda Franc';

  String get currencySHP => r'Saint Helena Pound';

  String get currencySAR => r'Saudi Riyal';

  String get currencySCR => r'Seychelles Rupee';

  String get currencySLL => r'Leone';

  String get currencySGD => r'Singapore Dollar';

  String get currencyVND => r'Dong';

  String get currencySOS => r'Somali Shilling';

  String get currencyZAR => r'Rand';

  String get currencySSP => r'South Sudanese Pound';

  String get currencySZL => r'Lilangeni';

  String get currencySEK => r'Swedish Krona';

  String get currencyCHF => r'Swiss Franc';

  String get currencySYP => r'Syrian Pound';

  String get currencyTHB => r'Baht';

  String get currencyTOP => r'Pa’anga';

  String get currencyTTD => r'Trinidad and Tobago Dollar';

  String get currencyAED => r'UAE Dirham';

  String get currencyTND => r'Tunisian Dinar';

  String get currencyUGX => r'Uganda Shilling';

  String get currencyMKD => r'Denar';

  String get currencyEGP => r'Egyptian Pound';

  String get currencyGBP => r'Pound Sterling';

  String get currencyTZS => r'Tanzanian Shilling';

  String get currencyUSD => r'US Dollar';

  String get currencyUYU => r'Peso Uruguayo';

  String get currencyUZS => r'Uzbekistan Sum';

  String get currencyWST => r'Tala';

  String get currencyYER => r'Yemeni Rial';

  String get currencyTWD => r'New Taiwan Dollar';

  String get currencyUYW => r'Unidad Previsional';

  String get currencyVES => r'Bolívar Soberano';

  String get currencyMRU => r'Ouguiya';

  String get currencySTN => r'Dobra';

  String get currencyCUC => r'Peso Convertible';

  String get currencyZWL => r'Zimbabwe Dollar';

  String get currencyBYN => r'Belarusian Ruble';

  String get currencyTMT => r'Turkmenistan New Manat';

  String get currencyGHS => r'Ghana Cedi';

  String get currencySDG => r'Sudanese Pound';

  String get currencyUYI => r'Uruguay Peso en Unidades Indexadas (UI)';

  String get currencyRSD => r'Serbian Dinar';

  String get currencyMZN => r'Mozambique Metical';

  String get currencyAZN => r'Azerbaijan Manat';

  String get currencyRON => r'Romanian Leu';

  String get currencyCHE => r'WIR Euro';

  String get currencyCHW => r'WIR Franc';

  String get currencyTRY => r'Turkish Lira';

  String get currencyXAF => r'CFA Franc BEAC';

  String get currencyXCD => r'East Caribbean Dollar';

  String get currencyXOF => r'CFA Franc BCEAO';

  String get currencyXPF => r'CFP Franc';

  String get currencyXBA =>
      r'Bond Markets Unit European Composite Unit (EURCO)';

  String get currencyXBB =>
      r'Bond Markets Unit European Monetary Unit (E.M.U.-6)';

  String get currencyXBC =>
      r'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)';

  String get currencyXBD =>
      r'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)';

  String get currencyXAU => r'Gold';

  String get currencyXDR => r'SDR (Special Drawing Right)';

  String get currencyXAG => r'Silver';

  String get currencyXPT => r'Platinum';

  String get currencyXTS => r'Codes specifically reserved for testing purposes';

  String get currencyXPD => r'Palladium';

  String get currencyXUA => r'ADB Unit of Account';

  String get currencyZMW => r'Zambian Kwacha';

  String get currencySRD => r'Surinam Dollar';

  String get currencyMGA => r'Malagasy Ariary';

  String get currencyCOU => r'Unidad de Valor Real';

  String get currencyAFN => r'Afghani';

  String get currencyTJS => r'Somoni';

  String get currencyAOA => r'Kwanza';

  String get currencyBGN => r'Bulgarian Lev';

  String get currencyCDF => r'Congolese Franc';

  String get currencyBAM => r'Convertible Mark';

  String get currencyEUR => r'Euro';

  String get currencyMXV => r'Mexican Unidad de Inversion (UDI)';

  String get currencyUAH => r'Hryvnia';

  String get currencyGEL => r'Lari';

  String get currencyBOV => r'Mvdol';

  String get currencyPLN => r'Zloty';

  String get currencyBRL => r'Brazilian Real';

  String get currencyCLF => r'Unidad de Fomento';

  String get currencyXSU => r'Sucre';

  String get currencyUSN => r'US Dollar (Next day)';

  String validateFieldLength(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' length');

    return output.toString();
  }

  String validateFieldItems(String field) {
    final output = StringBuffer();

    output.write(r'The items of ');

    output.write(field);
    return output.toString();
  }

  String get validateNow => r'now';

  String get validateEq => r'equal';

  String get validateGt => r'be greater than';

  String get validateGte => r'be greater than or equal to';

  String get validateLt => r'less than';

  String get validateLte => r'less than or equal to';

  String get validateOneof => r'be one of';

  String get validateOneofx => r'not be one of';

  String get validateRange => r'be inside range';

  String get validateRangex => r'be outside range';

  String get validatePattern => r'match the pattern';

  String get validatePrefix => r'have prefix';

  String get validateSuffix => r'have suffix';

  String get validateContains => r'contain';

  String validateMustConst(String field, String rule, String kConstWithUnit) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must ');

    output.write(rule);

    output.write(r' ');

    output.write(kConstWithUnit);
    return output.toString();
  }

  String validateUnique(int position) {
    final output = StringBuffer();

    output.write(r'unique, but the No.');

    output.write(position.toString());

    output.write(r' item is repeated');

    return output.toString();
  }

  String validateNoSparse(String key) {
    final output = StringBuffer();

    output.write(r'a non-sparse map, but the value of `');

    output.write(key);

    output.write(r'` is nil');

    return output.toString();
  }

  String get validateEmail => r'email';

  String get validateHostname => r'hostname';

  String get validateIp => r'ip';

  String get validateIpv4 => r'ipv4';

  String get validateIpv6 => r'ipv6';

  String get validateUri => r'uri';

  String get validateUriRef => r'uri ref';

  String validateMustBe(String field, String something) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be ');

    output.write(something);
    return output.toString();
  }

  String validateMustWithinNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be within ');

    output.write(duration);

    output.write(r' of now');

    return output.toString();
  }

  String validateMustWithinGtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be greater than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateMustWithinLtNow(String field, String duration) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' must be less than now within ');

    output.write(duration);
    return output.toString();
  }

  String validateRequired(String field) {
    final output = StringBuffer();

    output.write(field);

    output.write(r' is required');

    return output.toString();
  }

  String get formRetry => r'Retry';

  String get formBackAlertTitle => r'Alert';

  String get formBackAlertContent => r'Changes exist!';

  String get formBackAlertStay => r'Stay';

  String get formBackAlertGoBack => r'Go back';

  String get formReset => r'Reset';

  String get formEdit => r'Edit';
}

/// last_modified: 2020-02-13 21:10:02.054616 +0000 UTC

abstract class PgdeLocalizations {
  static const $delegate = _PgdeLocalizationsDelegate();

  PgdeLocalizations();

  String atomMeter($0.Form form);

  String atomFoot($0.Form form);

  String atomInch($0.Form form);

  String atomYard($0.Form form);

  String atomMile($0.Form form);

  String atomNauticalMile($0.Form form);

  String atomLightYear($0.Form form);

  String atomHectare($0.Form form);

  String atomAre($0.Form form);

  String atomLiter($0.Form form);

  String atomGallon($0.Form form);

  String atomBarrel($0.Form form);

  String atomGram($0.Form form);

  String atomTon($0.Form form);

  String atomPound($0.Form form);

  String atomOunce($0.Form form);

  String atomSecond($0.Form form);

  String atomMinute($0.Form form);

  String atomHour($0.Form form);

  String atomDay($0.Form form);

  String atomWeek($0.Form form);

  String atomMonth($0.Form form);

  String atomYear($0.Form form);

  String atomCentury($0.Form form);

  String atomSecondAngle($0.Form form);

  String atomMinuteAngle($0.Form form);

  String atomDegree($0.Form form);

  String atomAmpere($0.Form form);

  String atomElectronvolt($0.Form form);

  String atomBel($0.Form form);

  String atomKelvin($0.Form form);

  String atomMole($0.Form form);

  String atomCandela($0.Form form);

  String atomPercent($0.Form form);

  String atomPerThousand($0.Form form);

  String atomBit($0.Form form);

  String atomByte($0.Form form);

  String atomCharacter($0.Form form);

  String atomWord($0.Form form);

  String atomRadian($0.Form form);

  String atomSteradian($0.Form form);

  String atomHertz($0.Form form);

  String atomNewton($0.Form form);

  String atomPascal($0.Form form);

  String atomJoule($0.Form form);

  String atomWatt($0.Form form);

  String atomCoulomb($0.Form form);

  String atomVolt($0.Form form);

  String atomFarad($0.Form form);

  String atomOhm($0.Form form);

  String atomSiemens($0.Form form);

  String atomWeber($0.Form form);

  String atomTesla($0.Form form);

  String atomHenry($0.Form form);

  String atomDegreeCelsius($0.Form form);

  String atomLumen($0.Form form);

  String atomLux($0.Form form);

  String atomBecquerel($0.Form form);

  String atomGray($0.Form form);

  String atomSievert($0.Form form);

  String atomKatal($0.Form form);

  String get prefixYotta;

  String get prefixZetta;

  String get prefixExa;

  String get prefixPeta;

  String get prefixTera;

  String get prefixGiga;

  String get prefixMega;

  String get prefixKilo;

  String get prefixHecto;

  String get prefixDeka;

  String get prefixDeci;

  String get prefixCenti;

  String get prefixMilli;

  String get prefixMicro;

  String get prefixNano;

  String get prefixPico;

  String get prefixFemto;

  String get prefixAtto;

  String get prefixZepto;

  String get prefixYocto;

  String get prefixKibi;

  String get prefixMebi;

  String get prefixGibi;

  String get prefixTebi;

  String get prefixPebi;

  String get prefixExbi;

  String get currencyALL;

  String get currencyDZD;

  String get currencyARS;

  String get currencyAUD;

  String get currencyBSD;

  String get currencyBHD;

  String get currencyBDT;

  String get currencyAMD;

  String get currencyBBD;

  String get currencyBMD;

  String get currencyBTN;

  String get currencyBOB;

  String get currencyBWP;

  String get currencyBZD;

  String get currencySBD;

  String get currencyBND;

  String get currencyMMK;

  String get currencyBIF;

  String get currencyKHR;

  String get currencyCAD;

  String get currencyCVE;

  String get currencyKYD;

  String get currencyLKR;

  String get currencyCLP;

  String get currencyCNY;

  String get currencyCOP;

  String get currencyKMF;

  String get currencyCRC;

  String get currencyHRK;

  String get currencyCUP;

  String get currencyCZK;

  String get currencyDKK;

  String get currencyDOP;

  String get currencySVC;

  String get currencyETB;

  String get currencyERN;

  String get currencyFKP;

  String get currencyFJD;

  String get currencyDJF;

  String get currencyGMD;

  String get currencyGIP;

  String get currencyGTQ;

  String get currencyGNF;

  String get currencyGYD;

  String get currencyHTG;

  String get currencyHNL;

  String get currencyHKD;

  String get currencyHUF;

  String get currencyISK;

  String get currencyINR;

  String get currencyIDR;

  String get currencyIRR;

  String get currencyIQD;

  String get currencyILS;

  String get currencyJMD;

  String get currencyJPY;

  String get currencyKZT;

  String get currencyJOD;

  String get currencyKES;

  String get currencyKPW;

  String get currencyKRW;

  String get currencyKWD;

  String get currencyKGS;

  String get currencyLAK;

  String get currencyLBP;

  String get currencyLSL;

  String get currencyLRD;

  String get currencyLYD;

  String get currencyMOP;

  String get currencyMWK;

  String get currencyMYR;

  String get currencyMVR;

  String get currencyMUR;

  String get currencyMXN;

  String get currencyMNT;

  String get currencyMDL;

  String get currencyMAD;

  String get currencyOMR;

  String get currencyNAD;

  String get currencyNPR;

  String get currencyANG;

  String get currencyAWG;

  String get currencyVUV;

  String get currencyNZD;

  String get currencyNIO;

  String get currencyNGN;

  String get currencyNOK;

  String get currencyPKR;

  String get currencyPAB;

  String get currencyPGK;

  String get currencyPYG;

  String get currencyPEN;

  String get currencyPHP;

  String get currencyQAR;

  String get currencyRUB;

  String get currencyRWF;

  String get currencySHP;

  String get currencySAR;

  String get currencySCR;

  String get currencySLL;

  String get currencySGD;

  String get currencyVND;

  String get currencySOS;

  String get currencyZAR;

  String get currencySSP;

  String get currencySZL;

  String get currencySEK;

  String get currencyCHF;

  String get currencySYP;

  String get currencyTHB;

  String get currencyTOP;

  String get currencyTTD;

  String get currencyAED;

  String get currencyTND;

  String get currencyUGX;

  String get currencyMKD;

  String get currencyEGP;

  String get currencyGBP;

  String get currencyTZS;

  String get currencyUSD;

  String get currencyUYU;

  String get currencyUZS;

  String get currencyWST;

  String get currencyYER;

  String get currencyTWD;

  String get currencyUYW;

  String get currencyVES;

  String get currencyMRU;

  String get currencySTN;

  String get currencyCUC;

  String get currencyZWL;

  String get currencyBYN;

  String get currencyTMT;

  String get currencyGHS;

  String get currencySDG;

  String get currencyUYI;

  String get currencyRSD;

  String get currencyMZN;

  String get currencyAZN;

  String get currencyRON;

  String get currencyCHE;

  String get currencyCHW;

  String get currencyTRY;

  String get currencyXAF;

  String get currencyXCD;

  String get currencyXOF;

  String get currencyXPF;

  String get currencyXBA;

  String get currencyXBB;

  String get currencyXBC;

  String get currencyXBD;

  String get currencyXAU;

  String get currencyXDR;

  String get currencyXAG;

  String get currencyXPT;

  String get currencyXTS;

  String get currencyXPD;

  String get currencyXUA;

  String get currencyZMW;

  String get currencySRD;

  String get currencyMGA;

  String get currencyCOU;

  String get currencyAFN;

  String get currencyTJS;

  String get currencyAOA;

  String get currencyBGN;

  String get currencyCDF;

  String get currencyBAM;

  String get currencyEUR;

  String get currencyMXV;

  String get currencyUAH;

  String get currencyGEL;

  String get currencyBOV;

  String get currencyPLN;

  String get currencyBRL;

  String get currencyCLF;

  String get currencyXSU;

  String get currencyUSN;

  String validateFieldLength(String field);

  String validateFieldItems(String field);

  String get validateNow;

  String get validateEq;

  String get validateGt;

  String get validateGte;

  String get validateLt;

  String get validateLte;

  String get validateOneof;

  String get validateOneofx;

  String get validateRange;

  String get validateRangex;

  String get validatePattern;

  String get validatePrefix;

  String get validateSuffix;

  String get validateContains;

  String validateMustConst(String field, String rule, String kConstWithUnit);

  String validateUnique(int position);

  String validateNoSparse(String key);

  String get validateEmail;

  String get validateHostname;

  String get validateIp;

  String get validateIpv4;

  String get validateIpv6;

  String get validateUri;

  String get validateUriRef;

  String validateMustBe(String field, String something);

  String validateMustWithinNow(String field, String duration);

  String validateMustWithinGtNow(String field, String duration);

  String validateMustWithinLtNow(String field, String duration);

  String validateRequired(String field);

  String get formRetry;

  String get formBackAlertTitle;

  String get formBackAlertContent;

  String get formBackAlertStay;

  String get formBackAlertGoBack;

  String get formReset;

  String get formEdit;

  static PgdeLocalizations of($1.BuildContext context) =>
      $1.Localizations.of<PgdeLocalizations>(context, PgdeLocalizations);
}
