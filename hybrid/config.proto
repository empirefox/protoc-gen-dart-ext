syntax = "proto3";

package hybrid;
option go_package = "github.com/empirefox/hybrid/config;config";

import "google/protobuf/wrappers.proto";
import "pgde/zero/zero.proto";
import "pgde/format/format.proto";
import "pgde/form/form.proto";
import "pgde/l10n/l10n.proto";
import "validate/validate.proto";

message ConfigTree {
  option (pgde.l10n.message).ignore = true;
  option (pgde.form.msg).node.disabled = true;
  option (pgde.zero.disabled) = true;
  option (validate.disabled) = true;
  string version = 1;
  string rootName = 2;
  string rootPath = 3;
  string configName = 4;
  string configPath = 5;
  string ipfsName = 6;
  string ipfsPath = 7;
  string storeName = 8;
  string storePath = 9;
  string filesRootName = 10;
  string filesRootPath = 11;
  string rulesRootName = 12;
  string rulesRootPath = 13;
}

message Basic {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };
  }

  // @inject_tag: toml:",omitempty"
  string version = 2
      [ (pgde.l10n.field).ignore = true, (pgde.form.field).hide = true ];

  // @inject_tag: toml:",omitempty" env:"HYBRID_DEV"
  bool dev = 3;

  // @inject_tag: toml:",omitempty" env:"HYBRID_ENABLE_BIND"
  bool enableBind = 4;
  // @inject_tag: toml:",omitempty" env:"HYBRID_BIND_IP"
  bytes bindIp = 5 [
    (validate.rules).bytes.ip = true,
    (pgde.format.to).bytes.type = ip,
    (pgde.zero.to) = {bytes : "\xff\x00\x00\x01"}
  ];
  // @inject_tag: toml:",omitempty" env:"HYBRID_BIND_PORT"
  uint32 bindPort = 6
      [ (validate.rules).uint32.lt = 65535, (pgde.zero.to) = {uint32 : 7777} ];

  // @inject_tag: toml:",omitempty"
  uint32 flushIntervalMs = 7 [
    (pgde.format.to).time = {
      type : duration,
      intUnit : millisecond,
    },
    (pgde.zero.to) = {
      uint32 : 200,
    }
  ];

  // @inject_tag: toml:",omitempty"
  // Token is fallback token that will be veried by servers, both Ipfs
  bytes token = 8 [ (validate.rules).bytes.max_len = 732 ];
}

message Log {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };
  }

  // @inject_tag: toml:",omitempty"
  bool dev = 2;
  // @inject_tag: toml:",omitempty"
  string level = 3 [ (validate.rules).string = {
    in :
        [ "", "debug", "info", "warn", "error", "dpanic", "panic", "fatal" ]
  } ];
  // @inject_tag: toml:",omitempty"
  // Target accepts "tcp://host:port?timeout=5s", file, sentryDSN, empty or
  // "nop". Register NewTCPSink to support tcp sink. Default is stderr.
  string target = 4;
}

message Ipfs {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };
  }

  // @inject_tag: toml:",omitempty"
  bytes fakeApiListenIp = 2 [
    (validate.rules).bytes.ip = true,
    (pgde.format.to).bytes.type = ip,
    (pgde.zero.to) = {
      bytes : "\xff\x00\xff\x01",
    }
  ];
  // @inject_tag: toml:",omitempty"
  uint32 fakeApiListenPort = 3 [
    (validate.rules).uint32.lt = 65535,
    (pgde.zero.to) = {
      uint32 : 1270,
    }
  ];

  bool enableGateway = 4;
  // @inject_tag: toml:",omitempty"
  string gatewayServerName = 5 [
    (validate.rules).string.hostname = true,
    (pgde.zero.to) = {
      string : "ipfs",
    }
  ];

  bool enableApi = 6;
  // @inject_tag: toml:",omitempty"
  string apiServerName = 7 [
    (validate.rules).string.hostname = true,
    (pgde.zero.to) = {
      string : "api.ipfs",
    }
  ];

  // @inject_tag: toml:",omitempty"
  repeated string profile = 8 [ (validate.rules).repeated .unique = true ];
  // @inject_tag: toml:",omitempty"
  bool autoMigrate = 9;
  // @inject_tag: toml:",omitempty"
  bool enableIpnsPubSub = 10;
  // @inject_tag: toml:",omitempty"
  bool enablePubSub = 11;
  // @inject_tag: toml:",omitempty"
  bool enableMultiplex = 12;

  // @inject_tag: toml:",omitempty"
  string token = 13 [ (validate.rules).string.max_len = 732 ];
}

// server types

message IpfsServer {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message MgrView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  uint32 id = 1;
  // @inject_tag: toml:",omitempty"
  bool disabled = 2;
  // @inject_tag: toml:",omitempty"
  google.protobuf.StringValue name = 3
      [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  string peer = 4 [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  string token = 5 [ (validate.rules).string.max_len = 732 ];
}

message FileServer {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message MgrView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  uint32 id = 1;
  // @inject_tag: toml:",omitempty"
  bool disabled = 2;
  // @inject_tag: toml:",omitempty"
  google.protobuf.StringValue name = 3
      [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  string zip = 4 [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  map<string, string> redirect = 5 [ (validate.rules).map = {
    keys : {string : {uri_ref : true}},
    values : {string : {uri_ref : true}},
  } ];
  // @inject_tag: toml:",omitempty"
  bool dev = 6;
}

message HttpProxyServer {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message MgrView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  uint32 id = 1;
  // @inject_tag: toml:",omitempty"
  bool disabled = 2;
  // @inject_tag: toml:",omitempty"
  google.protobuf.StringValue name = 3
      [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  string host = 4 [
    (validate.rules).string.ip = true,
    (pgde.zero.to) = {string : "127.0.0.1"}
  ];
  // @inject_tag: toml:",omitempty"
  uint32 port = 5
      [ (validate.rules).uint32.lt = 65535, (pgde.zero.to) = {uint32 : 8899} ];
  // @inject_tag: toml:",omitempty"
  bool keepAlive = 6;
}

message ServerMgrView {
  option (pgde.form.msg).crud = true;
  oneof source {
    option (pgde.form.source) = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
      genrpc : true,
    };
    IpfsServer.MgrView ipfs = 1;
    FileServer.MgrView file = 2;
    HttpProxyServer.MgrView http = 3;
  }
}

message ServerUseView {
  option (pgde.form.msg).manytoone = true;
  oneof source {
    option (pgde.form.source) = {
      pager : true,
      rows : 20,
      search : true,
      genrpc : true,
    };
    IpfsServer.UseView ipfs = 1;
    FileServer.UseView file = 2;
    HttpProxyServer.UseView http = 3;
  }
}

// server types end

// routers

message AdpRouter {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message MgrView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  uint32 id = 1;
  // @inject_tag: toml:",omitempty"
  bool disabled = 2;
  string name = 3 [ (validate.rules).string.hostname = true ];

  // @inject_tag: toml:",omitempty"
  // *.b64 is base64 encoded.
  // *.ipfs is fetched from ipfs network.
  // ipfs file is of toml format:
  //   [[Ipfs]]
  //   Path = "Qmxxx..xA"
  //   Base64 = true
  //
  //   [[Ipfs]]
  //   Path = "Qmxxx..xB"
  string rulesDirName = 4 [ (validate.rules).string.hostname = true ];
  // @inject_tag: toml:",omitempty"
  ServerUseView blocked = 5;
  // @inject_tag: toml:",omitempty"
  ServerUseView unblocked = 6;
  // @inject_tag: toml:",omitempty"
  bool etcHostsIpAsBlocked = 7;
  // @inject_tag: toml:",omitempty"
  bool dev = 8;
}

message IPNetRouter {
  option (pgde.form.msg).node = {
    type : leaf
  };

  message MgrView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      create : true,
      edit : true,
      delete : true,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  message UseView {
    option (pgde.form.msg).view.crud = {
      pager : true,
      rows : 20,
      search : true,
    };

    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    uint32 id = 1;
    string name = 3;
  }

  uint32 id = 1;
  // @inject_tag: toml:",omitempty"
  bool disabled = 2;
  string name = 3 [ (validate.rules).string.hostname = true ];

  // @inject_tag: toml:",omitempty"
  repeated google.protobuf.BytesValue ip = 4 [
    (validate.rules).repeated .items.bytes.ip = true,
    (pgde.format.to).bytes.type = ip
  ];
  // @inject_tag: toml:",omitempty"
  repeated google.protobuf.BytesValue netv4 = 5
      [ (validate.rules).bytes.len = 5, (pgde.format.to).bytes.type = cidrv4 ];
  // @inject_tag: toml:",omitempty"
  repeated google.protobuf.BytesValue netv6 = 6
      [ (validate.rules).bytes.len = 17, (pgde.format.to).bytes.type = cidrv6 ];
  // @inject_tag: toml:",omitempty"
  ServerUseView matched = 7 [ (pgde.form.field).radio = {
    pager : true,
    create : true,
    edit : true,
    delete : true,
    search : true,
  } ];
  // @inject_tag: toml:",omitempty"
  ServerUseView unmatched = 8 [ (pgde.form.field).radio = {
    pager : true,
    create : true,
    edit : true,
    delete : true,
    search : true,
  } ];
  // @inject_tag: toml:",omitempty"
  FileServer.UseView fileTest = 9 [ (pgde.form.field).radio = {
    pager : true,
    create : true,
    edit : true,
    delete : true,
    search : true,
  } ];
}

message RouterUseViewList {
  // the dst list
  option (pgde.form.msg).manytomany = {
    pager : false,
    rows : 20,
    add : true,
    remove : true,
    unique : true,
    rank : true,
  };

  // the dst element, users pass the widget as input argument
  message Element {
    message Id {
      option (pgde.form.msg).id = true;
      uint32 id = 1;
    }

    enum Type {
      invalid = 0;
      adp = 1;
      ipnet = 2;
    }

    uint32 id = 1;
    Type type = 2;
    string name = 3;
    int64 rank = 4;
  }

  oneof source {
    option (pgde.form.source) = {
      pager : true,
      rows : 20,
      search : true,
      genrpc : true,
    };
    AdpRouter.UseView adp = 1;
    IPNetRouter.UseView ipnet = 2;
  }
}

// routers end

// reserved names: DIRECT over with hybrid
// env:
// HYBRID_ROOT_PATH=$HOME/.hybrid
// HYBRID_DEV=false
// HYBRID_BIND=:7777
// HYBRID_FILE_SERVERS_DISABLED=a,b,c
// HYBRID_ROUTER_DISABLED=a,b,c
message Config {
  option (pgde.form.msg).node = {
    type : entry
  };

  message Id {
    option (pgde.form.msg).id = true;
    uint32 id = 1;
  }

  Basic.UseView basic = 1 [ (validate.rules).message.required = true ];
  Log.UseView log = 2;
  Ipfs.UseView ipfs = 3;

  repeated ServerMgrView servers = 4;

  repeated AdpRouter.MgrView adps = 5;
  repeated IPNetRouter.MgrView ipnets = 6;

  repeated RouterUseViewList.Element routers = 7;
}
