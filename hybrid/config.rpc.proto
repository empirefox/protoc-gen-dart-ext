// DO NOT EDIT. Generated by protoc-gen-dart-ext/tools.

syntax = "proto3";

package hybrid;
option go_package = "github.com/empirefox/hybrid/config;config";
import "google/protobuf/empty.proto";
import "hybrid/config.proto";
import "pgde/error/error.proto";

message BasicPayload {
  message GetResp {
    Basic data = 1;
    pgde.error.BackendError error = 2;
  }
}

message IpfsPayload {
  message GetResp {
    Ipfs data = 1;
    pgde.error.BackendError error = 2;
  }
}

message LogPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    Log data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated Log.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      Log.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

message IpfsServerPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    IpfsServer data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated IpfsServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      IpfsServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

message FileServerPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    FileServer data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated FileServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      FileServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

message HttpProxyServerPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    HttpProxyServer data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated HttpProxyServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      HttpProxyServer.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

message ServerViewPayload {
  message SrcId {
    uint32 ipfs = 1;
    uint32 file = 2;
    uint32 http = 3;
  }
  message SrcResp {
    repeated ServerView data = 1;
    pgde.error.BackendError error = 2;
  }
  message Group {
    repeated IpfsServer.View ipfs = 1;
    repeated FileServer.View file = 2;
    repeated HttpProxyServer.View http = 3;
  }
  message GroupResp {
    Group data = 1;
    pgde.error.BackendError error = 2;
  }
  message SrcElement {
    oneof is {
      IpfsServer ipfs = 1;
      FileServer file = 2;
      HttpProxyServer http = 3;
    }
  }
  message GetResp {
    SrcElement data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    ServerView data = 1;
    pgde.error.BackendError error = 2;
  }
}

message AdpRouterPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    AdpRouter data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated AdpRouter.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      AdpRouter.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

message IPNetRouterPayload {
  message SrcId { uint32 id = 1; }
  message GetResp {
    IPNetRouter data = 1;
    pgde.error.BackendError error = 2;
  }
  message View {
    message SrcResp {
      repeated IPNetRouter.View data = 1;
      pgde.error.BackendError error = 2;
    }
    message AddResp {
      IPNetRouter.View data = 1;
      pgde.error.BackendError error = 2;
    }
  }
}

service IPNetRouterMatchedService {
  rpc Src(google.protobuf.Empty) returns (ServerViewPayload.SrcResp);
  rpc Select(ServerViewPayload.SrcId) returns (pgde.error.BackendError);
}

service IPNetRouterUnmatchedService {
  rpc Src(google.protobuf.Empty) returns (ServerViewPayload.SrcResp);
  rpc Select(ServerViewPayload.SrcId) returns (pgde.error.BackendError);
}

service IPNetRouterFileTestService {
  rpc Src(google.protobuf.Empty) returns (FileServerPayload.View.SrcResp);
  rpc Select(FileServerPayload.SrcId) returns (pgde.error.BackendError);
}

message RouterUseViewPayload {
  message SrcResp {
    repeated RouterUseView data = 1;
    pgde.error.BackendError error = 2;
  }
  message Group {
    repeated AdpRouter.View adp = 1;
    repeated IPNetRouter.View ipnet = 2;
  }
  message GroupResp {
    Group data = 1;
    pgde.error.BackendError error = 2;
  }
  message SrcElement {
    oneof is {
      AdpRouter adp = 1;
      IPNetRouter ipnet = 2;
    }
  }
  message GetResp {
    SrcElement data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    RouterUseView data = 1;
    pgde.error.BackendError error = 2;
  }
  message SrcIds { repeated RouterUseView.Id ids = 1; }
  message DstResp {
    repeated RouterUseView.Element data = 1;
    pgde.error.BackendError error = 2;
  }
  message SelectResp {
    RouterUseView.Element data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigIpfsService {
  rpc Get(google.protobuf.Empty) returns (IpfsPayload.GetResp);
}

service ConfigLogService {
  rpc Src(google.protobuf.Empty) returns (LogPayload.View.SrcResp);
  rpc Select(LogPayload.SrcId) returns (pgde.error.BackendError);
}

service ConfigLogsService {
  rpc Src(google.protobuf.Empty) returns (LogPayload.View.SrcResp);
  rpc Get(LogPayload.SrcId) returns (LogPayload.GetResp);
  rpc Add(Log.View) returns (LogPayload.View.AddResp);
  rpc Save(Log.View) returns (pgde.error.BackendError);
  rpc Remove(LogPayload.SrcId) returns (pgde.error.BackendError);
}

service ConfigServersService {
  rpc Src(google.protobuf.Empty) returns (ServerViewPayload.SrcResp);
  rpc Get(ServerViewPayload.SrcId) returns (ServerViewPayload.GetResp);
  rpc Add(ServerViewPayload.SrcElement) returns (ServerViewPayload.AddResp);
  rpc Save(ServerViewPayload.SrcElement) returns (pgde.error.BackendError);
  rpc Remove(ServerViewPayload.SrcId) returns (pgde.error.BackendError);
}

service ConfigAdpsService {
  rpc Src(google.protobuf.Empty) returns (AdpRouterPayload.View.SrcResp);
  rpc Get(AdpRouterPayload.SrcId) returns (AdpRouterPayload.GetResp);
  rpc Add(AdpRouter.View) returns (AdpRouterPayload.View.AddResp);
  rpc Save(AdpRouter.View) returns (pgde.error.BackendError);
  rpc Remove(AdpRouterPayload.SrcId) returns (pgde.error.BackendError);
}

service ConfigIpnetsService {
  rpc Src(google.protobuf.Empty) returns (IPNetRouterPayload.View.SrcResp);
  rpc Get(IPNetRouterPayload.SrcId) returns (IPNetRouterPayload.GetResp);
  rpc Add(IPNetRouter.View) returns (IPNetRouterPayload.View.AddResp);
  rpc Save(IPNetRouter.View) returns (pgde.error.BackendError);
  rpc Remove(IPNetRouterPayload.SrcId) returns (pgde.error.BackendError);
}

service ConfigRoutersService {
  rpc Src(google.protobuf.Empty) returns (RouterUseViewPayload.SrcResp);
  rpc Select(RouterUseView.Id) returns (RouterUseViewPayload.SelectResp);

  rpc Dst(google.protobuf.Empty) returns (RouterUseViewPayload.DstResp);
  rpc Remove(RouterUseView.Id) returns (pgde.error.BackendError);
}