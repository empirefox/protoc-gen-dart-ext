// DO NOT EDIT. Generated by protoc-gen-dart-ext/tools.

syntax = "proto3";

package hybrid;
option go_package = "github.com/empirefox/hybrid/config;config";
import "google/protobuf/empty.proto";
import "hybrid/config.proto";
import "pgde/error/error.proto";

service IPNetRouterMatchedService {
  rpc Src(google.protobuf.Empty) returns (IPNetRouterMatchedPayload.SrcResp);
  rpc Select(IPNetRouterMatchedPayload.SrcId) returns (pgde.error.BackendError);
}

message IPNetRouterMatchedPayload {
  message SrcId {
    oneof is {
      uint32 ipfs = 1;
      uint32 file = 2;
      uint32 http = 3;
    }
  }

  message SrcResp {
    repeated ServerView data = 1;
    pgde.error.BackendError error = 2;
  }
}

service IPNetRouterUnmatchedService {
  rpc Src(google.protobuf.Empty) returns (IPNetRouterUnmatchedPayload.SrcResp);
  rpc Select(IPNetRouterUnmatchedPayload.SrcId)
      returns (pgde.error.BackendError);
}

message IPNetRouterUnmatchedPayload {
  message SrcId {
    oneof is {
      uint32 ipfs = 1;
      uint32 file = 2;
      uint32 http = 3;
    }
  }

  message SrcResp {
    repeated ServerView data = 1;
    pgde.error.BackendError error = 2;
  }
}

service IPNetRouterFileTestService {
  rpc Src(google.protobuf.Empty) returns (IPNetRouterFileTestPayload.SrcResp);
  rpc Select(IPNetRouterFileTestPayload.SrcId)
      returns (pgde.error.BackendError);
}

message IPNetRouterFileTestPayload {
  message SrcId { uint32 id = 1; }

  message SrcResp {
    repeated FileServer.View data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigBasicService {
  rpc Get(google.protobuf.Empty) returns (ConfigBasicPayload.GetResp);
}

message ConfigBasicPayload {
  message GetResp {
    Basic.TypeName data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigIpfsService {
  rpc Get(google.protobuf.Empty) returns (ConfigIpfsPayload.GetResp);
}

message ConfigIpfsPayload {
  message GetResp {
    Ipfs.TypeName data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigLogService {
  rpc Src(google.protobuf.Empty) returns (ConfigLogPayload.SrcResp);
  rpc Select(ConfigLogPayload.SrcId) returns (pgde.error.BackendError);
}

message ConfigLogPayload {
  message SrcId { uint32 id = 1; }

  message SrcResp {
    repeated Log.View data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigLogsService {
  rpc Src(google.protobuf.Empty) returns (ConfigLogsPayload.SrcResp);
  rpc Get(ConfigLogsPayload.SrcId) returns (ConfigLogsPayload.GetResp);
  rpc Add(Log) returns (ConfigLogsPayload.AddResp);
  rpc Save(Log) returns (pgde.error.BackendError);
  rpc Remove(ConfigLogsPayload.SrcId) returns (pgde.error.BackendError);
}

message ConfigLogsPayload {
  message SrcId { uint32 id = 1; }

  message SrcResp {
    repeated Log.View data = 1;
    pgde.error.BackendError error = 2;
  }
  message GetResp {
    Log data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    Log.View data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigServersService {
  rpc Src(google.protobuf.Empty) returns (ConfigServersPayload.SrcResp);
  rpc Get(ConfigServersPayload.SrcId) returns (ConfigServersPayload.GetResp);
  rpc Add(ConfigServersPayload.Element) returns (ConfigServersPayload.AddResp);
  rpc Save(ConfigServersPayload.Element) returns (pgde.error.BackendError);
  rpc Remove(ConfigServersPayload.SrcId) returns (pgde.error.BackendError);
}

message ConfigServersPayload {
  message SrcId {
    oneof is {
      uint32 ipfs = 1;
      uint32 file = 2;
      uint32 http = 3;
    }
  }
  message Group {
    repeated IpfsServer.View ipfs = 1;
    repeated FileServer.View file = 2;
    repeated HttpProxyServer.View http = 3;
  }
  message SrcResp {
    Group data = 1;
    pgde.error.BackendError error = 2;
  }
  message Element {
    oneof is {
      IpfsServer ipfs = 1;
      FileServer file = 2;
      HttpProxyServer http = 3;
    }
  }
  message GetResp {
    Element data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    ServerView data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigAdpsService {
  rpc Src(google.protobuf.Empty) returns (ConfigAdpsPayload.SrcResp);
  rpc Get(ConfigAdpsPayload.SrcId) returns (ConfigAdpsPayload.GetResp);
  rpc Add(AdpRouter) returns (ConfigAdpsPayload.AddResp);
  rpc Save(AdpRouter) returns (pgde.error.BackendError);
  rpc Remove(ConfigAdpsPayload.SrcId) returns (pgde.error.BackendError);
}

message ConfigAdpsPayload {
  message SrcId { uint32 id = 1; }

  message SrcResp {
    repeated AdpRouter.View data = 1;
    pgde.error.BackendError error = 2;
  }
  message GetResp {
    AdpRouter data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    AdpRouter.View data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigIpnetsService {
  rpc Src(google.protobuf.Empty) returns (ConfigIpnetsPayload.SrcResp);
  rpc Get(ConfigIpnetsPayload.SrcId) returns (ConfigIpnetsPayload.GetResp);
  rpc Add(IPNetRouter) returns (ConfigIpnetsPayload.AddResp);
  rpc Save(IPNetRouter) returns (pgde.error.BackendError);
  rpc Remove(ConfigIpnetsPayload.SrcId) returns (pgde.error.BackendError);
}

message ConfigIpnetsPayload {
  message SrcId { uint32 id = 1; }

  message SrcResp {
    repeated IPNetRouter.View data = 1;
    pgde.error.BackendError error = 2;
  }
  message GetResp {
    IPNetRouter data = 1;
    pgde.error.BackendError error = 2;
  }
  message AddResp {
    IPNetRouter.View data = 1;
    pgde.error.BackendError error = 2;
  }
}

service ConfigRoutersService {
  rpc Src(google.protobuf.Empty) returns (ConfigRoutersPayload.SrcResp);
  rpc Select(ConfigRoutersPayload.SrcId)
      returns (ConfigRoutersPayload.SelectResp);

  rpc Dst(google.protobuf.Empty) returns (ConfigRoutersPayload.DstResp);
  rpc Remove(ConfigRoutersPayload.DstId) returns (pgde.error.BackendError);
}

message ConfigPayload {
	message ServerView {
		message Id {}
		message Element {}
	}

}

message ConfigRoutersPayload {
  message SrcId {
    oneof is {
      uint32 adp = 1;
      uint32 ipnet = 2;
    }
  }

  message SrcResp {
    repeated RouterUseView data = 1;
    pgde.error.BackendError error = 2;
  }
  message SelectResp {
    RouterUseView.Element data = 1;
    pgde.error.BackendError error = 2;
  }
  message DstResp {
    repeated RouterUseView.Element data = 1;
    pgde.error.BackendError error = 2;
  }
  message DstId { uint32 id = 1; }
}