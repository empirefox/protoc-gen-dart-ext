syntax = "proto3";

package pgde.form;

option go_package = "github.com/empirefox/protoc-gen-dart-ext/pkg/pgde/form;form";

import "google/protobuf/descriptor.proto";

import "pgde/form/color.proto";
import "pgde/form/icon.proto";
import "pgde/units/units.proto";
import "pgde/zero/zero.proto";

extend google.protobuf.EnumOptions {
  // default Field if not set in message.
  pgde.form.Field defaultField = 919114;
}
extend google.protobuf.EnumValueOptions {
  pgde.form.InputOption inputOption = 919114;
}

extend google.protobuf.OneofOptions { OneofHeader header = 919114; }
message OneofHeader {
  message Title {
    enum Show {
      icon = 0;
      text = 1;
      iconText = 2;
    }
  }
  message AfterCreate {
    enum State {
      hide = 0;
      icon = 1;
      text = 2;
      iconText = 3;
      frozen = 4;
      changeable = 5;
    }
  }

  MaterialIcon icon = 1;
  Title.Show title = 2;
  AfterCreate.State afterCreate = 3;
}

extend google.protobuf.MessageOptions {
  pgde.form.Node node = 919114;
  pgde.form.Crud crud = 919115;
}

message InputOption { MaterialIcon icon = 1; }

message Node {
  oneof is {
    bool skipped = 1;

    // Accepts field type of entry, Views, leaf.
    // Rejects others fields including any built-in fields.
    bool entry = 2;

    // Leaf is a whole form, which expands everything execpt Views.
    bool leaf = 3;

    // Defines a View of leaf, must be defined under the leaf,
    // also generates list entry for the leaf.
    Crud view = 5;
  }
  MaterialIcon icon = 6;
  Protector protector = 7;
}

extend google.protobuf.FieldOptions { pgde.form.Field field = 919114; }
message Field {
  InputDecoration decoration = 1;
  Protector protector = 2;

  oneof build {
    bool hide = 3;
    bool disabled = 4;
    bool ensureAgain = 5;
  }

  oneof type {
    TextInput text = 11;
    SignatureInput signature = 12;
    NumberInput number = 13;
    StepperInput stepper = 14;
    SliderInput slider = 15;
    RateInput rate = 16;

    EnumInput.Type enumType = 17;

    // Required by message View. Overwrites the Node.view of field type.
    Crud radio = 18;
    // Required by repeated message View. The src overwrites the Node.view of field type.
    ListInput list = 19;

    // Required by message or repeated message.
    MaterialColor embed = 20;

    SwitchInput boolSwitch = 21;
    DatetimePickerInput datetime = 22;

    // Required by map.
    bool ignoreMap = 23;
  }
}

enum Protector {
  noProtector = 0;
  pin = 1;
  pattern = 2;
  password = 3;
}

message TextInput {
  enum Type {
    autoByType = 0;

    datetime = 2;
    emailAddress = 3;
    multiline = 4;
    number = 5;
    phone = 6;
    text = 7;
    url = 8;
  }
  Type keyboardType = 1;

  bool obscureText = 2;
  bool autocorrect = 3;
  int32 maxLines = 4;
  bool maxLengthEnforced = 5;
}

message SignatureInput {
  double width = 1;
  double height = 2;
  MaterialColor backgroundColor = 3;
  MaterialColor penColor = 4;
  double penStrokeWidth = 5;
}

// configurable on all number fields
enum UnitPlace {
  option (pgde.zero.defaultNotSet) = true;
  noUnitPlace = 0;

  suffix = 1;
  labelSuffix = 2;
}
message NumberInput {
  pgde.units.Show unit = 1;
  UnitPlace unitPlace = 2;
}
message StepperInput {
  pgde.units.Show unit = 1;
  UnitPlace unitPlace = 2;
  uint32 step = 3;
}
message SliderInput {
  pgde.units.Show unit = 1;
  UnitPlace unitPlace = 2;
  uint32 divisions = 3;
}

message RateInput { MaterialIcon icon = 1; }

message EnumInput {
  enum Type {
    radio = 0;
    // extract a new message?
    dropdown = 1;
    segmentedControl = 2;
    // values must be checked from fixed list
    checkbox = 3;
    // values can be others
    chips = 4;
    // support positions
    rank = 5;
  }
}

message Crud {
  bool pager = 1;
  uint32 rows = 2 [ (zero.to).uint32 = 10 ];
  bool list = 3;
  bool create = 4;
  bool edit = 5;
  bool delete = 6;
  bool search = 7;
}

message ListInput {
  Crud dst = 1;
  oneof data {
    // for raw src
    bool rankraw = 2;
    Crud src = 3;
  }
}

message SwitchInput { bool checkbox = 1; }

// type and format are defined by format.Format
message DatetimePickerInput {
  enum DatePickerMode {
    day = 0;
    year = 1;
  }
  DatePickerMode datePickerMode = 1;
  bool editable = 2;
}

message InputDecoration {
  MaterialIcon icon = 1;
  MaterialIcon prefixIcon = 2;
  MaterialIcon suffixIcon = 3;

  enum CounterType {
    byte = 0;
    character = 1;
  }

  /// Optional text to place below the line as a character count.
  ///
  /// Rendered using [counterStyle]. Uses [helperStyle] if [counterStyle] is
  /// null.
  ///
  /// The semantic label can be replaced by providing a [semanticCounterText].
  ///
  /// If null or an empty string and [counter] isn't specified, then nothing
  /// will appear in the counter's location.
  repeated CounterType counter = 4;
}
