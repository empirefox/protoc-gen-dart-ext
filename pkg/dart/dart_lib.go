// DO NOT EDIT. Generated by protoc-gen-dart-ext/tools.

package dart

type Animation struct {
	Library

	_AlwaysStoppedAnimation Qualifier

	_Animatable Qualifier

	_Animation Qualifier

	_AnimationBehavior Qualifier

	_AnimationController Qualifier

	_AnimationEagerListenerMixin Qualifier

	_AnimationLazyListenerMixin Qualifier

	_AnimationLocalListenersMixin Qualifier

	_AnimationLocalStatusListenersMixin Qualifier

	_AnimationMax Qualifier

	_AnimationMean Qualifier

	_AnimationMin Qualifier

	_AnimationStatus Qualifier

	_AnimationStatusListener Qualifier

	_AnimationWithParentMixin Qualifier

	_ColorTween Qualifier

	_CompoundAnimation Qualifier

	_ConstantTween Qualifier

	_Cubic Qualifier

	_Curve Qualifier

	_CurveTween Qualifier

	_CurvedAnimation Qualifier

	_Curves Qualifier

	_ElasticInCurve Qualifier

	_ElasticInOutCurve Qualifier

	_ElasticOutCurve Qualifier

	_FlippedCurve Qualifier

	_FlippedTweenSequence Qualifier

	_IntTween Qualifier

	_Interval Qualifier

	_ProxyAnimation Qualifier

	_RectTween Qualifier

	_ReverseAnimation Qualifier

	_ReverseTween Qualifier

	_SawTooth Qualifier

	_SizeTween Qualifier

	_StepTween Qualifier

	_Threshold Qualifier

	_TickerCanceled Qualifier

	_TickerFuture Qualifier

	_TrainHoppingAnimation Qualifier

	_Tween Qualifier

	_TweenSequence Qualifier

	_TweenSequenceItem Qualifier

	_kAlwaysCompleteAnimation Qualifier

	_kAlwaysDismissedAnimation Qualifier
}

func NewAnimation(im *ImportManager) *Animation {
	return &Animation{
		Library: Library{
			im:         im,
			importPath: "package:flutter/animation.dart",
		},
	}
}

func (m *Animation) AlwaysStoppedAnimation() Qualifier {
	if m._AlwaysStoppedAnimation == "" {
		m._AlwaysStoppedAnimation = m.File().AsDot("AlwaysStoppedAnimation")
	}
	return m._AlwaysStoppedAnimation
}

func (m *Animation) Animatable() Qualifier {
	if m._Animatable == "" {
		m._Animatable = m.File().AsDot("Animatable")
	}
	return m._Animatable
}

func (m *Animation) Animation() Qualifier {
	if m._Animation == "" {
		m._Animation = m.File().AsDot("Animation")
	}
	return m._Animation
}

func (m *Animation) AnimationBehavior() Qualifier {
	if m._AnimationBehavior == "" {
		m._AnimationBehavior = m.File().AsDot("AnimationBehavior")
	}
	return m._AnimationBehavior
}

func (m *Animation) AnimationController() Qualifier {
	if m._AnimationController == "" {
		m._AnimationController = m.File().AsDot("AnimationController")
	}
	return m._AnimationController
}

func (m *Animation) AnimationEagerListenerMixin() Qualifier {
	if m._AnimationEagerListenerMixin == "" {
		m._AnimationEagerListenerMixin = m.File().AsDot("AnimationEagerListenerMixin")
	}
	return m._AnimationEagerListenerMixin
}

func (m *Animation) AnimationLazyListenerMixin() Qualifier {
	if m._AnimationLazyListenerMixin == "" {
		m._AnimationLazyListenerMixin = m.File().AsDot("AnimationLazyListenerMixin")
	}
	return m._AnimationLazyListenerMixin
}

func (m *Animation) AnimationLocalListenersMixin() Qualifier {
	if m._AnimationLocalListenersMixin == "" {
		m._AnimationLocalListenersMixin = m.File().AsDot("AnimationLocalListenersMixin")
	}
	return m._AnimationLocalListenersMixin
}

func (m *Animation) AnimationLocalStatusListenersMixin() Qualifier {
	if m._AnimationLocalStatusListenersMixin == "" {
		m._AnimationLocalStatusListenersMixin = m.File().AsDot("AnimationLocalStatusListenersMixin")
	}
	return m._AnimationLocalStatusListenersMixin
}

func (m *Animation) AnimationMax() Qualifier {
	if m._AnimationMax == "" {
		m._AnimationMax = m.File().AsDot("AnimationMax")
	}
	return m._AnimationMax
}

func (m *Animation) AnimationMean() Qualifier {
	if m._AnimationMean == "" {
		m._AnimationMean = m.File().AsDot("AnimationMean")
	}
	return m._AnimationMean
}

func (m *Animation) AnimationMin() Qualifier {
	if m._AnimationMin == "" {
		m._AnimationMin = m.File().AsDot("AnimationMin")
	}
	return m._AnimationMin
}

func (m *Animation) AnimationStatus() Qualifier {
	if m._AnimationStatus == "" {
		m._AnimationStatus = m.File().AsDot("AnimationStatus")
	}
	return m._AnimationStatus
}

func (m *Animation) AnimationStatusListener() Qualifier {
	if m._AnimationStatusListener == "" {
		m._AnimationStatusListener = m.File().AsDot("AnimationStatusListener")
	}
	return m._AnimationStatusListener
}

func (m *Animation) AnimationWithParentMixin() Qualifier {
	if m._AnimationWithParentMixin == "" {
		m._AnimationWithParentMixin = m.File().AsDot("AnimationWithParentMixin")
	}
	return m._AnimationWithParentMixin
}

func (m *Animation) ColorTween() Qualifier {
	if m._ColorTween == "" {
		m._ColorTween = m.File().AsDot("ColorTween")
	}
	return m._ColorTween
}

func (m *Animation) CompoundAnimation() Qualifier {
	if m._CompoundAnimation == "" {
		m._CompoundAnimation = m.File().AsDot("CompoundAnimation")
	}
	return m._CompoundAnimation
}

func (m *Animation) ConstantTween() Qualifier {
	if m._ConstantTween == "" {
		m._ConstantTween = m.File().AsDot("ConstantTween")
	}
	return m._ConstantTween
}

func (m *Animation) Cubic() Qualifier {
	if m._Cubic == "" {
		m._Cubic = m.File().AsDot("Cubic")
	}
	return m._Cubic
}

func (m *Animation) Curve() Qualifier {
	if m._Curve == "" {
		m._Curve = m.File().AsDot("Curve")
	}
	return m._Curve
}

func (m *Animation) CurveTween() Qualifier {
	if m._CurveTween == "" {
		m._CurveTween = m.File().AsDot("CurveTween")
	}
	return m._CurveTween
}

func (m *Animation) CurvedAnimation() Qualifier {
	if m._CurvedAnimation == "" {
		m._CurvedAnimation = m.File().AsDot("CurvedAnimation")
	}
	return m._CurvedAnimation
}

func (m *Animation) Curves() Qualifier {
	if m._Curves == "" {
		m._Curves = m.File().AsDot("Curves")
	}
	return m._Curves
}

func (m *Animation) ElasticInCurve() Qualifier {
	if m._ElasticInCurve == "" {
		m._ElasticInCurve = m.File().AsDot("ElasticInCurve")
	}
	return m._ElasticInCurve
}

func (m *Animation) ElasticInOutCurve() Qualifier {
	if m._ElasticInOutCurve == "" {
		m._ElasticInOutCurve = m.File().AsDot("ElasticInOutCurve")
	}
	return m._ElasticInOutCurve
}

func (m *Animation) ElasticOutCurve() Qualifier {
	if m._ElasticOutCurve == "" {
		m._ElasticOutCurve = m.File().AsDot("ElasticOutCurve")
	}
	return m._ElasticOutCurve
}

func (m *Animation) FlippedCurve() Qualifier {
	if m._FlippedCurve == "" {
		m._FlippedCurve = m.File().AsDot("FlippedCurve")
	}
	return m._FlippedCurve
}

func (m *Animation) FlippedTweenSequence() Qualifier {
	if m._FlippedTweenSequence == "" {
		m._FlippedTweenSequence = m.File().AsDot("FlippedTweenSequence")
	}
	return m._FlippedTweenSequence
}

func (m *Animation) IntTween() Qualifier {
	if m._IntTween == "" {
		m._IntTween = m.File().AsDot("IntTween")
	}
	return m._IntTween
}

func (m *Animation) Interval() Qualifier {
	if m._Interval == "" {
		m._Interval = m.File().AsDot("Interval")
	}
	return m._Interval
}

func (m *Animation) ProxyAnimation() Qualifier {
	if m._ProxyAnimation == "" {
		m._ProxyAnimation = m.File().AsDot("ProxyAnimation")
	}
	return m._ProxyAnimation
}

func (m *Animation) RectTween() Qualifier {
	if m._RectTween == "" {
		m._RectTween = m.File().AsDot("RectTween")
	}
	return m._RectTween
}

func (m *Animation) ReverseAnimation() Qualifier {
	if m._ReverseAnimation == "" {
		m._ReverseAnimation = m.File().AsDot("ReverseAnimation")
	}
	return m._ReverseAnimation
}

func (m *Animation) ReverseTween() Qualifier {
	if m._ReverseTween == "" {
		m._ReverseTween = m.File().AsDot("ReverseTween")
	}
	return m._ReverseTween
}

func (m *Animation) SawTooth() Qualifier {
	if m._SawTooth == "" {
		m._SawTooth = m.File().AsDot("SawTooth")
	}
	return m._SawTooth
}

func (m *Animation) SizeTween() Qualifier {
	if m._SizeTween == "" {
		m._SizeTween = m.File().AsDot("SizeTween")
	}
	return m._SizeTween
}

func (m *Animation) StepTween() Qualifier {
	if m._StepTween == "" {
		m._StepTween = m.File().AsDot("StepTween")
	}
	return m._StepTween
}

func (m *Animation) Threshold() Qualifier {
	if m._Threshold == "" {
		m._Threshold = m.File().AsDot("Threshold")
	}
	return m._Threshold
}

func (m *Animation) TickerCanceled() Qualifier {
	if m._TickerCanceled == "" {
		m._TickerCanceled = m.File().AsDot("TickerCanceled")
	}
	return m._TickerCanceled
}

func (m *Animation) TickerFuture() Qualifier {
	if m._TickerFuture == "" {
		m._TickerFuture = m.File().AsDot("TickerFuture")
	}
	return m._TickerFuture
}

func (m *Animation) TrainHoppingAnimation() Qualifier {
	if m._TrainHoppingAnimation == "" {
		m._TrainHoppingAnimation = m.File().AsDot("TrainHoppingAnimation")
	}
	return m._TrainHoppingAnimation
}

func (m *Animation) Tween() Qualifier {
	if m._Tween == "" {
		m._Tween = m.File().AsDot("Tween")
	}
	return m._Tween
}

func (m *Animation) TweenSequence() Qualifier {
	if m._TweenSequence == "" {
		m._TweenSequence = m.File().AsDot("TweenSequence")
	}
	return m._TweenSequence
}

func (m *Animation) TweenSequenceItem() Qualifier {
	if m._TweenSequenceItem == "" {
		m._TweenSequenceItem = m.File().AsDot("TweenSequenceItem")
	}
	return m._TweenSequenceItem
}

func (m *Animation) KAlwaysCompleteAnimation() Qualifier {
	if m._kAlwaysCompleteAnimation == "" {
		m._kAlwaysCompleteAnimation = m.File().AsDot("kAlwaysCompleteAnimation")
	}
	return m._kAlwaysCompleteAnimation
}

func (m *Animation) KAlwaysDismissedAnimation() Qualifier {
	if m._kAlwaysDismissedAnimation == "" {
		m._kAlwaysDismissedAnimation = m.File().AsDot("kAlwaysDismissedAnimation")
	}
	return m._kAlwaysDismissedAnimation
}

type Foundation struct {
	Library

	_AbstractNode Qualifier

	_AsyncCallback Qualifier

	_AsyncValueGetter Qualifier

	_AsyncValueSetter Qualifier

	_BindingBase Qualifier

	_BitField Qualifier

	_BytesReceivedCallback Qualifier

	_CachingIterable Qualifier

	_Category Qualifier

	_ChangeNotifier Qualifier

	_ComputeCallback Qualifier

	_ComputePropertyValueCallback Qualifier

	_DebugPrintCallback Qualifier

	_DiagnosticLevel Qualifier

	_DiagnosticPropertiesBuilder Qualifier

	_DiagnosticPropertiesTransformer Qualifier

	_Diagnosticable Qualifier

	_DiagnosticableMixin Qualifier

	_DiagnosticableNode Qualifier

	_DiagnosticableTree Qualifier

	_DiagnosticableTreeMixin Qualifier

	_DiagnosticableTreeNode Qualifier

	_DiagnosticsBlock Qualifier

	_DiagnosticsNode Qualifier

	_DiagnosticsProperty Qualifier

	_DiagnosticsSerializationDelegate Qualifier

	_DiagnosticsStackTrace Qualifier

	_DiagnosticsTreeStyle Qualifier

	_DocumentationIcon Qualifier

	_DoubleProperty Qualifier

	_EnumProperty Qualifier

	_ErrorDescription Qualifier

	_ErrorHint Qualifier

	_ErrorSpacer Qualifier

	_ErrorSummary Qualifier

	_Factory Qualifier

	_FlagProperty Qualifier

	_FlagsSummary Qualifier

	_FlutterError Qualifier

	_FlutterErrorDetails Qualifier

	_FlutterExceptionHandler Qualifier

	_HashedObserverList Qualifier

	_InformationCollector Qualifier

	_IntProperty Qualifier

	_IterableFilter Qualifier

	_IterableProperty Qualifier

	_Key Qualifier

	_LicenseEntry Qualifier

	_LicenseEntryCollector Qualifier

	_LicenseEntryWithLineBreaks Qualifier

	_LicenseParagraph Qualifier

	_LicenseRegistry Qualifier

	_Listenable Qualifier

	_LocalKey Qualifier

	_MessageProperty Qualifier

	_ObjectFlagProperty Qualifier

	_ObserverList Qualifier

	_PercentProperty Qualifier

	_ReadBuffer Qualifier

	_ServiceExtensionCallback Qualifier

	_StringProperty Qualifier

	_Summary Qualifier

	_SynchronousFuture Qualifier

	_TargetPlatform Qualifier

	_TextTreeConfiguration Qualifier

	_TextTreeRenderer Qualifier

	_Unicode Qualifier

	_ValueChanged Qualifier

	_ValueGetter Qualifier

	_ValueKey Qualifier

	_ValueListenable Qualifier

	_ValueNotifier Qualifier

	_ValueSetter Qualifier

	_VoidCallback Qualifier

	_WriteBuffer Qualifier

	_binarySearch Qualifier

	_compute Qualifier

	_consolidateHttpClientResponseBytes Qualifier

	_dashedTextConfiguration Qualifier

	_debugAssertAllFoundationVarsUnset Qualifier

	_debugDefaultTargetPlatformOverride Qualifier

	_debugDoublePrecision Qualifier

	_debugFormatDouble Qualifier

	_debugInstrumentAction Qualifier

	_debugInstrumentationEnabled Qualifier

	_debugPrint Qualifier

	_debugPrintDone Qualifier

	_debugPrintStack Qualifier

	_debugPrintSynchronously Qualifier

	_debugPrintThrottled Qualifier

	_debugWordWrap Qualifier

	_defaultTargetPlatform Qualifier

	_denseTextConfiguration Qualifier

	_describeEnum Qualifier

	_describeIdentity Qualifier

	_errorPropertyTextConfiguration Qualifier

	_errorTextConfiguration Qualifier

	_flatTextConfiguration Qualifier

	_immutable Qualifier

	_kDebugMode Qualifier

	_kIsWeb Qualifier

	_kMaxUnsignedSMI Qualifier

	_kNoDefaultValue Qualifier

	_kProfileMode Qualifier

	_kReleaseMode Qualifier

	_listEquals Qualifier

	_mapEquals Qualifier

	_mustCallSuper Qualifier

	_optionalTypeArgs Qualifier

	_precisionErrorTolerance Qualifier

	_profile Qualifier

	_protected Qualifier

	_required Qualifier

	_setEquals Qualifier

	_shallowTextConfiguration Qualifier

	_shortHash Qualifier

	_singleLineTextConfiguration Qualifier

	_sparseTextConfiguration Qualifier

	_timelineWhitelistArguments Qualifier

	_transitionTextConfiguration Qualifier

	_visibleForTesting Qualifier

	_whitespaceTextConfiguration Qualifier
}

func NewFoundation(im *ImportManager) *Foundation {
	return &Foundation{
		Library: Library{
			im:         im,
			importPath: "package:flutter/foundation.dart",
		},
	}
}

func (m *Foundation) AbstractNode() Qualifier {
	if m._AbstractNode == "" {
		m._AbstractNode = m.File().AsDot("AbstractNode")
	}
	return m._AbstractNode
}

func (m *Foundation) AsyncCallback() Qualifier {
	if m._AsyncCallback == "" {
		m._AsyncCallback = m.File().AsDot("AsyncCallback")
	}
	return m._AsyncCallback
}

func (m *Foundation) AsyncValueGetter() Qualifier {
	if m._AsyncValueGetter == "" {
		m._AsyncValueGetter = m.File().AsDot("AsyncValueGetter")
	}
	return m._AsyncValueGetter
}

func (m *Foundation) AsyncValueSetter() Qualifier {
	if m._AsyncValueSetter == "" {
		m._AsyncValueSetter = m.File().AsDot("AsyncValueSetter")
	}
	return m._AsyncValueSetter
}

func (m *Foundation) BindingBase() Qualifier {
	if m._BindingBase == "" {
		m._BindingBase = m.File().AsDot("BindingBase")
	}
	return m._BindingBase
}

func (m *Foundation) BitField() Qualifier {
	if m._BitField == "" {
		m._BitField = m.File().AsDot("BitField")
	}
	return m._BitField
}

func (m *Foundation) BytesReceivedCallback() Qualifier {
	if m._BytesReceivedCallback == "" {
		m._BytesReceivedCallback = m.File().AsDot("BytesReceivedCallback")
	}
	return m._BytesReceivedCallback
}

func (m *Foundation) CachingIterable() Qualifier {
	if m._CachingIterable == "" {
		m._CachingIterable = m.File().AsDot("CachingIterable")
	}
	return m._CachingIterable
}

func (m *Foundation) Category() Qualifier {
	if m._Category == "" {
		m._Category = m.File().AsDot("Category")
	}
	return m._Category
}

func (m *Foundation) ChangeNotifier() Qualifier {
	if m._ChangeNotifier == "" {
		m._ChangeNotifier = m.File().AsDot("ChangeNotifier")
	}
	return m._ChangeNotifier
}

func (m *Foundation) ComputeCallback() Qualifier {
	if m._ComputeCallback == "" {
		m._ComputeCallback = m.File().AsDot("ComputeCallback")
	}
	return m._ComputeCallback
}

func (m *Foundation) ComputePropertyValueCallback() Qualifier {
	if m._ComputePropertyValueCallback == "" {
		m._ComputePropertyValueCallback = m.File().AsDot("ComputePropertyValueCallback")
	}
	return m._ComputePropertyValueCallback
}

func (m *Foundation) DebugPrintCallback() Qualifier {
	if m._DebugPrintCallback == "" {
		m._DebugPrintCallback = m.File().AsDot("DebugPrintCallback")
	}
	return m._DebugPrintCallback
}

func (m *Foundation) DiagnosticLevel() Qualifier {
	if m._DiagnosticLevel == "" {
		m._DiagnosticLevel = m.File().AsDot("DiagnosticLevel")
	}
	return m._DiagnosticLevel
}

func (m *Foundation) DiagnosticPropertiesBuilder() Qualifier {
	if m._DiagnosticPropertiesBuilder == "" {
		m._DiagnosticPropertiesBuilder = m.File().AsDot("DiagnosticPropertiesBuilder")
	}
	return m._DiagnosticPropertiesBuilder
}

func (m *Foundation) DiagnosticPropertiesTransformer() Qualifier {
	if m._DiagnosticPropertiesTransformer == "" {
		m._DiagnosticPropertiesTransformer = m.File().AsDot("DiagnosticPropertiesTransformer")
	}
	return m._DiagnosticPropertiesTransformer
}

func (m *Foundation) Diagnosticable() Qualifier {
	if m._Diagnosticable == "" {
		m._Diagnosticable = m.File().AsDot("Diagnosticable")
	}
	return m._Diagnosticable
}

func (m *Foundation) DiagnosticableMixin() Qualifier {
	if m._DiagnosticableMixin == "" {
		m._DiagnosticableMixin = m.File().AsDot("DiagnosticableMixin")
	}
	return m._DiagnosticableMixin
}

func (m *Foundation) DiagnosticableNode() Qualifier {
	if m._DiagnosticableNode == "" {
		m._DiagnosticableNode = m.File().AsDot("DiagnosticableNode")
	}
	return m._DiagnosticableNode
}

func (m *Foundation) DiagnosticableTree() Qualifier {
	if m._DiagnosticableTree == "" {
		m._DiagnosticableTree = m.File().AsDot("DiagnosticableTree")
	}
	return m._DiagnosticableTree
}

func (m *Foundation) DiagnosticableTreeMixin() Qualifier {
	if m._DiagnosticableTreeMixin == "" {
		m._DiagnosticableTreeMixin = m.File().AsDot("DiagnosticableTreeMixin")
	}
	return m._DiagnosticableTreeMixin
}

func (m *Foundation) DiagnosticableTreeNode() Qualifier {
	if m._DiagnosticableTreeNode == "" {
		m._DiagnosticableTreeNode = m.File().AsDot("DiagnosticableTreeNode")
	}
	return m._DiagnosticableTreeNode
}

func (m *Foundation) DiagnosticsBlock() Qualifier {
	if m._DiagnosticsBlock == "" {
		m._DiagnosticsBlock = m.File().AsDot("DiagnosticsBlock")
	}
	return m._DiagnosticsBlock
}

func (m *Foundation) DiagnosticsNode() Qualifier {
	if m._DiagnosticsNode == "" {
		m._DiagnosticsNode = m.File().AsDot("DiagnosticsNode")
	}
	return m._DiagnosticsNode
}

func (m *Foundation) DiagnosticsProperty() Qualifier {
	if m._DiagnosticsProperty == "" {
		m._DiagnosticsProperty = m.File().AsDot("DiagnosticsProperty")
	}
	return m._DiagnosticsProperty
}

func (m *Foundation) DiagnosticsSerializationDelegate() Qualifier {
	if m._DiagnosticsSerializationDelegate == "" {
		m._DiagnosticsSerializationDelegate = m.File().AsDot("DiagnosticsSerializationDelegate")
	}
	return m._DiagnosticsSerializationDelegate
}

func (m *Foundation) DiagnosticsStackTrace() Qualifier {
	if m._DiagnosticsStackTrace == "" {
		m._DiagnosticsStackTrace = m.File().AsDot("DiagnosticsStackTrace")
	}
	return m._DiagnosticsStackTrace
}

func (m *Foundation) DiagnosticsTreeStyle() Qualifier {
	if m._DiagnosticsTreeStyle == "" {
		m._DiagnosticsTreeStyle = m.File().AsDot("DiagnosticsTreeStyle")
	}
	return m._DiagnosticsTreeStyle
}

func (m *Foundation) DocumentationIcon() Qualifier {
	if m._DocumentationIcon == "" {
		m._DocumentationIcon = m.File().AsDot("DocumentationIcon")
	}
	return m._DocumentationIcon
}

func (m *Foundation) DoubleProperty() Qualifier {
	if m._DoubleProperty == "" {
		m._DoubleProperty = m.File().AsDot("DoubleProperty")
	}
	return m._DoubleProperty
}

func (m *Foundation) EnumProperty() Qualifier {
	if m._EnumProperty == "" {
		m._EnumProperty = m.File().AsDot("EnumProperty")
	}
	return m._EnumProperty
}

func (m *Foundation) ErrorDescription() Qualifier {
	if m._ErrorDescription == "" {
		m._ErrorDescription = m.File().AsDot("ErrorDescription")
	}
	return m._ErrorDescription
}

func (m *Foundation) ErrorHint() Qualifier {
	if m._ErrorHint == "" {
		m._ErrorHint = m.File().AsDot("ErrorHint")
	}
	return m._ErrorHint
}

func (m *Foundation) ErrorSpacer() Qualifier {
	if m._ErrorSpacer == "" {
		m._ErrorSpacer = m.File().AsDot("ErrorSpacer")
	}
	return m._ErrorSpacer
}

func (m *Foundation) ErrorSummary() Qualifier {
	if m._ErrorSummary == "" {
		m._ErrorSummary = m.File().AsDot("ErrorSummary")
	}
	return m._ErrorSummary
}

func (m *Foundation) Factory() Qualifier {
	if m._Factory == "" {
		m._Factory = m.File().AsDot("Factory")
	}
	return m._Factory
}

func (m *Foundation) FlagProperty() Qualifier {
	if m._FlagProperty == "" {
		m._FlagProperty = m.File().AsDot("FlagProperty")
	}
	return m._FlagProperty
}

func (m *Foundation) FlagsSummary() Qualifier {
	if m._FlagsSummary == "" {
		m._FlagsSummary = m.File().AsDot("FlagsSummary")
	}
	return m._FlagsSummary
}

func (m *Foundation) FlutterError() Qualifier {
	if m._FlutterError == "" {
		m._FlutterError = m.File().AsDot("FlutterError")
	}
	return m._FlutterError
}

func (m *Foundation) FlutterErrorDetails() Qualifier {
	if m._FlutterErrorDetails == "" {
		m._FlutterErrorDetails = m.File().AsDot("FlutterErrorDetails")
	}
	return m._FlutterErrorDetails
}

func (m *Foundation) FlutterExceptionHandler() Qualifier {
	if m._FlutterExceptionHandler == "" {
		m._FlutterExceptionHandler = m.File().AsDot("FlutterExceptionHandler")
	}
	return m._FlutterExceptionHandler
}

func (m *Foundation) HashedObserverList() Qualifier {
	if m._HashedObserverList == "" {
		m._HashedObserverList = m.File().AsDot("HashedObserverList")
	}
	return m._HashedObserverList
}

func (m *Foundation) InformationCollector() Qualifier {
	if m._InformationCollector == "" {
		m._InformationCollector = m.File().AsDot("InformationCollector")
	}
	return m._InformationCollector
}

func (m *Foundation) IntProperty() Qualifier {
	if m._IntProperty == "" {
		m._IntProperty = m.File().AsDot("IntProperty")
	}
	return m._IntProperty
}

func (m *Foundation) IterableFilter() Qualifier {
	if m._IterableFilter == "" {
		m._IterableFilter = m.File().AsDot("IterableFilter")
	}
	return m._IterableFilter
}

func (m *Foundation) IterableProperty() Qualifier {
	if m._IterableProperty == "" {
		m._IterableProperty = m.File().AsDot("IterableProperty")
	}
	return m._IterableProperty
}

func (m *Foundation) Key() Qualifier {
	if m._Key == "" {
		m._Key = m.File().AsDot("Key")
	}
	return m._Key
}

func (m *Foundation) LicenseEntry() Qualifier {
	if m._LicenseEntry == "" {
		m._LicenseEntry = m.File().AsDot("LicenseEntry")
	}
	return m._LicenseEntry
}

func (m *Foundation) LicenseEntryCollector() Qualifier {
	if m._LicenseEntryCollector == "" {
		m._LicenseEntryCollector = m.File().AsDot("LicenseEntryCollector")
	}
	return m._LicenseEntryCollector
}

func (m *Foundation) LicenseEntryWithLineBreaks() Qualifier {
	if m._LicenseEntryWithLineBreaks == "" {
		m._LicenseEntryWithLineBreaks = m.File().AsDot("LicenseEntryWithLineBreaks")
	}
	return m._LicenseEntryWithLineBreaks
}

func (m *Foundation) LicenseParagraph() Qualifier {
	if m._LicenseParagraph == "" {
		m._LicenseParagraph = m.File().AsDot("LicenseParagraph")
	}
	return m._LicenseParagraph
}

func (m *Foundation) LicenseRegistry() Qualifier {
	if m._LicenseRegistry == "" {
		m._LicenseRegistry = m.File().AsDot("LicenseRegistry")
	}
	return m._LicenseRegistry
}

func (m *Foundation) Listenable() Qualifier {
	if m._Listenable == "" {
		m._Listenable = m.File().AsDot("Listenable")
	}
	return m._Listenable
}

func (m *Foundation) LocalKey() Qualifier {
	if m._LocalKey == "" {
		m._LocalKey = m.File().AsDot("LocalKey")
	}
	return m._LocalKey
}

func (m *Foundation) MessageProperty() Qualifier {
	if m._MessageProperty == "" {
		m._MessageProperty = m.File().AsDot("MessageProperty")
	}
	return m._MessageProperty
}

func (m *Foundation) ObjectFlagProperty() Qualifier {
	if m._ObjectFlagProperty == "" {
		m._ObjectFlagProperty = m.File().AsDot("ObjectFlagProperty")
	}
	return m._ObjectFlagProperty
}

func (m *Foundation) ObserverList() Qualifier {
	if m._ObserverList == "" {
		m._ObserverList = m.File().AsDot("ObserverList")
	}
	return m._ObserverList
}

func (m *Foundation) PercentProperty() Qualifier {
	if m._PercentProperty == "" {
		m._PercentProperty = m.File().AsDot("PercentProperty")
	}
	return m._PercentProperty
}

func (m *Foundation) ReadBuffer() Qualifier {
	if m._ReadBuffer == "" {
		m._ReadBuffer = m.File().AsDot("ReadBuffer")
	}
	return m._ReadBuffer
}

func (m *Foundation) ServiceExtensionCallback() Qualifier {
	if m._ServiceExtensionCallback == "" {
		m._ServiceExtensionCallback = m.File().AsDot("ServiceExtensionCallback")
	}
	return m._ServiceExtensionCallback
}

func (m *Foundation) StringProperty() Qualifier {
	if m._StringProperty == "" {
		m._StringProperty = m.File().AsDot("StringProperty")
	}
	return m._StringProperty
}

func (m *Foundation) Summary() Qualifier {
	if m._Summary == "" {
		m._Summary = m.File().AsDot("Summary")
	}
	return m._Summary
}

func (m *Foundation) SynchronousFuture() Qualifier {
	if m._SynchronousFuture == "" {
		m._SynchronousFuture = m.File().AsDot("SynchronousFuture")
	}
	return m._SynchronousFuture
}

func (m *Foundation) TargetPlatform() Qualifier {
	if m._TargetPlatform == "" {
		m._TargetPlatform = m.File().AsDot("TargetPlatform")
	}
	return m._TargetPlatform
}

func (m *Foundation) TextTreeConfiguration() Qualifier {
	if m._TextTreeConfiguration == "" {
		m._TextTreeConfiguration = m.File().AsDot("TextTreeConfiguration")
	}
	return m._TextTreeConfiguration
}

func (m *Foundation) TextTreeRenderer() Qualifier {
	if m._TextTreeRenderer == "" {
		m._TextTreeRenderer = m.File().AsDot("TextTreeRenderer")
	}
	return m._TextTreeRenderer
}

func (m *Foundation) Unicode() Qualifier {
	if m._Unicode == "" {
		m._Unicode = m.File().AsDot("Unicode")
	}
	return m._Unicode
}

func (m *Foundation) ValueChanged() Qualifier {
	if m._ValueChanged == "" {
		m._ValueChanged = m.File().AsDot("ValueChanged")
	}
	return m._ValueChanged
}

func (m *Foundation) ValueGetter() Qualifier {
	if m._ValueGetter == "" {
		m._ValueGetter = m.File().AsDot("ValueGetter")
	}
	return m._ValueGetter
}

func (m *Foundation) ValueKey() Qualifier {
	if m._ValueKey == "" {
		m._ValueKey = m.File().AsDot("ValueKey")
	}
	return m._ValueKey
}

func (m *Foundation) ValueListenable() Qualifier {
	if m._ValueListenable == "" {
		m._ValueListenable = m.File().AsDot("ValueListenable")
	}
	return m._ValueListenable
}

func (m *Foundation) ValueNotifier() Qualifier {
	if m._ValueNotifier == "" {
		m._ValueNotifier = m.File().AsDot("ValueNotifier")
	}
	return m._ValueNotifier
}

func (m *Foundation) ValueSetter() Qualifier {
	if m._ValueSetter == "" {
		m._ValueSetter = m.File().AsDot("ValueSetter")
	}
	return m._ValueSetter
}

func (m *Foundation) VoidCallback() Qualifier {
	if m._VoidCallback == "" {
		m._VoidCallback = m.File().AsDot("VoidCallback")
	}
	return m._VoidCallback
}

func (m *Foundation) WriteBuffer() Qualifier {
	if m._WriteBuffer == "" {
		m._WriteBuffer = m.File().AsDot("WriteBuffer")
	}
	return m._WriteBuffer
}

func (m *Foundation) BinarySearch() Qualifier {
	if m._binarySearch == "" {
		m._binarySearch = m.File().AsDot("binarySearch")
	}
	return m._binarySearch
}

func (m *Foundation) Compute() Qualifier {
	if m._compute == "" {
		m._compute = m.File().AsDot("compute")
	}
	return m._compute
}

func (m *Foundation) ConsolidateHttpClientResponseBytes() Qualifier {
	if m._consolidateHttpClientResponseBytes == "" {
		m._consolidateHttpClientResponseBytes = m.File().AsDot("consolidateHttpClientResponseBytes")
	}
	return m._consolidateHttpClientResponseBytes
}

func (m *Foundation) DashedTextConfiguration() Qualifier {
	if m._dashedTextConfiguration == "" {
		m._dashedTextConfiguration = m.File().AsDot("dashedTextConfiguration")
	}
	return m._dashedTextConfiguration
}

func (m *Foundation) DebugAssertAllFoundationVarsUnset() Qualifier {
	if m._debugAssertAllFoundationVarsUnset == "" {
		m._debugAssertAllFoundationVarsUnset = m.File().AsDot("debugAssertAllFoundationVarsUnset")
	}
	return m._debugAssertAllFoundationVarsUnset
}

func (m *Foundation) DebugDefaultTargetPlatformOverride() Qualifier {
	if m._debugDefaultTargetPlatformOverride == "" {
		m._debugDefaultTargetPlatformOverride = m.File().AsDot("debugDefaultTargetPlatformOverride")
	}
	return m._debugDefaultTargetPlatformOverride
}

func (m *Foundation) DebugDoublePrecision() Qualifier {
	if m._debugDoublePrecision == "" {
		m._debugDoublePrecision = m.File().AsDot("debugDoublePrecision")
	}
	return m._debugDoublePrecision
}

func (m *Foundation) DebugFormatDouble() Qualifier {
	if m._debugFormatDouble == "" {
		m._debugFormatDouble = m.File().AsDot("debugFormatDouble")
	}
	return m._debugFormatDouble
}

func (m *Foundation) DebugInstrumentAction() Qualifier {
	if m._debugInstrumentAction == "" {
		m._debugInstrumentAction = m.File().AsDot("debugInstrumentAction")
	}
	return m._debugInstrumentAction
}

func (m *Foundation) DebugInstrumentationEnabled() Qualifier {
	if m._debugInstrumentationEnabled == "" {
		m._debugInstrumentationEnabled = m.File().AsDot("debugInstrumentationEnabled")
	}
	return m._debugInstrumentationEnabled
}

func (m *Foundation) DebugPrint() Qualifier {
	if m._debugPrint == "" {
		m._debugPrint = m.File().AsDot("debugPrint")
	}
	return m._debugPrint
}

func (m *Foundation) DebugPrintDone() Qualifier {
	if m._debugPrintDone == "" {
		m._debugPrintDone = m.File().AsDot("debugPrintDone")
	}
	return m._debugPrintDone
}

func (m *Foundation) DebugPrintStack() Qualifier {
	if m._debugPrintStack == "" {
		m._debugPrintStack = m.File().AsDot("debugPrintStack")
	}
	return m._debugPrintStack
}

func (m *Foundation) DebugPrintSynchronously() Qualifier {
	if m._debugPrintSynchronously == "" {
		m._debugPrintSynchronously = m.File().AsDot("debugPrintSynchronously")
	}
	return m._debugPrintSynchronously
}

func (m *Foundation) DebugPrintThrottled() Qualifier {
	if m._debugPrintThrottled == "" {
		m._debugPrintThrottled = m.File().AsDot("debugPrintThrottled")
	}
	return m._debugPrintThrottled
}

func (m *Foundation) DebugWordWrap() Qualifier {
	if m._debugWordWrap == "" {
		m._debugWordWrap = m.File().AsDot("debugWordWrap")
	}
	return m._debugWordWrap
}

func (m *Foundation) DefaultTargetPlatform() Qualifier {
	if m._defaultTargetPlatform == "" {
		m._defaultTargetPlatform = m.File().AsDot("defaultTargetPlatform")
	}
	return m._defaultTargetPlatform
}

func (m *Foundation) DenseTextConfiguration() Qualifier {
	if m._denseTextConfiguration == "" {
		m._denseTextConfiguration = m.File().AsDot("denseTextConfiguration")
	}
	return m._denseTextConfiguration
}

func (m *Foundation) DescribeEnum() Qualifier {
	if m._describeEnum == "" {
		m._describeEnum = m.File().AsDot("describeEnum")
	}
	return m._describeEnum
}

func (m *Foundation) DescribeIdentity() Qualifier {
	if m._describeIdentity == "" {
		m._describeIdentity = m.File().AsDot("describeIdentity")
	}
	return m._describeIdentity
}

func (m *Foundation) ErrorPropertyTextConfiguration() Qualifier {
	if m._errorPropertyTextConfiguration == "" {
		m._errorPropertyTextConfiguration = m.File().AsDot("errorPropertyTextConfiguration")
	}
	return m._errorPropertyTextConfiguration
}

func (m *Foundation) ErrorTextConfiguration() Qualifier {
	if m._errorTextConfiguration == "" {
		m._errorTextConfiguration = m.File().AsDot("errorTextConfiguration")
	}
	return m._errorTextConfiguration
}

func (m *Foundation) FlatTextConfiguration() Qualifier {
	if m._flatTextConfiguration == "" {
		m._flatTextConfiguration = m.File().AsDot("flatTextConfiguration")
	}
	return m._flatTextConfiguration
}

func (m *Foundation) Immutable() Qualifier {
	if m._immutable == "" {
		m._immutable = m.File().AsDot("immutable")
	}
	return m._immutable
}

func (m *Foundation) KDebugMode() Qualifier {
	if m._kDebugMode == "" {
		m._kDebugMode = m.File().AsDot("kDebugMode")
	}
	return m._kDebugMode
}

func (m *Foundation) KIsWeb() Qualifier {
	if m._kIsWeb == "" {
		m._kIsWeb = m.File().AsDot("kIsWeb")
	}
	return m._kIsWeb
}

func (m *Foundation) KMaxUnsignedSMI() Qualifier {
	if m._kMaxUnsignedSMI == "" {
		m._kMaxUnsignedSMI = m.File().AsDot("kMaxUnsignedSMI")
	}
	return m._kMaxUnsignedSMI
}

func (m *Foundation) KNoDefaultValue() Qualifier {
	if m._kNoDefaultValue == "" {
		m._kNoDefaultValue = m.File().AsDot("kNoDefaultValue")
	}
	return m._kNoDefaultValue
}

func (m *Foundation) KProfileMode() Qualifier {
	if m._kProfileMode == "" {
		m._kProfileMode = m.File().AsDot("kProfileMode")
	}
	return m._kProfileMode
}

func (m *Foundation) KReleaseMode() Qualifier {
	if m._kReleaseMode == "" {
		m._kReleaseMode = m.File().AsDot("kReleaseMode")
	}
	return m._kReleaseMode
}

func (m *Foundation) ListEquals() Qualifier {
	if m._listEquals == "" {
		m._listEquals = m.File().AsDot("listEquals")
	}
	return m._listEquals
}

func (m *Foundation) MapEquals() Qualifier {
	if m._mapEquals == "" {
		m._mapEquals = m.File().AsDot("mapEquals")
	}
	return m._mapEquals
}

func (m *Foundation) MustCallSuper() Qualifier {
	if m._mustCallSuper == "" {
		m._mustCallSuper = m.File().AsDot("mustCallSuper")
	}
	return m._mustCallSuper
}

func (m *Foundation) OptionalTypeArgs() Qualifier {
	if m._optionalTypeArgs == "" {
		m._optionalTypeArgs = m.File().AsDot("optionalTypeArgs")
	}
	return m._optionalTypeArgs
}

func (m *Foundation) PrecisionErrorTolerance() Qualifier {
	if m._precisionErrorTolerance == "" {
		m._precisionErrorTolerance = m.File().AsDot("precisionErrorTolerance")
	}
	return m._precisionErrorTolerance
}

func (m *Foundation) Profile() Qualifier {
	if m._profile == "" {
		m._profile = m.File().AsDot("profile")
	}
	return m._profile
}

func (m *Foundation) Protected() Qualifier {
	if m._protected == "" {
		m._protected = m.File().AsDot("protected")
	}
	return m._protected
}

func (m *Foundation) Required() Qualifier {
	if m._required == "" {
		m._required = m.File().AsDot("required")
	}
	return m._required
}

func (m *Foundation) SetEquals() Qualifier {
	if m._setEquals == "" {
		m._setEquals = m.File().AsDot("setEquals")
	}
	return m._setEquals
}

func (m *Foundation) ShallowTextConfiguration() Qualifier {
	if m._shallowTextConfiguration == "" {
		m._shallowTextConfiguration = m.File().AsDot("shallowTextConfiguration")
	}
	return m._shallowTextConfiguration
}

func (m *Foundation) ShortHash() Qualifier {
	if m._shortHash == "" {
		m._shortHash = m.File().AsDot("shortHash")
	}
	return m._shortHash
}

func (m *Foundation) SingleLineTextConfiguration() Qualifier {
	if m._singleLineTextConfiguration == "" {
		m._singleLineTextConfiguration = m.File().AsDot("singleLineTextConfiguration")
	}
	return m._singleLineTextConfiguration
}

func (m *Foundation) SparseTextConfiguration() Qualifier {
	if m._sparseTextConfiguration == "" {
		m._sparseTextConfiguration = m.File().AsDot("sparseTextConfiguration")
	}
	return m._sparseTextConfiguration
}

func (m *Foundation) TimelineWhitelistArguments() Qualifier {
	if m._timelineWhitelistArguments == "" {
		m._timelineWhitelistArguments = m.File().AsDot("timelineWhitelistArguments")
	}
	return m._timelineWhitelistArguments
}

func (m *Foundation) TransitionTextConfiguration() Qualifier {
	if m._transitionTextConfiguration == "" {
		m._transitionTextConfiguration = m.File().AsDot("transitionTextConfiguration")
	}
	return m._transitionTextConfiguration
}

func (m *Foundation) VisibleForTesting() Qualifier {
	if m._visibleForTesting == "" {
		m._visibleForTesting = m.File().AsDot("visibleForTesting")
	}
	return m._visibleForTesting
}

func (m *Foundation) WhitespaceTextConfiguration() Qualifier {
	if m._whitespaceTextConfiguration == "" {
		m._whitespaceTextConfiguration = m.File().AsDot("whitespaceTextConfiguration")
	}
	return m._whitespaceTextConfiguration
}

type Material struct {
	Library

	_AboutDialog Qualifier

	_AboutListTile Qualifier

	_AbsorbPointer Qualifier

	_Accumulator Qualifier

	_Action Qualifier

	_ActionChip Qualifier

	_ActionDispatcher Qualifier

	_ActionFactory Qualifier

	_Actions Qualifier

	_ActivateAction Qualifier

	_AlertDialog Qualifier

	_Align Qualifier

	_AlignTransition Qualifier

	_Alignment Qualifier

	_AlignmentDirectional Qualifier

	_AlignmentGeometry Qualifier

	_AlignmentGeometryTween Qualifier

	_AlignmentTween Qualifier

	_AlwaysScrollableScrollPhysics Qualifier

	_AlwaysStoppedAnimation Qualifier

	_AndroidView Qualifier

	_Animatable Qualifier

	_AnimatedAlign Qualifier

	_AnimatedBuilder Qualifier

	_AnimatedContainer Qualifier

	_AnimatedCrossFade Qualifier

	_AnimatedCrossFadeBuilder Qualifier

	_AnimatedDefaultTextStyle Qualifier

	_AnimatedIcon Qualifier

	_AnimatedIconData Qualifier

	_AnimatedIcons Qualifier

	_AnimatedList Qualifier

	_AnimatedListItemBuilder Qualifier

	_AnimatedListRemovedItemBuilder Qualifier

	_AnimatedListState Qualifier

	_AnimatedModalBarrier Qualifier

	_AnimatedOpacity Qualifier

	_AnimatedPadding Qualifier

	_AnimatedPhysicalModel Qualifier

	_AnimatedPositioned Qualifier

	_AnimatedPositionedDirectional Qualifier

	_AnimatedSize Qualifier

	_AnimatedSwitcher Qualifier

	_AnimatedSwitcherLayoutBuilder Qualifier

	_AnimatedSwitcherTransitionBuilder Qualifier

	_AnimatedTheme Qualifier

	_AnimatedWidget Qualifier

	_AnimatedWidgetBaseState Qualifier

	_Animation Qualifier

	_AnimationBehavior Qualifier

	_AnimationController Qualifier

	_AnimationEagerListenerMixin Qualifier

	_AnimationLazyListenerMixin Qualifier

	_AnimationLocalListenersMixin Qualifier

	_AnimationLocalStatusListenersMixin Qualifier

	_AnimationMax Qualifier

	_AnimationMean Qualifier

	_AnimationMin Qualifier

	_AnimationStatus Qualifier

	_AnimationStatusListener Qualifier

	_AnimationWithParentMixin Qualifier

	_AnnotatedRegion Qualifier

	_AppBar Qualifier

	_AppBarTheme Qualifier

	_AppLifecycleState Qualifier

	_AspectRatio Qualifier

	_AssetBundleImageKey Qualifier

	_AssetBundleImageProvider Qualifier

	_AssetImage Qualifier

	_AsyncSnapshot Qualifier

	_AsyncWidgetBuilder Qualifier

	_AutomaticKeepAlive Qualifier

	_AutomaticKeepAliveClientMixin Qualifier

	_AutomaticNotchedShape Qualifier

	_Axis Qualifier

	_AxisDirection Qualifier

	_BackButton Qualifier

	_BackButtonIcon Qualifier

	_BackdropFilter Qualifier

	_BallisticScrollActivity Qualifier

	_Banner Qualifier

	_BannerLocation Qualifier

	_BannerPainter Qualifier

	_BaseSliderTrackShape Qualifier

	_Baseline Qualifier

	_BeveledRectangleBorder Qualifier

	_BlendMode Qualifier

	_BlockSemantics Qualifier

	_BlurStyle Qualifier

	_Border Qualifier

	_BorderDirectional Qualifier

	_BorderRadius Qualifier

	_BorderRadiusDirectional Qualifier

	_BorderRadiusGeometry Qualifier

	_BorderRadiusTween Qualifier

	_BorderSide Qualifier

	_BorderStyle Qualifier

	_BorderTween Qualifier

	_BottomAppBar Qualifier

	_BottomAppBarTheme Qualifier

	_BottomNavigationBar Qualifier

	_BottomNavigationBarItem Qualifier

	_BottomNavigationBarType Qualifier

	_BottomSheet Qualifier

	_BottomSheetThemeData Qualifier

	_BouncingScrollPhysics Qualifier

	_BouncingScrollSimulation Qualifier

	_BoxBorder Qualifier

	_BoxConstraints Qualifier

	_BoxConstraintsTween Qualifier

	_BoxDecoration Qualifier

	_BoxFit Qualifier

	_BoxPainter Qualifier

	_BoxScrollView Qualifier

	_BoxShadow Qualifier

	_BoxShape Qualifier

	_Brightness Qualifier

	_BuildContext Qualifier

	_BuildOwner Qualifier

	_Builder Qualifier

	_ButtonBar Qualifier

	_ButtonBarLayoutBehavior Qualifier

	_ButtonBarTheme Qualifier

	_ButtonBarThemeData Qualifier

	_ButtonTextTheme Qualifier

	_ButtonTheme Qualifier

	_ButtonThemeData Qualifier

	_CallbackAction Qualifier

	_Canvas Qualifier

	_Card Qualifier

	_CardTheme Qualifier

	_Center Qualifier

	_ChangeNotifier Qualifier

	_Checkbox Qualifier

	_CheckboxListTile Qualifier

	_CheckedModeBanner Qualifier

	_CheckedPopupMenuItem Qualifier

	_CheckmarkableChipAttributes Qualifier

	_ChildIndexGetter Qualifier

	_Chip Qualifier

	_ChipAttributes Qualifier

	_ChipTheme Qualifier

	_ChipThemeData Qualifier

	_ChoiceChip Qualifier

	_CircleAvatar Qualifier

	_CircleBorder Qualifier

	_CircularNotchedRectangle Qualifier

	_CircularProgressIndicator Qualifier

	_ClampingScrollPhysics Qualifier

	_ClampingScrollSimulation Qualifier

	_Clip Qualifier

	_ClipContext Qualifier

	_ClipOval Qualifier

	_ClipPath Qualifier

	_ClipRRect Qualifier

	_ClipRect Qualifier

	_CloseButton Qualifier

	_CollapseMode Qualifier

	_Color Qualifier

	_ColorFilter Qualifier

	_ColorFiltered Qualifier

	_ColorProperty Qualifier

	_ColorScheme Qualifier

	_ColorSwatch Qualifier

	_ColorTween Qualifier

	_Colors Qualifier

	_Column Qualifier

	_ComponentElement Qualifier

	_CompositedTransformFollower Qualifier

	_CompositedTransformTarget Qualifier

	_CompoundAnimation Qualifier

	_ConfirmDismissCallback Qualifier

	_ConnectionState Qualifier

	_ConstantTween Qualifier

	_ConstrainedBox Qualifier

	_ConstrainedLayoutBuilder Qualifier

	_Container Qualifier

	_ContinuousRectangleBorder Qualifier

	_ControlsWidgetBuilder Qualifier

	_CreatePlatformViewCallback Qualifier

	_CreateRectTween Qualifier

	_CrossAxisAlignment Qualifier

	_CrossFadeState Qualifier

	_Cubic Qualifier

	_CupertinoPageTransitionsBuilder Qualifier

	_Curve Qualifier

	_CurveTween Qualifier

	_CurvedAnimation Qualifier

	_Curves Qualifier

	_CustomClipper Qualifier

	_CustomMultiChildLayout Qualifier

	_CustomPaint Qualifier

	_CustomPainter Qualifier

	_CustomPainterSemantics Qualifier

	_CustomScrollView Qualifier

	_CustomSingleChildLayout Qualifier

	_DataCell Qualifier

	_DataColumn Qualifier

	_DataColumnSortCallback Qualifier

	_DataRow Qualifier

	_DataTable Qualifier

	_DataTableSource Qualifier

	_DatePickerMode Qualifier

	_DayPeriod Qualifier

	_DayPicker Qualifier

	_DebugCreator Qualifier

	_DecoderCallback Qualifier

	_DecoratedBox Qualifier

	_DecoratedBoxTransition Qualifier

	_Decoration Qualifier

	_DecorationImage Qualifier

	_DecorationImagePainter Qualifier

	_DecorationPosition Qualifier

	_DecorationTween Qualifier

	_DefaultAssetBundle Qualifier

	_DefaultFocusTraversal Qualifier

	_DefaultMaterialLocalizations Qualifier

	_DefaultShaderWarmUp Qualifier

	_DefaultTabController Qualifier

	_DefaultTextStyle Qualifier

	_DefaultTextStyleTransition Qualifier

	_DefaultWidgetsLocalizations Qualifier

	_DeletableChipAttributes Qualifier

	_DiagnosticLevel Qualifier

	_DiagnosticsNode Qualifier

	_Dialog Qualifier

	_DialogTheme Qualifier

	_DirectionalFocusAction Qualifier

	_DirectionalFocusIntent Qualifier

	_DirectionalFocusTraversalPolicyMixin Qualifier

	_Directionality Qualifier

	_DisabledChipAttributes Qualifier

	_DismissDirection Qualifier

	_DismissDirectionCallback Qualifier

	_Dismissible Qualifier

	_Divider Qualifier

	_DividerTheme Qualifier

	_DividerThemeData Qualifier

	_DoNothingAction Qualifier

	_DragAnchor Qualifier

	_DragDownDetails Qualifier

	_DragEndCallback Qualifier

	_DragEndDetails Qualifier

	_DragScrollActivity Qualifier

	_DragSelectionUpdateCallback Qualifier

	_DragStartDetails Qualifier

	_DragTarget Qualifier

	_DragTargetAccept Qualifier

	_DragTargetBuilder Qualifier

	_DragTargetLeave Qualifier

	_DragTargetWillAccept Qualifier

	_DragUpdateDetails Qualifier

	_Draggable Qualifier

	_DraggableCanceledCallback Qualifier

	_DraggableDetails Qualifier

	_DraggableScrollableActuator Qualifier

	_DraggableScrollableNotification Qualifier

	_DraggableScrollableSheet Qualifier

	_Drawer Qualifier

	_DrawerAlignment Qualifier

	_DrawerCallback Qualifier

	_DrawerController Qualifier

	_DrawerControllerState Qualifier

	_DrawerHeader Qualifier

	_DrivenScrollActivity Qualifier

	_DropdownButton Qualifier

	_DropdownButtonBuilder Qualifier

	_DropdownButtonFormField Qualifier

	_DropdownButtonHideUnderline Qualifier

	_DropdownMenuItem Qualifier

	_EdgeInsets Qualifier

	_EdgeInsetsDirectional Qualifier

	_EdgeInsetsGeometry Qualifier

	_EdgeInsetsGeometryTween Qualifier

	_EdgeInsetsTween Qualifier

	_EditableText Qualifier

	_EditableTextState Qualifier

	_ElasticInCurve Qualifier

	_ElasticInOutCurve Qualifier

	_ElasticOutCurve Qualifier

	_Element Qualifier

	_ElementVisitor Qualifier

	_ErrorDescription Qualifier

	_ErrorHint Qualifier

	_ErrorSummary Qualifier

	_ErrorWidget Qualifier

	_ErrorWidgetBuilder Qualifier

	_ExactAssetImage Qualifier

	_ExcludeSemantics Qualifier

	_ExpandIcon Qualifier

	_Expanded Qualifier

	_ExpansionPanel Qualifier

	_ExpansionPanelCallback Qualifier

	_ExpansionPanelHeaderBuilder Qualifier

	_ExpansionPanelList Qualifier

	_ExpansionPanelRadio Qualifier

	_ExpansionTile Qualifier

	_FadeInImage Qualifier

	_FadeTransition Qualifier

	_FadeUpwardsPageTransitionsBuilder Qualifier

	_Feedback Qualifier

	_FileImage Qualifier

	_FilterChip Qualifier

	_FilterQuality Qualifier

	_FittedBox Qualifier

	_FittedSizes Qualifier

	_FixedColumnWidth Qualifier

	_FixedExtentMetrics Qualifier

	_FixedExtentScrollController Qualifier

	_FixedExtentScrollPhysics Qualifier

	_FixedScrollMetrics Qualifier

	_FlatButton Qualifier

	_Flex Qualifier

	_FlexColumnWidth Qualifier

	_FlexFit Qualifier

	_Flexible Qualifier

	_FlexibleSpaceBar Qualifier

	_FlexibleSpaceBarSettings Qualifier

	_FlippedCurve Qualifier

	_FlippedTweenSequence Qualifier

	_FloatingActionButton Qualifier

	_FloatingActionButtonAnimator Qualifier

	_FloatingActionButtonLocation Qualifier

	_FloatingActionButtonThemeData Qualifier

	_Flow Qualifier

	_FlowDelegate Qualifier

	_FlowPaintingContext Qualifier

	_FlutterError Qualifier

	_FlutterErrorDetails Qualifier

	_FlutterLogo Qualifier

	_FlutterLogoDecoration Qualifier

	_FlutterLogoStyle Qualifier

	_Focus Qualifier

	_FocusAttachment Qualifier

	_FocusHighlightMode Qualifier

	_FocusHighlightStrategy Qualifier

	_FocusManager Qualifier

	_FocusNode Qualifier

	_FocusOnKeyCallback Qualifier

	_FocusScope Qualifier

	_FocusScopeNode Qualifier

	_FocusTraversalPolicy Qualifier

	_FontStyle Qualifier

	_FontWeight Qualifier

	_ForcePressDetails Qualifier

	_Form Qualifier

	_FormField Qualifier

	_FormFieldBuilder Qualifier

	_FormFieldSetter Qualifier

	_FormFieldState Qualifier

	_FormFieldValidator Qualifier

	_FormState Qualifier

	_FractionColumnWidth Qualifier

	_FractionalOffset Qualifier

	_FractionalOffsetTween Qualifier

	_FractionalTranslation Qualifier

	_FractionallySizedBox Qualifier

	_FutureBuilder Qualifier

	_GenerateAppTitle Qualifier

	_GestureDetector Qualifier

	_GestureDragCancelCallback Qualifier

	_GestureDragDownCallback Qualifier

	_GestureDragEndCallback Qualifier

	_GestureDragStartCallback Qualifier

	_GestureDragUpdateCallback Qualifier

	_GestureForcePressEndCallback Qualifier

	_GestureForcePressPeakCallback Qualifier

	_GestureForcePressStartCallback Qualifier

	_GestureForcePressUpdateCallback Qualifier

	_GestureLongPressCallback Qualifier

	_GestureLongPressEndCallback Qualifier

	_GestureLongPressMoveUpdateCallback Qualifier

	_GestureLongPressStartCallback Qualifier

	_GestureLongPressUpCallback Qualifier

	_GestureRecognizerFactory Qualifier

	_GestureRecognizerFactoryConstructor Qualifier

	_GestureRecognizerFactoryInitializer Qualifier

	_GestureRecognizerFactoryWithHandlers Qualifier

	_GestureScaleEndCallback Qualifier

	_GestureScaleStartCallback Qualifier

	_GestureScaleUpdateCallback Qualifier

	_GestureTapCallback Qualifier

	_GestureTapCancelCallback Qualifier

	_GestureTapDownCallback Qualifier

	_GestureTapUpCallback Qualifier

	_GlobalKey Qualifier

	_GlobalObjectKey Qualifier

	_GlowingOverscrollIndicator Qualifier

	_Gradient Qualifier

	_GradientRotation Qualifier

	_GradientTransform Qualifier

	_GridPaper Qualifier

	_GridTile Qualifier

	_GridTileBar Qualifier

	_GridView Qualifier

	_GrowthDirection Qualifier

	_HSLColor Qualifier

	_HSVColor Qualifier

	_Hero Qualifier

	_HeroController Qualifier

	_HeroFlightDirection Qualifier

	_HeroFlightShuttleBuilder Qualifier

	_HeroPlaceholderBuilder Qualifier

	_HitTestBehavior Qualifier

	_HoldScrollActivity Qualifier

	_HourFormat Qualifier

	_HtmlElementView Qualifier

	_HttpClientProvider Qualifier

	_Icon Qualifier

	_IconButton Qualifier

	_IconData Qualifier

	_IconDataProperty Qualifier

	_IconTheme Qualifier

	_IconThemeData Qualifier

	_Icons Qualifier

	_IdleScrollActivity Qualifier

	_IgnorePointer Qualifier

	_Image Qualifier

	_ImageCache Qualifier

	_ImageChunkEvent Qualifier

	_ImageChunkListener Qualifier

	_ImageConfiguration Qualifier

	_ImageErrorListener Qualifier

	_ImageFrameBuilder Qualifier

	_ImageIcon Qualifier

	_ImageInfo Qualifier

	_ImageListener Qualifier

	_ImageLoadingBuilder Qualifier

	_ImageProvider Qualifier

	_ImageRepeat Qualifier

	_ImageShader Qualifier

	_ImageStream Qualifier

	_ImageStreamCompleter Qualifier

	_ImageStreamListener Qualifier

	_ImplicitlyAnimatedWidget Qualifier

	_ImplicitlyAnimatedWidgetState Qualifier

	_IndexedSemantics Qualifier

	_IndexedStack Qualifier

	_IndexedWidgetBuilder Qualifier

	_InheritedElement Qualifier

	_InheritedModel Qualifier

	_InheritedModelElement Qualifier

	_InheritedNotifier Qualifier

	_InheritedTheme Qualifier

	_InheritedWidget Qualifier

	_Ink Qualifier

	_InkDecoration Qualifier

	_InkFeature Qualifier

	_InkHighlight Qualifier

	_InkResponse Qualifier

	_InkRipple Qualifier

	_InkSplash Qualifier

	_InkWell Qualifier

	_InlineSpan Qualifier

	_InlineSpanSemanticsInformation Qualifier

	_InlineSpanVisitor Qualifier

	_InputBorder Qualifier

	_InputChip Qualifier

	_InputCounterWidgetBuilder Qualifier

	_InputDecoration Qualifier

	_InputDecorationTheme Qualifier

	_InputDecorator Qualifier

	_InspectorSelectButtonBuilder Qualifier

	_InspectorSelection Qualifier

	_InspectorSelectionChangedCallback Qualifier

	_IntTween Qualifier

	_Intent Qualifier

	_InteractiveInkFeature Qualifier

	_InteractiveInkFeatureFactory Qualifier

	_Interval Qualifier

	_IntrinsicColumnWidth Qualifier

	_IntrinsicHeight Qualifier

	_IntrinsicWidth Qualifier

	_KeepAlive Qualifier

	_KeepAliveHandle Qualifier

	_KeepAliveNotification Qualifier

	_Key Qualifier

	_KeySet Qualifier

	_KeyedSubtree Qualifier

	_LabeledGlobalKey Qualifier

	_LayerLink Qualifier

	_LayoutBuilder Qualifier

	_LayoutChangedNotification Qualifier

	_LayoutId Qualifier

	_LayoutWidgetBuilder Qualifier

	_LeafRenderObjectElement Qualifier

	_LeafRenderObjectWidget Qualifier

	_LicensePage Qualifier

	_LimitedBox Qualifier

	_LinearGradient Qualifier

	_LinearProgressIndicator Qualifier

	_ListBody Qualifier

	_ListTile Qualifier

	_ListTileControlAffinity Qualifier

	_ListTileStyle Qualifier

	_ListTileTheme Qualifier

	_ListView Qualifier

	_ListWheelChildBuilderDelegate Qualifier

	_ListWheelChildDelegate Qualifier

	_ListWheelChildListDelegate Qualifier

	_ListWheelChildLoopingListDelegate Qualifier

	_ListWheelElement Qualifier

	_ListWheelScrollView Qualifier

	_ListWheelViewport Qualifier

	_Listenable Qualifier

	_Listener Qualifier

	_LocalHistoryEntry Qualifier

	_LocalHistoryRoute Qualifier

	_LocalKey Qualifier

	_Locale Qualifier

	_LocaleListResolutionCallback Qualifier

	_LocaleResolutionCallback Qualifier

	_Localizations Qualifier

	_LocalizationsDelegate Qualifier

	_LogicalKeySet Qualifier

	_LongPressDraggable Qualifier

	_LongPressEndDetails Qualifier

	_LongPressMoveUpdateDetails Qualifier

	_LongPressStartDetails Qualifier

	_MainAxisAlignment Qualifier

	_MainAxisSize Qualifier

	_MaskFilter Qualifier

	_Material Qualifier

	_MaterialAccentColor Qualifier

	_MaterialApp Qualifier

	_MaterialBanner Qualifier

	_MaterialBannerTheme Qualifier

	_MaterialBannerThemeData Qualifier

	_MaterialBasedCupertinoThemeData Qualifier

	_MaterialButton Qualifier

	_MaterialButtonWithIconMixin Qualifier

	_MaterialColor Qualifier

	_MaterialGap Qualifier

	_MaterialInkController Qualifier

	_MaterialLocalizations Qualifier

	_MaterialPageRoute Qualifier

	_MaterialPointArcTween Qualifier

	_MaterialPropertyResolver Qualifier

	_MaterialRectArcTween Qualifier

	_MaterialRectCenterArcTween Qualifier

	_MaterialSlice Qualifier

	_MaterialState Qualifier

	_MaterialStateColor Qualifier

	_MaterialStateProperty Qualifier

	_MaterialTapTargetSize Qualifier

	_MaterialType Qualifier

	_Matrix4 Qualifier

	_Matrix4Tween Qualifier

	_MatrixUtils Qualifier

	_MaxColumnWidth Qualifier

	_MediaQuery Qualifier

	_MediaQueryData Qualifier

	_MemoryImage Qualifier

	_MergeSemantics Qualifier

	_MergeableMaterial Qualifier

	_MergeableMaterialItem Qualifier

	_MetaData Qualifier

	_MinColumnWidth Qualifier

	_ModalBarrier Qualifier

	_ModalRoute Qualifier

	_MonthPicker Qualifier

	_MouseRegion Qualifier

	_MultiChildLayoutDelegate Qualifier

	_MultiChildRenderObjectElement Qualifier

	_MultiChildRenderObjectWidget Qualifier

	_MultiFrameImageStreamCompleter Qualifier

	_NavigationToolbar Qualifier

	_Navigator Qualifier

	_NavigatorObserver Qualifier

	_NavigatorState Qualifier

	_NestedScrollView Qualifier

	_NestedScrollViewHeaderSliversBuilder Qualifier

	_NestedScrollViewViewport Qualifier

	_NetworkImage Qualifier

	_NetworkImageLoadException Qualifier

	_NeverScrollableScrollPhysics Qualifier

	_NextFocusAction Qualifier

	_NotchedShape Qualifier

	_Notification Qualifier

	_NotificationListener Qualifier

	_NotificationListenerCallback Qualifier

	_ObjectKey Qualifier

	_Offset Qualifier

	_Offstage Qualifier

	_OnInvokeCallback Qualifier

	_OneFrameImageStreamCompleter Qualifier

	_Opacity Qualifier

	_OpenUpwardsPageTransitionsBuilder Qualifier

	_Orientation Qualifier

	_OrientationBuilder Qualifier

	_OrientationWidgetBuilder Qualifier

	_OutlineButton Qualifier

	_OutlineInputBorder Qualifier

	_Overflow Qualifier

	_OverflowBox Qualifier

	_Overlay Qualifier

	_OverlayEntry Qualifier

	_OverlayRoute Qualifier

	_OverlayState Qualifier

	_OverscrollIndicatorNotification Qualifier

	_OverscrollNotification Qualifier

	_Padding Qualifier

	_PaddleRangeSliderValueIndicatorShape Qualifier

	_PaddleSliderValueIndicatorShape Qualifier

	_PageController Qualifier

	_PageMetrics Qualifier

	_PageRoute Qualifier

	_PageRouteBuilder Qualifier

	_PageRouteFactory Qualifier

	_PageScrollPhysics Qualifier

	_PageStorage Qualifier

	_PageStorageBucket Qualifier

	_PageStorageKey Qualifier

	_PageTransitionsBuilder Qualifier

	_PageTransitionsTheme Qualifier

	_PageView Qualifier

	_PaginatedDataTable Qualifier

	_PaginatedDataTableState Qualifier

	_Paint Qualifier

	_PaintingBinding Qualifier

	_PaintingContext Qualifier

	_PaintingStyle Qualifier

	_ParentDataElement Qualifier

	_ParentDataWidget Qualifier

	_Path Qualifier

	_PathFillType Qualifier

	_PathOperation Qualifier

	_PerformanceOverlay Qualifier

	_PersistentBottomSheetController Qualifier

	_PhysicalModel Qualifier

	_PhysicalShape Qualifier

	_Placeholder Qualifier

	_PlaceholderAlignment Qualifier

	_PlaceholderDimensions Qualifier

	_PlaceholderSpan Qualifier

	_PlatformViewCreationParams Qualifier

	_PlatformViewLink Qualifier

	_PlatformViewSurface Qualifier

	_PlatformViewSurfaceFactory Qualifier

	_PointerCancelEvent Qualifier

	_PointerCancelEventListener Qualifier

	_PointerDownEvent Qualifier

	_PointerDownEventListener Qualifier

	_PointerEvent Qualifier

	_PointerMoveEvent Qualifier

	_PointerMoveEventListener Qualifier

	_PointerUpEvent Qualifier

	_PointerUpEventListener Qualifier

	_PopupMenuButton Qualifier

	_PopupMenuCanceled Qualifier

	_PopupMenuDivider Qualifier

	_PopupMenuEntry Qualifier

	_PopupMenuItem Qualifier

	_PopupMenuItemBuilder Qualifier

	_PopupMenuItemSelected Qualifier

	_PopupMenuItemState Qualifier

	_PopupMenuTheme Qualifier

	_PopupMenuThemeData Qualifier

	_PopupRoute Qualifier

	_Positioned Qualifier

	_PositionedDirectional Qualifier

	_PositionedTransition Qualifier

	_PreferredSize Qualifier

	_PreferredSizeWidget Qualifier

	_PreviousFocusAction Qualifier

	_PrimaryScrollController Qualifier

	_ProgressIndicator Qualifier

	_ProxyAnimation Qualifier

	_ProxyElement Qualifier

	_ProxyWidget Qualifier

	_RRect Qualifier

	_RSTransform Qualifier

	_RadialGradient Qualifier

	_Radio Qualifier

	_RadioListTile Qualifier

	_Radius Qualifier

	_RaisedButton Qualifier

	_RangeLabels Qualifier

	_RangeSemanticFormatterCallback Qualifier

	_RangeSlider Qualifier

	_RangeSliderThumbShape Qualifier

	_RangeSliderTickMarkShape Qualifier

	_RangeSliderTrackShape Qualifier

	_RangeSliderValueIndicatorShape Qualifier

	_RangeThumbSelector Qualifier

	_RangeValues Qualifier

	_RawChip Qualifier

	_RawGestureDetector Qualifier

	_RawGestureDetectorState Qualifier

	_RawImage Qualifier

	_RawKeyEvent Qualifier

	_RawKeyboardListener Qualifier

	_RawMaterialButton Qualifier

	_ReadingOrderTraversalPolicy Qualifier

	_RebuildDirtyWidgetCallback Qualifier

	_Rect Qualifier

	_RectCallback Qualifier

	_RectTween Qualifier

	_RectangularRangeSliderTrackShape Qualifier

	_RectangularSliderTrackShape Qualifier

	_RefreshCallback Qualifier

	_RefreshIndicator Qualifier

	_RefreshIndicatorState Qualifier

	_RefreshProgressIndicator Qualifier

	_RelativePositionedTransition Qualifier

	_RelativeRect Qualifier

	_RelativeRectTween Qualifier

	_RenderBox Qualifier

	_RenderComparison Qualifier

	_RenderConstrainedLayoutBuilder Qualifier

	_RenderNestedScrollViewViewport Qualifier

	_RenderObject Qualifier

	_RenderObjectElement Qualifier

	_RenderObjectToWidgetAdapter Qualifier

	_RenderObjectToWidgetElement Qualifier

	_RenderObjectWidget Qualifier

	_RenderSemanticsGestureHandler Qualifier

	_RenderSliverOverlapAbsorber Qualifier

	_RenderSliverOverlapInjector Qualifier

	_RenderToggleable Qualifier

	_ReorderCallback Qualifier

	_ReorderableListView Qualifier

	_RepaintBoundary Qualifier

	_RequestFocusAction Qualifier

	_ResizeImage Qualifier

	_ReverseAnimation Qualifier

	_ReverseTween Qualifier

	_RichText Qualifier

	_RootRenderObjectElement Qualifier

	_RotatedBox Qualifier

	_RotationTransition Qualifier

	_RoundRangeSliderThumbShape Qualifier

	_RoundRangeSliderTickMarkShape Qualifier

	_RoundSliderOverlayShape Qualifier

	_RoundSliderThumbShape Qualifier

	_RoundSliderTickMarkShape Qualifier

	_RoundedRectRangeSliderTrackShape Qualifier

	_RoundedRectSliderTrackShape Qualifier

	_RoundedRectangleBorder Qualifier

	_Route Qualifier

	_RouteAware Qualifier

	_RouteFactory Qualifier

	_RouteObserver Qualifier

	_RoutePageBuilder Qualifier

	_RoutePopDisposition Qualifier

	_RoutePredicate Qualifier

	_RouteSettings Qualifier

	_RouteTransitionsBuilder Qualifier

	_Row Qualifier

	_SafeArea Qualifier

	_SawTooth Qualifier

	_Scaffold Qualifier

	_ScaffoldFeatureController Qualifier

	_ScaffoldGeometry Qualifier

	_ScaffoldPrelayoutGeometry Qualifier

	_ScaffoldState Qualifier

	_ScaleEndDetails Qualifier

	_ScaleStartDetails Qualifier

	_ScaleTransition Qualifier

	_ScaleUpdateDetails Qualifier

	_ScriptCategory Qualifier

	_ScrollActivity Qualifier

	_ScrollActivityDelegate Qualifier

	_ScrollBehavior Qualifier

	_ScrollConfiguration Qualifier

	_ScrollContext Qualifier

	_ScrollController Qualifier

	_ScrollDragController Qualifier

	_ScrollEndNotification Qualifier

	_ScrollHoldController Qualifier

	_ScrollMetrics Qualifier

	_ScrollNotification Qualifier

	_ScrollNotificationPredicate Qualifier

	_ScrollPhysics Qualifier

	_ScrollPosition Qualifier

	_ScrollPositionWithSingleContext Qualifier

	_ScrollSpringSimulation Qualifier

	_ScrollStartNotification Qualifier

	_ScrollUpdateNotification Qualifier

	_ScrollView Qualifier

	_Scrollable Qualifier

	_ScrollableState Qualifier

	_ScrollableWidgetBuilder Qualifier

	_Scrollbar Qualifier

	_ScrollbarPainter Qualifier

	_SearchDelegate Qualifier

	_SelectAction Qualifier

	_SelectableChipAttributes Qualifier

	_SelectableDayPredicate Qualifier

	_SelectableText Qualifier

	_SelectionChangedCallback Qualifier

	_SelectionChangedCause Qualifier

	_SemanticFormatterCallback Qualifier

	_SemanticIndexCallback Qualifier

	_Semantics Qualifier

	_SemanticsBuilderCallback Qualifier

	_SemanticsDebugger Qualifier

	_SemanticsGestureDelegate Qualifier

	_Shader Qualifier

	_ShaderCallback Qualifier

	_ShaderMask Qualifier

	_ShaderWarmUp Qualifier

	_Shadow Qualifier

	_ShapeBorder Qualifier

	_ShapeBorderClipper Qualifier

	_ShapeBorderTween Qualifier

	_ShapeDecoration Qualifier

	_ShortcutManager Qualifier

	_Shortcuts Qualifier

	_ShowValueIndicator Qualifier

	_ShrinkWrappingViewport Qualifier

	_SimpleDialog Qualifier

	_SimpleDialogOption Qualifier

	_Simulation Qualifier

	_SingleChildLayoutDelegate Qualifier

	_SingleChildRenderObjectElement Qualifier

	_SingleChildRenderObjectWidget Qualifier

	_SingleChildScrollView Qualifier

	_SingleTickerProviderStateMixin Qualifier

	_Size Qualifier

	_SizeChangedLayoutNotification Qualifier

	_SizeChangedLayoutNotifier Qualifier

	_SizeTransition Qualifier

	_SizeTween Qualifier

	_SizedBox Qualifier

	_SizedOverflowBox Qualifier

	_SlideTransition Qualifier

	_Slider Qualifier

	_SliderComponentShape Qualifier

	_SliderTheme Qualifier

	_SliderThemeData Qualifier

	_SliderTickMarkShape Qualifier

	_SliderTrackShape Qualifier

	_SliverAnimatedList Qualifier

	_SliverAnimatedListState Qualifier

	_SliverAppBar Qualifier

	_SliverChildBuilderDelegate Qualifier

	_SliverChildDelegate Qualifier

	_SliverChildListDelegate Qualifier

	_SliverFillRemaining Qualifier

	_SliverFillViewport Qualifier

	_SliverFixedExtentList Qualifier

	_SliverGrid Qualifier

	_SliverGridDelegate Qualifier

	_SliverGridDelegateWithFixedCrossAxisCount Qualifier

	_SliverGridDelegateWithMaxCrossAxisExtent Qualifier

	_SliverLayoutBuilder Qualifier

	_SliverLayoutWidgetBuilder Qualifier

	_SliverList Qualifier

	_SliverMultiBoxAdaptorElement Qualifier

	_SliverMultiBoxAdaptorWidget Qualifier

	_SliverOverlapAbsorber Qualifier

	_SliverOverlapAbsorberHandle Qualifier

	_SliverOverlapInjector Qualifier

	_SliverPadding Qualifier

	_SliverPersistentHeader Qualifier

	_SliverPersistentHeaderDelegate Qualifier

	_SliverPrototypeExtentList Qualifier

	_SliverSafeArea Qualifier

	_SliverToBoxAdapter Qualifier

	_SliverWithKeepAliveWidget Qualifier

	_SnackBar Qualifier

	_SnackBarAction Qualifier

	_SnackBarBehavior Qualifier

	_SnackBarClosedReason Qualifier

	_SnackBarThemeData Qualifier

	_Spacer Qualifier

	_Stack Qualifier

	_StackFit Qualifier

	_StadiumBorder Qualifier

	_State Qualifier

	_StateSetter Qualifier

	_StatefulBuilder Qualifier

	_StatefulElement Qualifier

	_StatefulWidget Qualifier

	_StatefulWidgetBuilder Qualifier

	_StatelessElement Qualifier

	_StatelessWidget Qualifier

	_StatusTransitionWidget Qualifier

	_Step Qualifier

	_StepState Qualifier

	_StepTween Qualifier

	_Stepper Qualifier

	_StepperType Qualifier

	_StreamBuilder Qualifier

	_StreamBuilderBase Qualifier

	_StrokeCap Qualifier

	_StrokeJoin Qualifier

	_StrutStyle Qualifier

	_SweepGradient Qualifier

	_Switch Qualifier

	_SwitchListTile Qualifier

	_Tab Qualifier

	_TabBar Qualifier

	_TabBarIndicatorSize Qualifier

	_TabBarTheme Qualifier

	_TabBarView Qualifier

	_TabController Qualifier

	_TabPageSelector Qualifier

	_TabPageSelectorIndicator Qualifier

	_Table Qualifier

	_TableBorder Qualifier

	_TableCell Qualifier

	_TableCellVerticalAlignment Qualifier

	_TableColumnWidth Qualifier

	_TableRow Qualifier

	_TableRowInkWell Qualifier

	_TapDownDetails Qualifier

	_TapUpDetails Qualifier

	_TappableChipAttributes Qualifier

	_TargetPlatform Qualifier

	_Text Qualifier

	_TextAffinity Qualifier

	_TextAlign Qualifier

	_TextAlignVertical Qualifier

	_TextBaseline Qualifier

	_TextBox Qualifier

	_TextCapitalization Qualifier

	_TextDecoration Qualifier

	_TextDecorationStyle Qualifier

	_TextDirection Qualifier

	_TextEditingController Qualifier

	_TextEditingValue Qualifier

	_TextField Qualifier

	_TextFormField Qualifier

	_TextInputAction Qualifier

	_TextInputType Qualifier

	_TextOverflow Qualifier

	_TextPainter Qualifier

	_TextPosition Qualifier

	_TextRange Qualifier

	_TextSelection Qualifier

	_TextSelectionControls Qualifier

	_TextSelectionDelegate Qualifier

	_TextSelectionGestureDetector Qualifier

	_TextSelectionGestureDetectorBuilder Qualifier

	_TextSelectionGestureDetectorBuilderDelegate Qualifier

	_TextSelectionHandleType Qualifier

	_TextSelectionOverlay Qualifier

	_TextSelectionOverlayChanged Qualifier

	_TextSpan Qualifier

	_TextStyle Qualifier

	_TextStyleTween Qualifier

	_TextTheme Qualifier

	_TextWidthBasis Qualifier

	_Texture Qualifier

	_Theme Qualifier

	_ThemeData Qualifier

	_ThemeDataTween Qualifier

	_ThemeMode Qualifier

	_Threshold Qualifier

	_Thumb Qualifier

	_TickerCanceled Qualifier

	_TickerFuture Qualifier

	_TickerMode Qualifier

	_TickerProvider Qualifier

	_TickerProviderStateMixin Qualifier

	_TileMode Qualifier

	_TimeOfDay Qualifier

	_TimeOfDayFormat Qualifier

	_Title Qualifier

	_ToggleButtons Qualifier

	_ToggleButtonsTheme Qualifier

	_ToggleButtonsThemeData Qualifier

	_Tolerance Qualifier

	_ToolbarOptions Qualifier

	_Tooltip Qualifier

	_TooltipTheme Qualifier

	_TooltipThemeData Qualifier

	_TrackingScrollController Qualifier

	_TrainHoppingAnimation Qualifier

	_Transform Qualifier

	_TransformProperty Qualifier

	_TransitionBuilder Qualifier

	_TransitionRoute Qualifier

	_TraversalDirection Qualifier

	_Tween Qualifier

	_TweenAnimationBuilder Qualifier

	_TweenConstructor Qualifier

	_TweenSequence Qualifier

	_TweenSequenceItem Qualifier

	_TweenVisitor Qualifier

	_TypeMatcher Qualifier

	_Typography Qualifier

	_UiKitView Qualifier

	_UnconstrainedBox Qualifier

	_UnderlineInputBorder Qualifier

	_UnderlineTabIndicator Qualifier

	_UniqueKey Qualifier

	_UniqueWidget Qualifier

	_UserAccountsDrawerHeader Qualifier

	_UserScrollNotification Qualifier

	_ValueChanged Qualifier

	_ValueGetter Qualifier

	_ValueKey Qualifier

	_ValueListenableBuilder Qualifier

	_ValueNotifier Qualifier

	_ValueSetter Qualifier

	_ValueWidgetBuilder Qualifier

	_Velocity Qualifier

	_VertexMode Qualifier

	_VerticalDirection Qualifier

	_VerticalDivider Qualifier

	_Viewport Qualifier

	_ViewportBuilder Qualifier

	_ViewportNotificationMixin Qualifier

	_Visibility Qualifier

	_VoidCallback Qualifier

	_Widget Qualifier

	_WidgetBuilder Qualifier

	_WidgetInspector Qualifier

	_WidgetInspectorService Qualifier

	_WidgetOrderFocusTraversalPolicy Qualifier

	_WidgetSpan Qualifier

	_WidgetToRenderBoxAdapter Qualifier

	_WidgetsApp Qualifier

	_WidgetsBinding Qualifier

	_WidgetsBindingObserver Qualifier

	_WidgetsFlutterBinding Qualifier

	_WidgetsLocalizations Qualifier

	_WillPopCallback Qualifier

	_WillPopScope Qualifier

	_Wrap Qualifier

	_WrapAlignment Qualifier

	_WrapCrossAlignment Qualifier

	_YearPicker Qualifier

	_ZoomPageTransitionsBuilder Qualifier

	_applyBoxFit Qualifier

	_axisDirectionIsReversed Qualifier

	_axisDirectionToAxis Qualifier

	_createLocalImageConfiguration Qualifier

	_debugAssertAllPaintingVarsUnset Qualifier

	_debugAssertAllWidgetVarsUnset Qualifier

	_debugCheckHasDirectionality Qualifier

	_debugCheckHasMaterial Qualifier

	_debugCheckHasMaterialLocalizations Qualifier

	_debugCheckHasMediaQuery Qualifier

	_debugCheckHasScaffold Qualifier

	_debugCheckHasTable Qualifier

	_debugChildrenHaveDuplicateKeys Qualifier

	_debugDescribeFocusTree Qualifier

	_debugDescribeTransform Qualifier

	_debugDisableShadows Qualifier

	_debugDumpApp Qualifier

	_debugDumpFocusTree Qualifier

	_debugDumpLayerTree Qualifier

	_debugDumpRenderTree Qualifier

	_debugHighlightDeprecatedWidgets Qualifier

	_debugItemsHaveDuplicateKeys Qualifier

	_debugNetworkImageHttpClientProvider Qualifier

	_debugOnRebuildDirtyWidget Qualifier

	_debugPrint Qualifier

	_debugPrintBuildScope Qualifier

	_debugPrintGlobalKeyedWidgetLifecycle Qualifier

	_debugPrintRebuildDirtyWidgets Qualifier

	_debugPrintScheduleBuildForStacks Qualifier

	_debugPrintStack Qualifier

	_debugProfileBuildsEnabled Qualifier

	_debugWidgetBuilderValue Qualifier

	_decodeImageFromList Qualifier

	_defaultScrollNotificationPredicate Qualifier

	_flipAxis Qualifier

	_flipAxisDirection Qualifier

	_getAxisDirectionFromAxisReverseAndDirectionality Qualifier

	_hashList Qualifier

	_hashValues Qualifier

	_hourFormat Qualifier

	_iOSHorizontalOffset Qualifier

	_imageCache Qualifier

	_immutable Qualifier

	_kAlwaysCompleteAnimation Qualifier

	_kAlwaysDismissedAnimation Qualifier

	_kBottomNavigationBarHeight Qualifier

	_kElevationToShadow Qualifier

	_kFloatingActionButtonMargin Qualifier

	_kFloatingActionButtonSegue Qualifier

	_kFloatingActionButtonTurnInterval Qualifier

	_kMaterialEdges Qualifier

	_kMaterialListPadding Qualifier

	_kMinInteractiveDimension Qualifier

	_kRadialReactionAlpha Qualifier

	_kRadialReactionDuration Qualifier

	_kRadialReactionRadius Qualifier

	_kTabLabelPadding Qualifier

	_kTabScrollDuration Qualifier

	_kTextTabBarHeight Qualifier

	_kThemeAnimationDuration Qualifier

	_kThemeChangeDuration Qualifier

	_kToolbarHeight Qualifier

	_materialTextSelectionControls Qualifier

	_mustCallSuper Qualifier

	_optionalTypeArgs Qualifier

	_paintBorder Qualifier

	_paintImage Qualifier

	_paintZigZag Qualifier

	_positionDependentBox Qualifier

	_precacheImage Qualifier

	_primaryFocus Qualifier

	_protected Qualifier

	_required Qualifier

	_runApp Qualifier

	_showAboutDialog Qualifier

	_showBottomSheet Qualifier

	_showDatePicker Qualifier

	_showDialog Qualifier

	_showGeneralDialog Qualifier

	_showLicensePage Qualifier

	_showMenu Qualifier

	_showModalBottomSheet Qualifier

	_showSearch Qualifier

	_showTimePicker Qualifier

	_textDirectionToAxisDirection Qualifier

	_transformDebugCreator Qualifier

	_visibleForTesting Qualifier
}

func NewMaterial(im *ImportManager) *Material {
	return &Material{
		Library: Library{
			im:         im,
			importPath: "package:flutter/material.dart",
		},
	}
}

func (m *Material) AboutDialog() Qualifier {
	if m._AboutDialog == "" {
		m._AboutDialog = m.File().AsDot("AboutDialog")
	}
	return m._AboutDialog
}

func (m *Material) AboutListTile() Qualifier {
	if m._AboutListTile == "" {
		m._AboutListTile = m.File().AsDot("AboutListTile")
	}
	return m._AboutListTile
}

func (m *Material) AbsorbPointer() Qualifier {
	if m._AbsorbPointer == "" {
		m._AbsorbPointer = m.File().AsDot("AbsorbPointer")
	}
	return m._AbsorbPointer
}

func (m *Material) Accumulator() Qualifier {
	if m._Accumulator == "" {
		m._Accumulator = m.File().AsDot("Accumulator")
	}
	return m._Accumulator
}

func (m *Material) Action() Qualifier {
	if m._Action == "" {
		m._Action = m.File().AsDot("Action")
	}
	return m._Action
}

func (m *Material) ActionChip() Qualifier {
	if m._ActionChip == "" {
		m._ActionChip = m.File().AsDot("ActionChip")
	}
	return m._ActionChip
}

func (m *Material) ActionDispatcher() Qualifier {
	if m._ActionDispatcher == "" {
		m._ActionDispatcher = m.File().AsDot("ActionDispatcher")
	}
	return m._ActionDispatcher
}

func (m *Material) ActionFactory() Qualifier {
	if m._ActionFactory == "" {
		m._ActionFactory = m.File().AsDot("ActionFactory")
	}
	return m._ActionFactory
}

func (m *Material) Actions() Qualifier {
	if m._Actions == "" {
		m._Actions = m.File().AsDot("Actions")
	}
	return m._Actions
}

func (m *Material) ActivateAction() Qualifier {
	if m._ActivateAction == "" {
		m._ActivateAction = m.File().AsDot("ActivateAction")
	}
	return m._ActivateAction
}

func (m *Material) AlertDialog() Qualifier {
	if m._AlertDialog == "" {
		m._AlertDialog = m.File().AsDot("AlertDialog")
	}
	return m._AlertDialog
}

func (m *Material) Align() Qualifier {
	if m._Align == "" {
		m._Align = m.File().AsDot("Align")
	}
	return m._Align
}

func (m *Material) AlignTransition() Qualifier {
	if m._AlignTransition == "" {
		m._AlignTransition = m.File().AsDot("AlignTransition")
	}
	return m._AlignTransition
}

func (m *Material) Alignment() Qualifier {
	if m._Alignment == "" {
		m._Alignment = m.File().AsDot("Alignment")
	}
	return m._Alignment
}

func (m *Material) AlignmentDirectional() Qualifier {
	if m._AlignmentDirectional == "" {
		m._AlignmentDirectional = m.File().AsDot("AlignmentDirectional")
	}
	return m._AlignmentDirectional
}

func (m *Material) AlignmentGeometry() Qualifier {
	if m._AlignmentGeometry == "" {
		m._AlignmentGeometry = m.File().AsDot("AlignmentGeometry")
	}
	return m._AlignmentGeometry
}

func (m *Material) AlignmentGeometryTween() Qualifier {
	if m._AlignmentGeometryTween == "" {
		m._AlignmentGeometryTween = m.File().AsDot("AlignmentGeometryTween")
	}
	return m._AlignmentGeometryTween
}

func (m *Material) AlignmentTween() Qualifier {
	if m._AlignmentTween == "" {
		m._AlignmentTween = m.File().AsDot("AlignmentTween")
	}
	return m._AlignmentTween
}

func (m *Material) AlwaysScrollableScrollPhysics() Qualifier {
	if m._AlwaysScrollableScrollPhysics == "" {
		m._AlwaysScrollableScrollPhysics = m.File().AsDot("AlwaysScrollableScrollPhysics")
	}
	return m._AlwaysScrollableScrollPhysics
}

func (m *Material) AlwaysStoppedAnimation() Qualifier {
	if m._AlwaysStoppedAnimation == "" {
		m._AlwaysStoppedAnimation = m.File().AsDot("AlwaysStoppedAnimation")
	}
	return m._AlwaysStoppedAnimation
}

func (m *Material) AndroidView() Qualifier {
	if m._AndroidView == "" {
		m._AndroidView = m.File().AsDot("AndroidView")
	}
	return m._AndroidView
}

func (m *Material) Animatable() Qualifier {
	if m._Animatable == "" {
		m._Animatable = m.File().AsDot("Animatable")
	}
	return m._Animatable
}

func (m *Material) AnimatedAlign() Qualifier {
	if m._AnimatedAlign == "" {
		m._AnimatedAlign = m.File().AsDot("AnimatedAlign")
	}
	return m._AnimatedAlign
}

func (m *Material) AnimatedBuilder() Qualifier {
	if m._AnimatedBuilder == "" {
		m._AnimatedBuilder = m.File().AsDot("AnimatedBuilder")
	}
	return m._AnimatedBuilder
}

func (m *Material) AnimatedContainer() Qualifier {
	if m._AnimatedContainer == "" {
		m._AnimatedContainer = m.File().AsDot("AnimatedContainer")
	}
	return m._AnimatedContainer
}

func (m *Material) AnimatedCrossFade() Qualifier {
	if m._AnimatedCrossFade == "" {
		m._AnimatedCrossFade = m.File().AsDot("AnimatedCrossFade")
	}
	return m._AnimatedCrossFade
}

func (m *Material) AnimatedCrossFadeBuilder() Qualifier {
	if m._AnimatedCrossFadeBuilder == "" {
		m._AnimatedCrossFadeBuilder = m.File().AsDot("AnimatedCrossFadeBuilder")
	}
	return m._AnimatedCrossFadeBuilder
}

func (m *Material) AnimatedDefaultTextStyle() Qualifier {
	if m._AnimatedDefaultTextStyle == "" {
		m._AnimatedDefaultTextStyle = m.File().AsDot("AnimatedDefaultTextStyle")
	}
	return m._AnimatedDefaultTextStyle
}

func (m *Material) AnimatedIcon() Qualifier {
	if m._AnimatedIcon == "" {
		m._AnimatedIcon = m.File().AsDot("AnimatedIcon")
	}
	return m._AnimatedIcon
}

func (m *Material) AnimatedIconData() Qualifier {
	if m._AnimatedIconData == "" {
		m._AnimatedIconData = m.File().AsDot("AnimatedIconData")
	}
	return m._AnimatedIconData
}

func (m *Material) AnimatedIcons() Qualifier {
	if m._AnimatedIcons == "" {
		m._AnimatedIcons = m.File().AsDot("AnimatedIcons")
	}
	return m._AnimatedIcons
}

func (m *Material) AnimatedList() Qualifier {
	if m._AnimatedList == "" {
		m._AnimatedList = m.File().AsDot("AnimatedList")
	}
	return m._AnimatedList
}

func (m *Material) AnimatedListItemBuilder() Qualifier {
	if m._AnimatedListItemBuilder == "" {
		m._AnimatedListItemBuilder = m.File().AsDot("AnimatedListItemBuilder")
	}
	return m._AnimatedListItemBuilder
}

func (m *Material) AnimatedListRemovedItemBuilder() Qualifier {
	if m._AnimatedListRemovedItemBuilder == "" {
		m._AnimatedListRemovedItemBuilder = m.File().AsDot("AnimatedListRemovedItemBuilder")
	}
	return m._AnimatedListRemovedItemBuilder
}

func (m *Material) AnimatedListState() Qualifier {
	if m._AnimatedListState == "" {
		m._AnimatedListState = m.File().AsDot("AnimatedListState")
	}
	return m._AnimatedListState
}

func (m *Material) AnimatedModalBarrier() Qualifier {
	if m._AnimatedModalBarrier == "" {
		m._AnimatedModalBarrier = m.File().AsDot("AnimatedModalBarrier")
	}
	return m._AnimatedModalBarrier
}

func (m *Material) AnimatedOpacity() Qualifier {
	if m._AnimatedOpacity == "" {
		m._AnimatedOpacity = m.File().AsDot("AnimatedOpacity")
	}
	return m._AnimatedOpacity
}

func (m *Material) AnimatedPadding() Qualifier {
	if m._AnimatedPadding == "" {
		m._AnimatedPadding = m.File().AsDot("AnimatedPadding")
	}
	return m._AnimatedPadding
}

func (m *Material) AnimatedPhysicalModel() Qualifier {
	if m._AnimatedPhysicalModel == "" {
		m._AnimatedPhysicalModel = m.File().AsDot("AnimatedPhysicalModel")
	}
	return m._AnimatedPhysicalModel
}

func (m *Material) AnimatedPositioned() Qualifier {
	if m._AnimatedPositioned == "" {
		m._AnimatedPositioned = m.File().AsDot("AnimatedPositioned")
	}
	return m._AnimatedPositioned
}

func (m *Material) AnimatedPositionedDirectional() Qualifier {
	if m._AnimatedPositionedDirectional == "" {
		m._AnimatedPositionedDirectional = m.File().AsDot("AnimatedPositionedDirectional")
	}
	return m._AnimatedPositionedDirectional
}

func (m *Material) AnimatedSize() Qualifier {
	if m._AnimatedSize == "" {
		m._AnimatedSize = m.File().AsDot("AnimatedSize")
	}
	return m._AnimatedSize
}

func (m *Material) AnimatedSwitcher() Qualifier {
	if m._AnimatedSwitcher == "" {
		m._AnimatedSwitcher = m.File().AsDot("AnimatedSwitcher")
	}
	return m._AnimatedSwitcher
}

func (m *Material) AnimatedSwitcherLayoutBuilder() Qualifier {
	if m._AnimatedSwitcherLayoutBuilder == "" {
		m._AnimatedSwitcherLayoutBuilder = m.File().AsDot("AnimatedSwitcherLayoutBuilder")
	}
	return m._AnimatedSwitcherLayoutBuilder
}

func (m *Material) AnimatedSwitcherTransitionBuilder() Qualifier {
	if m._AnimatedSwitcherTransitionBuilder == "" {
		m._AnimatedSwitcherTransitionBuilder = m.File().AsDot("AnimatedSwitcherTransitionBuilder")
	}
	return m._AnimatedSwitcherTransitionBuilder
}

func (m *Material) AnimatedTheme() Qualifier {
	if m._AnimatedTheme == "" {
		m._AnimatedTheme = m.File().AsDot("AnimatedTheme")
	}
	return m._AnimatedTheme
}

func (m *Material) AnimatedWidget() Qualifier {
	if m._AnimatedWidget == "" {
		m._AnimatedWidget = m.File().AsDot("AnimatedWidget")
	}
	return m._AnimatedWidget
}

func (m *Material) AnimatedWidgetBaseState() Qualifier {
	if m._AnimatedWidgetBaseState == "" {
		m._AnimatedWidgetBaseState = m.File().AsDot("AnimatedWidgetBaseState")
	}
	return m._AnimatedWidgetBaseState
}

func (m *Material) Animation() Qualifier {
	if m._Animation == "" {
		m._Animation = m.File().AsDot("Animation")
	}
	return m._Animation
}

func (m *Material) AnimationBehavior() Qualifier {
	if m._AnimationBehavior == "" {
		m._AnimationBehavior = m.File().AsDot("AnimationBehavior")
	}
	return m._AnimationBehavior
}

func (m *Material) AnimationController() Qualifier {
	if m._AnimationController == "" {
		m._AnimationController = m.File().AsDot("AnimationController")
	}
	return m._AnimationController
}

func (m *Material) AnimationEagerListenerMixin() Qualifier {
	if m._AnimationEagerListenerMixin == "" {
		m._AnimationEagerListenerMixin = m.File().AsDot("AnimationEagerListenerMixin")
	}
	return m._AnimationEagerListenerMixin
}

func (m *Material) AnimationLazyListenerMixin() Qualifier {
	if m._AnimationLazyListenerMixin == "" {
		m._AnimationLazyListenerMixin = m.File().AsDot("AnimationLazyListenerMixin")
	}
	return m._AnimationLazyListenerMixin
}

func (m *Material) AnimationLocalListenersMixin() Qualifier {
	if m._AnimationLocalListenersMixin == "" {
		m._AnimationLocalListenersMixin = m.File().AsDot("AnimationLocalListenersMixin")
	}
	return m._AnimationLocalListenersMixin
}

func (m *Material) AnimationLocalStatusListenersMixin() Qualifier {
	if m._AnimationLocalStatusListenersMixin == "" {
		m._AnimationLocalStatusListenersMixin = m.File().AsDot("AnimationLocalStatusListenersMixin")
	}
	return m._AnimationLocalStatusListenersMixin
}

func (m *Material) AnimationMax() Qualifier {
	if m._AnimationMax == "" {
		m._AnimationMax = m.File().AsDot("AnimationMax")
	}
	return m._AnimationMax
}

func (m *Material) AnimationMean() Qualifier {
	if m._AnimationMean == "" {
		m._AnimationMean = m.File().AsDot("AnimationMean")
	}
	return m._AnimationMean
}

func (m *Material) AnimationMin() Qualifier {
	if m._AnimationMin == "" {
		m._AnimationMin = m.File().AsDot("AnimationMin")
	}
	return m._AnimationMin
}

func (m *Material) AnimationStatus() Qualifier {
	if m._AnimationStatus == "" {
		m._AnimationStatus = m.File().AsDot("AnimationStatus")
	}
	return m._AnimationStatus
}

func (m *Material) AnimationStatusListener() Qualifier {
	if m._AnimationStatusListener == "" {
		m._AnimationStatusListener = m.File().AsDot("AnimationStatusListener")
	}
	return m._AnimationStatusListener
}

func (m *Material) AnimationWithParentMixin() Qualifier {
	if m._AnimationWithParentMixin == "" {
		m._AnimationWithParentMixin = m.File().AsDot("AnimationWithParentMixin")
	}
	return m._AnimationWithParentMixin
}

func (m *Material) AnnotatedRegion() Qualifier {
	if m._AnnotatedRegion == "" {
		m._AnnotatedRegion = m.File().AsDot("AnnotatedRegion")
	}
	return m._AnnotatedRegion
}

func (m *Material) AppBar() Qualifier {
	if m._AppBar == "" {
		m._AppBar = m.File().AsDot("AppBar")
	}
	return m._AppBar
}

func (m *Material) AppBarTheme() Qualifier {
	if m._AppBarTheme == "" {
		m._AppBarTheme = m.File().AsDot("AppBarTheme")
	}
	return m._AppBarTheme
}

func (m *Material) AppLifecycleState() Qualifier {
	if m._AppLifecycleState == "" {
		m._AppLifecycleState = m.File().AsDot("AppLifecycleState")
	}
	return m._AppLifecycleState
}

func (m *Material) AspectRatio() Qualifier {
	if m._AspectRatio == "" {
		m._AspectRatio = m.File().AsDot("AspectRatio")
	}
	return m._AspectRatio
}

func (m *Material) AssetBundleImageKey() Qualifier {
	if m._AssetBundleImageKey == "" {
		m._AssetBundleImageKey = m.File().AsDot("AssetBundleImageKey")
	}
	return m._AssetBundleImageKey
}

func (m *Material) AssetBundleImageProvider() Qualifier {
	if m._AssetBundleImageProvider == "" {
		m._AssetBundleImageProvider = m.File().AsDot("AssetBundleImageProvider")
	}
	return m._AssetBundleImageProvider
}

func (m *Material) AssetImage() Qualifier {
	if m._AssetImage == "" {
		m._AssetImage = m.File().AsDot("AssetImage")
	}
	return m._AssetImage
}

func (m *Material) AsyncSnapshot() Qualifier {
	if m._AsyncSnapshot == "" {
		m._AsyncSnapshot = m.File().AsDot("AsyncSnapshot")
	}
	return m._AsyncSnapshot
}

func (m *Material) AsyncWidgetBuilder() Qualifier {
	if m._AsyncWidgetBuilder == "" {
		m._AsyncWidgetBuilder = m.File().AsDot("AsyncWidgetBuilder")
	}
	return m._AsyncWidgetBuilder
}

func (m *Material) AutomaticKeepAlive() Qualifier {
	if m._AutomaticKeepAlive == "" {
		m._AutomaticKeepAlive = m.File().AsDot("AutomaticKeepAlive")
	}
	return m._AutomaticKeepAlive
}

func (m *Material) AutomaticKeepAliveClientMixin() Qualifier {
	if m._AutomaticKeepAliveClientMixin == "" {
		m._AutomaticKeepAliveClientMixin = m.File().AsDot("AutomaticKeepAliveClientMixin")
	}
	return m._AutomaticKeepAliveClientMixin
}

func (m *Material) AutomaticNotchedShape() Qualifier {
	if m._AutomaticNotchedShape == "" {
		m._AutomaticNotchedShape = m.File().AsDot("AutomaticNotchedShape")
	}
	return m._AutomaticNotchedShape
}

func (m *Material) Axis() Qualifier {
	if m._Axis == "" {
		m._Axis = m.File().AsDot("Axis")
	}
	return m._Axis
}

func (m *Material) AxisDirection() Qualifier {
	if m._AxisDirection == "" {
		m._AxisDirection = m.File().AsDot("AxisDirection")
	}
	return m._AxisDirection
}

func (m *Material) BackButton() Qualifier {
	if m._BackButton == "" {
		m._BackButton = m.File().AsDot("BackButton")
	}
	return m._BackButton
}

func (m *Material) BackButtonIcon() Qualifier {
	if m._BackButtonIcon == "" {
		m._BackButtonIcon = m.File().AsDot("BackButtonIcon")
	}
	return m._BackButtonIcon
}

func (m *Material) BackdropFilter() Qualifier {
	if m._BackdropFilter == "" {
		m._BackdropFilter = m.File().AsDot("BackdropFilter")
	}
	return m._BackdropFilter
}

func (m *Material) BallisticScrollActivity() Qualifier {
	if m._BallisticScrollActivity == "" {
		m._BallisticScrollActivity = m.File().AsDot("BallisticScrollActivity")
	}
	return m._BallisticScrollActivity
}

func (m *Material) Banner() Qualifier {
	if m._Banner == "" {
		m._Banner = m.File().AsDot("Banner")
	}
	return m._Banner
}

func (m *Material) BannerLocation() Qualifier {
	if m._BannerLocation == "" {
		m._BannerLocation = m.File().AsDot("BannerLocation")
	}
	return m._BannerLocation
}

func (m *Material) BannerPainter() Qualifier {
	if m._BannerPainter == "" {
		m._BannerPainter = m.File().AsDot("BannerPainter")
	}
	return m._BannerPainter
}

func (m *Material) BaseSliderTrackShape() Qualifier {
	if m._BaseSliderTrackShape == "" {
		m._BaseSliderTrackShape = m.File().AsDot("BaseSliderTrackShape")
	}
	return m._BaseSliderTrackShape
}

func (m *Material) Baseline() Qualifier {
	if m._Baseline == "" {
		m._Baseline = m.File().AsDot("Baseline")
	}
	return m._Baseline
}

func (m *Material) BeveledRectangleBorder() Qualifier {
	if m._BeveledRectangleBorder == "" {
		m._BeveledRectangleBorder = m.File().AsDot("BeveledRectangleBorder")
	}
	return m._BeveledRectangleBorder
}

func (m *Material) BlendMode() Qualifier {
	if m._BlendMode == "" {
		m._BlendMode = m.File().AsDot("BlendMode")
	}
	return m._BlendMode
}

func (m *Material) BlockSemantics() Qualifier {
	if m._BlockSemantics == "" {
		m._BlockSemantics = m.File().AsDot("BlockSemantics")
	}
	return m._BlockSemantics
}

func (m *Material) BlurStyle() Qualifier {
	if m._BlurStyle == "" {
		m._BlurStyle = m.File().AsDot("BlurStyle")
	}
	return m._BlurStyle
}

func (m *Material) Border() Qualifier {
	if m._Border == "" {
		m._Border = m.File().AsDot("Border")
	}
	return m._Border
}

func (m *Material) BorderDirectional() Qualifier {
	if m._BorderDirectional == "" {
		m._BorderDirectional = m.File().AsDot("BorderDirectional")
	}
	return m._BorderDirectional
}

func (m *Material) BorderRadius() Qualifier {
	if m._BorderRadius == "" {
		m._BorderRadius = m.File().AsDot("BorderRadius")
	}
	return m._BorderRadius
}

func (m *Material) BorderRadiusDirectional() Qualifier {
	if m._BorderRadiusDirectional == "" {
		m._BorderRadiusDirectional = m.File().AsDot("BorderRadiusDirectional")
	}
	return m._BorderRadiusDirectional
}

func (m *Material) BorderRadiusGeometry() Qualifier {
	if m._BorderRadiusGeometry == "" {
		m._BorderRadiusGeometry = m.File().AsDot("BorderRadiusGeometry")
	}
	return m._BorderRadiusGeometry
}

func (m *Material) BorderRadiusTween() Qualifier {
	if m._BorderRadiusTween == "" {
		m._BorderRadiusTween = m.File().AsDot("BorderRadiusTween")
	}
	return m._BorderRadiusTween
}

func (m *Material) BorderSide() Qualifier {
	if m._BorderSide == "" {
		m._BorderSide = m.File().AsDot("BorderSide")
	}
	return m._BorderSide
}

func (m *Material) BorderStyle() Qualifier {
	if m._BorderStyle == "" {
		m._BorderStyle = m.File().AsDot("BorderStyle")
	}
	return m._BorderStyle
}

func (m *Material) BorderTween() Qualifier {
	if m._BorderTween == "" {
		m._BorderTween = m.File().AsDot("BorderTween")
	}
	return m._BorderTween
}

func (m *Material) BottomAppBar() Qualifier {
	if m._BottomAppBar == "" {
		m._BottomAppBar = m.File().AsDot("BottomAppBar")
	}
	return m._BottomAppBar
}

func (m *Material) BottomAppBarTheme() Qualifier {
	if m._BottomAppBarTheme == "" {
		m._BottomAppBarTheme = m.File().AsDot("BottomAppBarTheme")
	}
	return m._BottomAppBarTheme
}

func (m *Material) BottomNavigationBar() Qualifier {
	if m._BottomNavigationBar == "" {
		m._BottomNavigationBar = m.File().AsDot("BottomNavigationBar")
	}
	return m._BottomNavigationBar
}

func (m *Material) BottomNavigationBarItem() Qualifier {
	if m._BottomNavigationBarItem == "" {
		m._BottomNavigationBarItem = m.File().AsDot("BottomNavigationBarItem")
	}
	return m._BottomNavigationBarItem
}

func (m *Material) BottomNavigationBarType() Qualifier {
	if m._BottomNavigationBarType == "" {
		m._BottomNavigationBarType = m.File().AsDot("BottomNavigationBarType")
	}
	return m._BottomNavigationBarType
}

func (m *Material) BottomSheet() Qualifier {
	if m._BottomSheet == "" {
		m._BottomSheet = m.File().AsDot("BottomSheet")
	}
	return m._BottomSheet
}

func (m *Material) BottomSheetThemeData() Qualifier {
	if m._BottomSheetThemeData == "" {
		m._BottomSheetThemeData = m.File().AsDot("BottomSheetThemeData")
	}
	return m._BottomSheetThemeData
}

func (m *Material) BouncingScrollPhysics() Qualifier {
	if m._BouncingScrollPhysics == "" {
		m._BouncingScrollPhysics = m.File().AsDot("BouncingScrollPhysics")
	}
	return m._BouncingScrollPhysics
}

func (m *Material) BouncingScrollSimulation() Qualifier {
	if m._BouncingScrollSimulation == "" {
		m._BouncingScrollSimulation = m.File().AsDot("BouncingScrollSimulation")
	}
	return m._BouncingScrollSimulation
}

func (m *Material) BoxBorder() Qualifier {
	if m._BoxBorder == "" {
		m._BoxBorder = m.File().AsDot("BoxBorder")
	}
	return m._BoxBorder
}

func (m *Material) BoxConstraints() Qualifier {
	if m._BoxConstraints == "" {
		m._BoxConstraints = m.File().AsDot("BoxConstraints")
	}
	return m._BoxConstraints
}

func (m *Material) BoxConstraintsTween() Qualifier {
	if m._BoxConstraintsTween == "" {
		m._BoxConstraintsTween = m.File().AsDot("BoxConstraintsTween")
	}
	return m._BoxConstraintsTween
}

func (m *Material) BoxDecoration() Qualifier {
	if m._BoxDecoration == "" {
		m._BoxDecoration = m.File().AsDot("BoxDecoration")
	}
	return m._BoxDecoration
}

func (m *Material) BoxFit() Qualifier {
	if m._BoxFit == "" {
		m._BoxFit = m.File().AsDot("BoxFit")
	}
	return m._BoxFit
}

func (m *Material) BoxPainter() Qualifier {
	if m._BoxPainter == "" {
		m._BoxPainter = m.File().AsDot("BoxPainter")
	}
	return m._BoxPainter
}

func (m *Material) BoxScrollView() Qualifier {
	if m._BoxScrollView == "" {
		m._BoxScrollView = m.File().AsDot("BoxScrollView")
	}
	return m._BoxScrollView
}

func (m *Material) BoxShadow() Qualifier {
	if m._BoxShadow == "" {
		m._BoxShadow = m.File().AsDot("BoxShadow")
	}
	return m._BoxShadow
}

func (m *Material) BoxShape() Qualifier {
	if m._BoxShape == "" {
		m._BoxShape = m.File().AsDot("BoxShape")
	}
	return m._BoxShape
}

func (m *Material) Brightness() Qualifier {
	if m._Brightness == "" {
		m._Brightness = m.File().AsDot("Brightness")
	}
	return m._Brightness
}

func (m *Material) BuildContext() Qualifier {
	if m._BuildContext == "" {
		m._BuildContext = m.File().AsDot("BuildContext")
	}
	return m._BuildContext
}

func (m *Material) BuildOwner() Qualifier {
	if m._BuildOwner == "" {
		m._BuildOwner = m.File().AsDot("BuildOwner")
	}
	return m._BuildOwner
}

func (m *Material) Builder() Qualifier {
	if m._Builder == "" {
		m._Builder = m.File().AsDot("Builder")
	}
	return m._Builder
}

func (m *Material) ButtonBar() Qualifier {
	if m._ButtonBar == "" {
		m._ButtonBar = m.File().AsDot("ButtonBar")
	}
	return m._ButtonBar
}

func (m *Material) ButtonBarLayoutBehavior() Qualifier {
	if m._ButtonBarLayoutBehavior == "" {
		m._ButtonBarLayoutBehavior = m.File().AsDot("ButtonBarLayoutBehavior")
	}
	return m._ButtonBarLayoutBehavior
}

func (m *Material) ButtonBarTheme() Qualifier {
	if m._ButtonBarTheme == "" {
		m._ButtonBarTheme = m.File().AsDot("ButtonBarTheme")
	}
	return m._ButtonBarTheme
}

func (m *Material) ButtonBarThemeData() Qualifier {
	if m._ButtonBarThemeData == "" {
		m._ButtonBarThemeData = m.File().AsDot("ButtonBarThemeData")
	}
	return m._ButtonBarThemeData
}

func (m *Material) ButtonTextTheme() Qualifier {
	if m._ButtonTextTheme == "" {
		m._ButtonTextTheme = m.File().AsDot("ButtonTextTheme")
	}
	return m._ButtonTextTheme
}

func (m *Material) ButtonTheme() Qualifier {
	if m._ButtonTheme == "" {
		m._ButtonTheme = m.File().AsDot("ButtonTheme")
	}
	return m._ButtonTheme
}

func (m *Material) ButtonThemeData() Qualifier {
	if m._ButtonThemeData == "" {
		m._ButtonThemeData = m.File().AsDot("ButtonThemeData")
	}
	return m._ButtonThemeData
}

func (m *Material) CallbackAction() Qualifier {
	if m._CallbackAction == "" {
		m._CallbackAction = m.File().AsDot("CallbackAction")
	}
	return m._CallbackAction
}

func (m *Material) Canvas() Qualifier {
	if m._Canvas == "" {
		m._Canvas = m.File().AsDot("Canvas")
	}
	return m._Canvas
}

func (m *Material) Card() Qualifier {
	if m._Card == "" {
		m._Card = m.File().AsDot("Card")
	}
	return m._Card
}

func (m *Material) CardTheme() Qualifier {
	if m._CardTheme == "" {
		m._CardTheme = m.File().AsDot("CardTheme")
	}
	return m._CardTheme
}

func (m *Material) Center() Qualifier {
	if m._Center == "" {
		m._Center = m.File().AsDot("Center")
	}
	return m._Center
}

func (m *Material) ChangeNotifier() Qualifier {
	if m._ChangeNotifier == "" {
		m._ChangeNotifier = m.File().AsDot("ChangeNotifier")
	}
	return m._ChangeNotifier
}

func (m *Material) Checkbox() Qualifier {
	if m._Checkbox == "" {
		m._Checkbox = m.File().AsDot("Checkbox")
	}
	return m._Checkbox
}

func (m *Material) CheckboxListTile() Qualifier {
	if m._CheckboxListTile == "" {
		m._CheckboxListTile = m.File().AsDot("CheckboxListTile")
	}
	return m._CheckboxListTile
}

func (m *Material) CheckedModeBanner() Qualifier {
	if m._CheckedModeBanner == "" {
		m._CheckedModeBanner = m.File().AsDot("CheckedModeBanner")
	}
	return m._CheckedModeBanner
}

func (m *Material) CheckedPopupMenuItem() Qualifier {
	if m._CheckedPopupMenuItem == "" {
		m._CheckedPopupMenuItem = m.File().AsDot("CheckedPopupMenuItem")
	}
	return m._CheckedPopupMenuItem
}

func (m *Material) CheckmarkableChipAttributes() Qualifier {
	if m._CheckmarkableChipAttributes == "" {
		m._CheckmarkableChipAttributes = m.File().AsDot("CheckmarkableChipAttributes")
	}
	return m._CheckmarkableChipAttributes
}

func (m *Material) ChildIndexGetter() Qualifier {
	if m._ChildIndexGetter == "" {
		m._ChildIndexGetter = m.File().AsDot("ChildIndexGetter")
	}
	return m._ChildIndexGetter
}

func (m *Material) Chip() Qualifier {
	if m._Chip == "" {
		m._Chip = m.File().AsDot("Chip")
	}
	return m._Chip
}

func (m *Material) ChipAttributes() Qualifier {
	if m._ChipAttributes == "" {
		m._ChipAttributes = m.File().AsDot("ChipAttributes")
	}
	return m._ChipAttributes
}

func (m *Material) ChipTheme() Qualifier {
	if m._ChipTheme == "" {
		m._ChipTheme = m.File().AsDot("ChipTheme")
	}
	return m._ChipTheme
}

func (m *Material) ChipThemeData() Qualifier {
	if m._ChipThemeData == "" {
		m._ChipThemeData = m.File().AsDot("ChipThemeData")
	}
	return m._ChipThemeData
}

func (m *Material) ChoiceChip() Qualifier {
	if m._ChoiceChip == "" {
		m._ChoiceChip = m.File().AsDot("ChoiceChip")
	}
	return m._ChoiceChip
}

func (m *Material) CircleAvatar() Qualifier {
	if m._CircleAvatar == "" {
		m._CircleAvatar = m.File().AsDot("CircleAvatar")
	}
	return m._CircleAvatar
}

func (m *Material) CircleBorder() Qualifier {
	if m._CircleBorder == "" {
		m._CircleBorder = m.File().AsDot("CircleBorder")
	}
	return m._CircleBorder
}

func (m *Material) CircularNotchedRectangle() Qualifier {
	if m._CircularNotchedRectangle == "" {
		m._CircularNotchedRectangle = m.File().AsDot("CircularNotchedRectangle")
	}
	return m._CircularNotchedRectangle
}

func (m *Material) CircularProgressIndicator() Qualifier {
	if m._CircularProgressIndicator == "" {
		m._CircularProgressIndicator = m.File().AsDot("CircularProgressIndicator")
	}
	return m._CircularProgressIndicator
}

func (m *Material) ClampingScrollPhysics() Qualifier {
	if m._ClampingScrollPhysics == "" {
		m._ClampingScrollPhysics = m.File().AsDot("ClampingScrollPhysics")
	}
	return m._ClampingScrollPhysics
}

func (m *Material) ClampingScrollSimulation() Qualifier {
	if m._ClampingScrollSimulation == "" {
		m._ClampingScrollSimulation = m.File().AsDot("ClampingScrollSimulation")
	}
	return m._ClampingScrollSimulation
}

func (m *Material) Clip() Qualifier {
	if m._Clip == "" {
		m._Clip = m.File().AsDot("Clip")
	}
	return m._Clip
}

func (m *Material) ClipContext() Qualifier {
	if m._ClipContext == "" {
		m._ClipContext = m.File().AsDot("ClipContext")
	}
	return m._ClipContext
}

func (m *Material) ClipOval() Qualifier {
	if m._ClipOval == "" {
		m._ClipOval = m.File().AsDot("ClipOval")
	}
	return m._ClipOval
}

func (m *Material) ClipPath() Qualifier {
	if m._ClipPath == "" {
		m._ClipPath = m.File().AsDot("ClipPath")
	}
	return m._ClipPath
}

func (m *Material) ClipRRect() Qualifier {
	if m._ClipRRect == "" {
		m._ClipRRect = m.File().AsDot("ClipRRect")
	}
	return m._ClipRRect
}

func (m *Material) ClipRect() Qualifier {
	if m._ClipRect == "" {
		m._ClipRect = m.File().AsDot("ClipRect")
	}
	return m._ClipRect
}

func (m *Material) CloseButton() Qualifier {
	if m._CloseButton == "" {
		m._CloseButton = m.File().AsDot("CloseButton")
	}
	return m._CloseButton
}

func (m *Material) CollapseMode() Qualifier {
	if m._CollapseMode == "" {
		m._CollapseMode = m.File().AsDot("CollapseMode")
	}
	return m._CollapseMode
}

func (m *Material) Color() Qualifier {
	if m._Color == "" {
		m._Color = m.File().AsDot("Color")
	}
	return m._Color
}

func (m *Material) ColorFilter() Qualifier {
	if m._ColorFilter == "" {
		m._ColorFilter = m.File().AsDot("ColorFilter")
	}
	return m._ColorFilter
}

func (m *Material) ColorFiltered() Qualifier {
	if m._ColorFiltered == "" {
		m._ColorFiltered = m.File().AsDot("ColorFiltered")
	}
	return m._ColorFiltered
}

func (m *Material) ColorProperty() Qualifier {
	if m._ColorProperty == "" {
		m._ColorProperty = m.File().AsDot("ColorProperty")
	}
	return m._ColorProperty
}

func (m *Material) ColorScheme() Qualifier {
	if m._ColorScheme == "" {
		m._ColorScheme = m.File().AsDot("ColorScheme")
	}
	return m._ColorScheme
}

func (m *Material) ColorSwatch() Qualifier {
	if m._ColorSwatch == "" {
		m._ColorSwatch = m.File().AsDot("ColorSwatch")
	}
	return m._ColorSwatch
}

func (m *Material) ColorTween() Qualifier {
	if m._ColorTween == "" {
		m._ColorTween = m.File().AsDot("ColorTween")
	}
	return m._ColorTween
}

func (m *Material) Colors() Qualifier {
	if m._Colors == "" {
		m._Colors = m.File().AsDot("Colors")
	}
	return m._Colors
}

func (m *Material) Column() Qualifier {
	if m._Column == "" {
		m._Column = m.File().AsDot("Column")
	}
	return m._Column
}

func (m *Material) ComponentElement() Qualifier {
	if m._ComponentElement == "" {
		m._ComponentElement = m.File().AsDot("ComponentElement")
	}
	return m._ComponentElement
}

func (m *Material) CompositedTransformFollower() Qualifier {
	if m._CompositedTransformFollower == "" {
		m._CompositedTransformFollower = m.File().AsDot("CompositedTransformFollower")
	}
	return m._CompositedTransformFollower
}

func (m *Material) CompositedTransformTarget() Qualifier {
	if m._CompositedTransformTarget == "" {
		m._CompositedTransformTarget = m.File().AsDot("CompositedTransformTarget")
	}
	return m._CompositedTransformTarget
}

func (m *Material) CompoundAnimation() Qualifier {
	if m._CompoundAnimation == "" {
		m._CompoundAnimation = m.File().AsDot("CompoundAnimation")
	}
	return m._CompoundAnimation
}

func (m *Material) ConfirmDismissCallback() Qualifier {
	if m._ConfirmDismissCallback == "" {
		m._ConfirmDismissCallback = m.File().AsDot("ConfirmDismissCallback")
	}
	return m._ConfirmDismissCallback
}

func (m *Material) ConnectionState() Qualifier {
	if m._ConnectionState == "" {
		m._ConnectionState = m.File().AsDot("ConnectionState")
	}
	return m._ConnectionState
}

func (m *Material) ConstantTween() Qualifier {
	if m._ConstantTween == "" {
		m._ConstantTween = m.File().AsDot("ConstantTween")
	}
	return m._ConstantTween
}

func (m *Material) ConstrainedBox() Qualifier {
	if m._ConstrainedBox == "" {
		m._ConstrainedBox = m.File().AsDot("ConstrainedBox")
	}
	return m._ConstrainedBox
}

func (m *Material) ConstrainedLayoutBuilder() Qualifier {
	if m._ConstrainedLayoutBuilder == "" {
		m._ConstrainedLayoutBuilder = m.File().AsDot("ConstrainedLayoutBuilder")
	}
	return m._ConstrainedLayoutBuilder
}

func (m *Material) Container() Qualifier {
	if m._Container == "" {
		m._Container = m.File().AsDot("Container")
	}
	return m._Container
}

func (m *Material) ContinuousRectangleBorder() Qualifier {
	if m._ContinuousRectangleBorder == "" {
		m._ContinuousRectangleBorder = m.File().AsDot("ContinuousRectangleBorder")
	}
	return m._ContinuousRectangleBorder
}

func (m *Material) ControlsWidgetBuilder() Qualifier {
	if m._ControlsWidgetBuilder == "" {
		m._ControlsWidgetBuilder = m.File().AsDot("ControlsWidgetBuilder")
	}
	return m._ControlsWidgetBuilder
}

func (m *Material) CreatePlatformViewCallback() Qualifier {
	if m._CreatePlatformViewCallback == "" {
		m._CreatePlatformViewCallback = m.File().AsDot("CreatePlatformViewCallback")
	}
	return m._CreatePlatformViewCallback
}

func (m *Material) CreateRectTween() Qualifier {
	if m._CreateRectTween == "" {
		m._CreateRectTween = m.File().AsDot("CreateRectTween")
	}
	return m._CreateRectTween
}

func (m *Material) CrossAxisAlignment() Qualifier {
	if m._CrossAxisAlignment == "" {
		m._CrossAxisAlignment = m.File().AsDot("CrossAxisAlignment")
	}
	return m._CrossAxisAlignment
}

func (m *Material) CrossFadeState() Qualifier {
	if m._CrossFadeState == "" {
		m._CrossFadeState = m.File().AsDot("CrossFadeState")
	}
	return m._CrossFadeState
}

func (m *Material) Cubic() Qualifier {
	if m._Cubic == "" {
		m._Cubic = m.File().AsDot("Cubic")
	}
	return m._Cubic
}

func (m *Material) CupertinoPageTransitionsBuilder() Qualifier {
	if m._CupertinoPageTransitionsBuilder == "" {
		m._CupertinoPageTransitionsBuilder = m.File().AsDot("CupertinoPageTransitionsBuilder")
	}
	return m._CupertinoPageTransitionsBuilder
}

func (m *Material) Curve() Qualifier {
	if m._Curve == "" {
		m._Curve = m.File().AsDot("Curve")
	}
	return m._Curve
}

func (m *Material) CurveTween() Qualifier {
	if m._CurveTween == "" {
		m._CurveTween = m.File().AsDot("CurveTween")
	}
	return m._CurveTween
}

func (m *Material) CurvedAnimation() Qualifier {
	if m._CurvedAnimation == "" {
		m._CurvedAnimation = m.File().AsDot("CurvedAnimation")
	}
	return m._CurvedAnimation
}

func (m *Material) Curves() Qualifier {
	if m._Curves == "" {
		m._Curves = m.File().AsDot("Curves")
	}
	return m._Curves
}

func (m *Material) CustomClipper() Qualifier {
	if m._CustomClipper == "" {
		m._CustomClipper = m.File().AsDot("CustomClipper")
	}
	return m._CustomClipper
}

func (m *Material) CustomMultiChildLayout() Qualifier {
	if m._CustomMultiChildLayout == "" {
		m._CustomMultiChildLayout = m.File().AsDot("CustomMultiChildLayout")
	}
	return m._CustomMultiChildLayout
}

func (m *Material) CustomPaint() Qualifier {
	if m._CustomPaint == "" {
		m._CustomPaint = m.File().AsDot("CustomPaint")
	}
	return m._CustomPaint
}

func (m *Material) CustomPainter() Qualifier {
	if m._CustomPainter == "" {
		m._CustomPainter = m.File().AsDot("CustomPainter")
	}
	return m._CustomPainter
}

func (m *Material) CustomPainterSemantics() Qualifier {
	if m._CustomPainterSemantics == "" {
		m._CustomPainterSemantics = m.File().AsDot("CustomPainterSemantics")
	}
	return m._CustomPainterSemantics
}

func (m *Material) CustomScrollView() Qualifier {
	if m._CustomScrollView == "" {
		m._CustomScrollView = m.File().AsDot("CustomScrollView")
	}
	return m._CustomScrollView
}

func (m *Material) CustomSingleChildLayout() Qualifier {
	if m._CustomSingleChildLayout == "" {
		m._CustomSingleChildLayout = m.File().AsDot("CustomSingleChildLayout")
	}
	return m._CustomSingleChildLayout
}

func (m *Material) DataCell() Qualifier {
	if m._DataCell == "" {
		m._DataCell = m.File().AsDot("DataCell")
	}
	return m._DataCell
}

func (m *Material) DataColumn() Qualifier {
	if m._DataColumn == "" {
		m._DataColumn = m.File().AsDot("DataColumn")
	}
	return m._DataColumn
}

func (m *Material) DataColumnSortCallback() Qualifier {
	if m._DataColumnSortCallback == "" {
		m._DataColumnSortCallback = m.File().AsDot("DataColumnSortCallback")
	}
	return m._DataColumnSortCallback
}

func (m *Material) DataRow() Qualifier {
	if m._DataRow == "" {
		m._DataRow = m.File().AsDot("DataRow")
	}
	return m._DataRow
}

func (m *Material) DataTable() Qualifier {
	if m._DataTable == "" {
		m._DataTable = m.File().AsDot("DataTable")
	}
	return m._DataTable
}

func (m *Material) DataTableSource() Qualifier {
	if m._DataTableSource == "" {
		m._DataTableSource = m.File().AsDot("DataTableSource")
	}
	return m._DataTableSource
}

func (m *Material) DatePickerMode() Qualifier {
	if m._DatePickerMode == "" {
		m._DatePickerMode = m.File().AsDot("DatePickerMode")
	}
	return m._DatePickerMode
}

func (m *Material) DayPeriod() Qualifier {
	if m._DayPeriod == "" {
		m._DayPeriod = m.File().AsDot("DayPeriod")
	}
	return m._DayPeriod
}

func (m *Material) DayPicker() Qualifier {
	if m._DayPicker == "" {
		m._DayPicker = m.File().AsDot("DayPicker")
	}
	return m._DayPicker
}

func (m *Material) DebugCreator() Qualifier {
	if m._DebugCreator == "" {
		m._DebugCreator = m.File().AsDot("DebugCreator")
	}
	return m._DebugCreator
}

func (m *Material) DecoderCallback() Qualifier {
	if m._DecoderCallback == "" {
		m._DecoderCallback = m.File().AsDot("DecoderCallback")
	}
	return m._DecoderCallback
}

func (m *Material) DecoratedBox() Qualifier {
	if m._DecoratedBox == "" {
		m._DecoratedBox = m.File().AsDot("DecoratedBox")
	}
	return m._DecoratedBox
}

func (m *Material) DecoratedBoxTransition() Qualifier {
	if m._DecoratedBoxTransition == "" {
		m._DecoratedBoxTransition = m.File().AsDot("DecoratedBoxTransition")
	}
	return m._DecoratedBoxTransition
}

func (m *Material) Decoration() Qualifier {
	if m._Decoration == "" {
		m._Decoration = m.File().AsDot("Decoration")
	}
	return m._Decoration
}

func (m *Material) DecorationImage() Qualifier {
	if m._DecorationImage == "" {
		m._DecorationImage = m.File().AsDot("DecorationImage")
	}
	return m._DecorationImage
}

func (m *Material) DecorationImagePainter() Qualifier {
	if m._DecorationImagePainter == "" {
		m._DecorationImagePainter = m.File().AsDot("DecorationImagePainter")
	}
	return m._DecorationImagePainter
}

func (m *Material) DecorationPosition() Qualifier {
	if m._DecorationPosition == "" {
		m._DecorationPosition = m.File().AsDot("DecorationPosition")
	}
	return m._DecorationPosition
}

func (m *Material) DecorationTween() Qualifier {
	if m._DecorationTween == "" {
		m._DecorationTween = m.File().AsDot("DecorationTween")
	}
	return m._DecorationTween
}

func (m *Material) DefaultAssetBundle() Qualifier {
	if m._DefaultAssetBundle == "" {
		m._DefaultAssetBundle = m.File().AsDot("DefaultAssetBundle")
	}
	return m._DefaultAssetBundle
}

func (m *Material) DefaultFocusTraversal() Qualifier {
	if m._DefaultFocusTraversal == "" {
		m._DefaultFocusTraversal = m.File().AsDot("DefaultFocusTraversal")
	}
	return m._DefaultFocusTraversal
}

func (m *Material) DefaultMaterialLocalizations() Qualifier {
	if m._DefaultMaterialLocalizations == "" {
		m._DefaultMaterialLocalizations = m.File().AsDot("DefaultMaterialLocalizations")
	}
	return m._DefaultMaterialLocalizations
}

func (m *Material) DefaultShaderWarmUp() Qualifier {
	if m._DefaultShaderWarmUp == "" {
		m._DefaultShaderWarmUp = m.File().AsDot("DefaultShaderWarmUp")
	}
	return m._DefaultShaderWarmUp
}

func (m *Material) DefaultTabController() Qualifier {
	if m._DefaultTabController == "" {
		m._DefaultTabController = m.File().AsDot("DefaultTabController")
	}
	return m._DefaultTabController
}

func (m *Material) DefaultTextStyle() Qualifier {
	if m._DefaultTextStyle == "" {
		m._DefaultTextStyle = m.File().AsDot("DefaultTextStyle")
	}
	return m._DefaultTextStyle
}

func (m *Material) DefaultTextStyleTransition() Qualifier {
	if m._DefaultTextStyleTransition == "" {
		m._DefaultTextStyleTransition = m.File().AsDot("DefaultTextStyleTransition")
	}
	return m._DefaultTextStyleTransition
}

func (m *Material) DefaultWidgetsLocalizations() Qualifier {
	if m._DefaultWidgetsLocalizations == "" {
		m._DefaultWidgetsLocalizations = m.File().AsDot("DefaultWidgetsLocalizations")
	}
	return m._DefaultWidgetsLocalizations
}

func (m *Material) DeletableChipAttributes() Qualifier {
	if m._DeletableChipAttributes == "" {
		m._DeletableChipAttributes = m.File().AsDot("DeletableChipAttributes")
	}
	return m._DeletableChipAttributes
}

func (m *Material) DiagnosticLevel() Qualifier {
	if m._DiagnosticLevel == "" {
		m._DiagnosticLevel = m.File().AsDot("DiagnosticLevel")
	}
	return m._DiagnosticLevel
}

func (m *Material) DiagnosticsNode() Qualifier {
	if m._DiagnosticsNode == "" {
		m._DiagnosticsNode = m.File().AsDot("DiagnosticsNode")
	}
	return m._DiagnosticsNode
}

func (m *Material) Dialog() Qualifier {
	if m._Dialog == "" {
		m._Dialog = m.File().AsDot("Dialog")
	}
	return m._Dialog
}

func (m *Material) DialogTheme() Qualifier {
	if m._DialogTheme == "" {
		m._DialogTheme = m.File().AsDot("DialogTheme")
	}
	return m._DialogTheme
}

func (m *Material) DirectionalFocusAction() Qualifier {
	if m._DirectionalFocusAction == "" {
		m._DirectionalFocusAction = m.File().AsDot("DirectionalFocusAction")
	}
	return m._DirectionalFocusAction
}

func (m *Material) DirectionalFocusIntent() Qualifier {
	if m._DirectionalFocusIntent == "" {
		m._DirectionalFocusIntent = m.File().AsDot("DirectionalFocusIntent")
	}
	return m._DirectionalFocusIntent
}

func (m *Material) DirectionalFocusTraversalPolicyMixin() Qualifier {
	if m._DirectionalFocusTraversalPolicyMixin == "" {
		m._DirectionalFocusTraversalPolicyMixin = m.File().AsDot("DirectionalFocusTraversalPolicyMixin")
	}
	return m._DirectionalFocusTraversalPolicyMixin
}

func (m *Material) Directionality() Qualifier {
	if m._Directionality == "" {
		m._Directionality = m.File().AsDot("Directionality")
	}
	return m._Directionality
}

func (m *Material) DisabledChipAttributes() Qualifier {
	if m._DisabledChipAttributes == "" {
		m._DisabledChipAttributes = m.File().AsDot("DisabledChipAttributes")
	}
	return m._DisabledChipAttributes
}

func (m *Material) DismissDirection() Qualifier {
	if m._DismissDirection == "" {
		m._DismissDirection = m.File().AsDot("DismissDirection")
	}
	return m._DismissDirection
}

func (m *Material) DismissDirectionCallback() Qualifier {
	if m._DismissDirectionCallback == "" {
		m._DismissDirectionCallback = m.File().AsDot("DismissDirectionCallback")
	}
	return m._DismissDirectionCallback
}

func (m *Material) Dismissible() Qualifier {
	if m._Dismissible == "" {
		m._Dismissible = m.File().AsDot("Dismissible")
	}
	return m._Dismissible
}

func (m *Material) Divider() Qualifier {
	if m._Divider == "" {
		m._Divider = m.File().AsDot("Divider")
	}
	return m._Divider
}

func (m *Material) DividerTheme() Qualifier {
	if m._DividerTheme == "" {
		m._DividerTheme = m.File().AsDot("DividerTheme")
	}
	return m._DividerTheme
}

func (m *Material) DividerThemeData() Qualifier {
	if m._DividerThemeData == "" {
		m._DividerThemeData = m.File().AsDot("DividerThemeData")
	}
	return m._DividerThemeData
}

func (m *Material) DoNothingAction() Qualifier {
	if m._DoNothingAction == "" {
		m._DoNothingAction = m.File().AsDot("DoNothingAction")
	}
	return m._DoNothingAction
}

func (m *Material) DragAnchor() Qualifier {
	if m._DragAnchor == "" {
		m._DragAnchor = m.File().AsDot("DragAnchor")
	}
	return m._DragAnchor
}

func (m *Material) DragDownDetails() Qualifier {
	if m._DragDownDetails == "" {
		m._DragDownDetails = m.File().AsDot("DragDownDetails")
	}
	return m._DragDownDetails
}

func (m *Material) DragEndCallback() Qualifier {
	if m._DragEndCallback == "" {
		m._DragEndCallback = m.File().AsDot("DragEndCallback")
	}
	return m._DragEndCallback
}

func (m *Material) DragEndDetails() Qualifier {
	if m._DragEndDetails == "" {
		m._DragEndDetails = m.File().AsDot("DragEndDetails")
	}
	return m._DragEndDetails
}

func (m *Material) DragScrollActivity() Qualifier {
	if m._DragScrollActivity == "" {
		m._DragScrollActivity = m.File().AsDot("DragScrollActivity")
	}
	return m._DragScrollActivity
}

func (m *Material) DragSelectionUpdateCallback() Qualifier {
	if m._DragSelectionUpdateCallback == "" {
		m._DragSelectionUpdateCallback = m.File().AsDot("DragSelectionUpdateCallback")
	}
	return m._DragSelectionUpdateCallback
}

func (m *Material) DragStartDetails() Qualifier {
	if m._DragStartDetails == "" {
		m._DragStartDetails = m.File().AsDot("DragStartDetails")
	}
	return m._DragStartDetails
}

func (m *Material) DragTarget() Qualifier {
	if m._DragTarget == "" {
		m._DragTarget = m.File().AsDot("DragTarget")
	}
	return m._DragTarget
}

func (m *Material) DragTargetAccept() Qualifier {
	if m._DragTargetAccept == "" {
		m._DragTargetAccept = m.File().AsDot("DragTargetAccept")
	}
	return m._DragTargetAccept
}

func (m *Material) DragTargetBuilder() Qualifier {
	if m._DragTargetBuilder == "" {
		m._DragTargetBuilder = m.File().AsDot("DragTargetBuilder")
	}
	return m._DragTargetBuilder
}

func (m *Material) DragTargetLeave() Qualifier {
	if m._DragTargetLeave == "" {
		m._DragTargetLeave = m.File().AsDot("DragTargetLeave")
	}
	return m._DragTargetLeave
}

func (m *Material) DragTargetWillAccept() Qualifier {
	if m._DragTargetWillAccept == "" {
		m._DragTargetWillAccept = m.File().AsDot("DragTargetWillAccept")
	}
	return m._DragTargetWillAccept
}

func (m *Material) DragUpdateDetails() Qualifier {
	if m._DragUpdateDetails == "" {
		m._DragUpdateDetails = m.File().AsDot("DragUpdateDetails")
	}
	return m._DragUpdateDetails
}

func (m *Material) Draggable() Qualifier {
	if m._Draggable == "" {
		m._Draggable = m.File().AsDot("Draggable")
	}
	return m._Draggable
}

func (m *Material) DraggableCanceledCallback() Qualifier {
	if m._DraggableCanceledCallback == "" {
		m._DraggableCanceledCallback = m.File().AsDot("DraggableCanceledCallback")
	}
	return m._DraggableCanceledCallback
}

func (m *Material) DraggableDetails() Qualifier {
	if m._DraggableDetails == "" {
		m._DraggableDetails = m.File().AsDot("DraggableDetails")
	}
	return m._DraggableDetails
}

func (m *Material) DraggableScrollableActuator() Qualifier {
	if m._DraggableScrollableActuator == "" {
		m._DraggableScrollableActuator = m.File().AsDot("DraggableScrollableActuator")
	}
	return m._DraggableScrollableActuator
}

func (m *Material) DraggableScrollableNotification() Qualifier {
	if m._DraggableScrollableNotification == "" {
		m._DraggableScrollableNotification = m.File().AsDot("DraggableScrollableNotification")
	}
	return m._DraggableScrollableNotification
}

func (m *Material) DraggableScrollableSheet() Qualifier {
	if m._DraggableScrollableSheet == "" {
		m._DraggableScrollableSheet = m.File().AsDot("DraggableScrollableSheet")
	}
	return m._DraggableScrollableSheet
}

func (m *Material) Drawer() Qualifier {
	if m._Drawer == "" {
		m._Drawer = m.File().AsDot("Drawer")
	}
	return m._Drawer
}

func (m *Material) DrawerAlignment() Qualifier {
	if m._DrawerAlignment == "" {
		m._DrawerAlignment = m.File().AsDot("DrawerAlignment")
	}
	return m._DrawerAlignment
}

func (m *Material) DrawerCallback() Qualifier {
	if m._DrawerCallback == "" {
		m._DrawerCallback = m.File().AsDot("DrawerCallback")
	}
	return m._DrawerCallback
}

func (m *Material) DrawerController() Qualifier {
	if m._DrawerController == "" {
		m._DrawerController = m.File().AsDot("DrawerController")
	}
	return m._DrawerController
}

func (m *Material) DrawerControllerState() Qualifier {
	if m._DrawerControllerState == "" {
		m._DrawerControllerState = m.File().AsDot("DrawerControllerState")
	}
	return m._DrawerControllerState
}

func (m *Material) DrawerHeader() Qualifier {
	if m._DrawerHeader == "" {
		m._DrawerHeader = m.File().AsDot("DrawerHeader")
	}
	return m._DrawerHeader
}

func (m *Material) DrivenScrollActivity() Qualifier {
	if m._DrivenScrollActivity == "" {
		m._DrivenScrollActivity = m.File().AsDot("DrivenScrollActivity")
	}
	return m._DrivenScrollActivity
}

func (m *Material) DropdownButton() Qualifier {
	if m._DropdownButton == "" {
		m._DropdownButton = m.File().AsDot("DropdownButton")
	}
	return m._DropdownButton
}

func (m *Material) DropdownButtonBuilder() Qualifier {
	if m._DropdownButtonBuilder == "" {
		m._DropdownButtonBuilder = m.File().AsDot("DropdownButtonBuilder")
	}
	return m._DropdownButtonBuilder
}

func (m *Material) DropdownButtonFormField() Qualifier {
	if m._DropdownButtonFormField == "" {
		m._DropdownButtonFormField = m.File().AsDot("DropdownButtonFormField")
	}
	return m._DropdownButtonFormField
}

func (m *Material) DropdownButtonHideUnderline() Qualifier {
	if m._DropdownButtonHideUnderline == "" {
		m._DropdownButtonHideUnderline = m.File().AsDot("DropdownButtonHideUnderline")
	}
	return m._DropdownButtonHideUnderline
}

func (m *Material) DropdownMenuItem() Qualifier {
	if m._DropdownMenuItem == "" {
		m._DropdownMenuItem = m.File().AsDot("DropdownMenuItem")
	}
	return m._DropdownMenuItem
}

func (m *Material) EdgeInsets() Qualifier {
	if m._EdgeInsets == "" {
		m._EdgeInsets = m.File().AsDot("EdgeInsets")
	}
	return m._EdgeInsets
}

func (m *Material) EdgeInsetsDirectional() Qualifier {
	if m._EdgeInsetsDirectional == "" {
		m._EdgeInsetsDirectional = m.File().AsDot("EdgeInsetsDirectional")
	}
	return m._EdgeInsetsDirectional
}

func (m *Material) EdgeInsetsGeometry() Qualifier {
	if m._EdgeInsetsGeometry == "" {
		m._EdgeInsetsGeometry = m.File().AsDot("EdgeInsetsGeometry")
	}
	return m._EdgeInsetsGeometry
}

func (m *Material) EdgeInsetsGeometryTween() Qualifier {
	if m._EdgeInsetsGeometryTween == "" {
		m._EdgeInsetsGeometryTween = m.File().AsDot("EdgeInsetsGeometryTween")
	}
	return m._EdgeInsetsGeometryTween
}

func (m *Material) EdgeInsetsTween() Qualifier {
	if m._EdgeInsetsTween == "" {
		m._EdgeInsetsTween = m.File().AsDot("EdgeInsetsTween")
	}
	return m._EdgeInsetsTween
}

func (m *Material) EditableText() Qualifier {
	if m._EditableText == "" {
		m._EditableText = m.File().AsDot("EditableText")
	}
	return m._EditableText
}

func (m *Material) EditableTextState() Qualifier {
	if m._EditableTextState == "" {
		m._EditableTextState = m.File().AsDot("EditableTextState")
	}
	return m._EditableTextState
}

func (m *Material) ElasticInCurve() Qualifier {
	if m._ElasticInCurve == "" {
		m._ElasticInCurve = m.File().AsDot("ElasticInCurve")
	}
	return m._ElasticInCurve
}

func (m *Material) ElasticInOutCurve() Qualifier {
	if m._ElasticInOutCurve == "" {
		m._ElasticInOutCurve = m.File().AsDot("ElasticInOutCurve")
	}
	return m._ElasticInOutCurve
}

func (m *Material) ElasticOutCurve() Qualifier {
	if m._ElasticOutCurve == "" {
		m._ElasticOutCurve = m.File().AsDot("ElasticOutCurve")
	}
	return m._ElasticOutCurve
}

func (m *Material) Element() Qualifier {
	if m._Element == "" {
		m._Element = m.File().AsDot("Element")
	}
	return m._Element
}

func (m *Material) ElementVisitor() Qualifier {
	if m._ElementVisitor == "" {
		m._ElementVisitor = m.File().AsDot("ElementVisitor")
	}
	return m._ElementVisitor
}

func (m *Material) ErrorDescription() Qualifier {
	if m._ErrorDescription == "" {
		m._ErrorDescription = m.File().AsDot("ErrorDescription")
	}
	return m._ErrorDescription
}

func (m *Material) ErrorHint() Qualifier {
	if m._ErrorHint == "" {
		m._ErrorHint = m.File().AsDot("ErrorHint")
	}
	return m._ErrorHint
}

func (m *Material) ErrorSummary() Qualifier {
	if m._ErrorSummary == "" {
		m._ErrorSummary = m.File().AsDot("ErrorSummary")
	}
	return m._ErrorSummary
}

func (m *Material) ErrorWidget() Qualifier {
	if m._ErrorWidget == "" {
		m._ErrorWidget = m.File().AsDot("ErrorWidget")
	}
	return m._ErrorWidget
}

func (m *Material) ErrorWidgetBuilder() Qualifier {
	if m._ErrorWidgetBuilder == "" {
		m._ErrorWidgetBuilder = m.File().AsDot("ErrorWidgetBuilder")
	}
	return m._ErrorWidgetBuilder
}

func (m *Material) ExactAssetImage() Qualifier {
	if m._ExactAssetImage == "" {
		m._ExactAssetImage = m.File().AsDot("ExactAssetImage")
	}
	return m._ExactAssetImage
}

func (m *Material) ExcludeSemantics() Qualifier {
	if m._ExcludeSemantics == "" {
		m._ExcludeSemantics = m.File().AsDot("ExcludeSemantics")
	}
	return m._ExcludeSemantics
}

func (m *Material) ExpandIcon() Qualifier {
	if m._ExpandIcon == "" {
		m._ExpandIcon = m.File().AsDot("ExpandIcon")
	}
	return m._ExpandIcon
}

func (m *Material) Expanded() Qualifier {
	if m._Expanded == "" {
		m._Expanded = m.File().AsDot("Expanded")
	}
	return m._Expanded
}

func (m *Material) ExpansionPanel() Qualifier {
	if m._ExpansionPanel == "" {
		m._ExpansionPanel = m.File().AsDot("ExpansionPanel")
	}
	return m._ExpansionPanel
}

func (m *Material) ExpansionPanelCallback() Qualifier {
	if m._ExpansionPanelCallback == "" {
		m._ExpansionPanelCallback = m.File().AsDot("ExpansionPanelCallback")
	}
	return m._ExpansionPanelCallback
}

func (m *Material) ExpansionPanelHeaderBuilder() Qualifier {
	if m._ExpansionPanelHeaderBuilder == "" {
		m._ExpansionPanelHeaderBuilder = m.File().AsDot("ExpansionPanelHeaderBuilder")
	}
	return m._ExpansionPanelHeaderBuilder
}

func (m *Material) ExpansionPanelList() Qualifier {
	if m._ExpansionPanelList == "" {
		m._ExpansionPanelList = m.File().AsDot("ExpansionPanelList")
	}
	return m._ExpansionPanelList
}

func (m *Material) ExpansionPanelRadio() Qualifier {
	if m._ExpansionPanelRadio == "" {
		m._ExpansionPanelRadio = m.File().AsDot("ExpansionPanelRadio")
	}
	return m._ExpansionPanelRadio
}

func (m *Material) ExpansionTile() Qualifier {
	if m._ExpansionTile == "" {
		m._ExpansionTile = m.File().AsDot("ExpansionTile")
	}
	return m._ExpansionTile
}

func (m *Material) FadeInImage() Qualifier {
	if m._FadeInImage == "" {
		m._FadeInImage = m.File().AsDot("FadeInImage")
	}
	return m._FadeInImage
}

func (m *Material) FadeTransition() Qualifier {
	if m._FadeTransition == "" {
		m._FadeTransition = m.File().AsDot("FadeTransition")
	}
	return m._FadeTransition
}

func (m *Material) FadeUpwardsPageTransitionsBuilder() Qualifier {
	if m._FadeUpwardsPageTransitionsBuilder == "" {
		m._FadeUpwardsPageTransitionsBuilder = m.File().AsDot("FadeUpwardsPageTransitionsBuilder")
	}
	return m._FadeUpwardsPageTransitionsBuilder
}

func (m *Material) Feedback() Qualifier {
	if m._Feedback == "" {
		m._Feedback = m.File().AsDot("Feedback")
	}
	return m._Feedback
}

func (m *Material) FileImage() Qualifier {
	if m._FileImage == "" {
		m._FileImage = m.File().AsDot("FileImage")
	}
	return m._FileImage
}

func (m *Material) FilterChip() Qualifier {
	if m._FilterChip == "" {
		m._FilterChip = m.File().AsDot("FilterChip")
	}
	return m._FilterChip
}

func (m *Material) FilterQuality() Qualifier {
	if m._FilterQuality == "" {
		m._FilterQuality = m.File().AsDot("FilterQuality")
	}
	return m._FilterQuality
}

func (m *Material) FittedBox() Qualifier {
	if m._FittedBox == "" {
		m._FittedBox = m.File().AsDot("FittedBox")
	}
	return m._FittedBox
}

func (m *Material) FittedSizes() Qualifier {
	if m._FittedSizes == "" {
		m._FittedSizes = m.File().AsDot("FittedSizes")
	}
	return m._FittedSizes
}

func (m *Material) FixedColumnWidth() Qualifier {
	if m._FixedColumnWidth == "" {
		m._FixedColumnWidth = m.File().AsDot("FixedColumnWidth")
	}
	return m._FixedColumnWidth
}

func (m *Material) FixedExtentMetrics() Qualifier {
	if m._FixedExtentMetrics == "" {
		m._FixedExtentMetrics = m.File().AsDot("FixedExtentMetrics")
	}
	return m._FixedExtentMetrics
}

func (m *Material) FixedExtentScrollController() Qualifier {
	if m._FixedExtentScrollController == "" {
		m._FixedExtentScrollController = m.File().AsDot("FixedExtentScrollController")
	}
	return m._FixedExtentScrollController
}

func (m *Material) FixedExtentScrollPhysics() Qualifier {
	if m._FixedExtentScrollPhysics == "" {
		m._FixedExtentScrollPhysics = m.File().AsDot("FixedExtentScrollPhysics")
	}
	return m._FixedExtentScrollPhysics
}

func (m *Material) FixedScrollMetrics() Qualifier {
	if m._FixedScrollMetrics == "" {
		m._FixedScrollMetrics = m.File().AsDot("FixedScrollMetrics")
	}
	return m._FixedScrollMetrics
}

func (m *Material) FlatButton() Qualifier {
	if m._FlatButton == "" {
		m._FlatButton = m.File().AsDot("FlatButton")
	}
	return m._FlatButton
}

func (m *Material) Flex() Qualifier {
	if m._Flex == "" {
		m._Flex = m.File().AsDot("Flex")
	}
	return m._Flex
}

func (m *Material) FlexColumnWidth() Qualifier {
	if m._FlexColumnWidth == "" {
		m._FlexColumnWidth = m.File().AsDot("FlexColumnWidth")
	}
	return m._FlexColumnWidth
}

func (m *Material) FlexFit() Qualifier {
	if m._FlexFit == "" {
		m._FlexFit = m.File().AsDot("FlexFit")
	}
	return m._FlexFit
}

func (m *Material) Flexible() Qualifier {
	if m._Flexible == "" {
		m._Flexible = m.File().AsDot("Flexible")
	}
	return m._Flexible
}

func (m *Material) FlexibleSpaceBar() Qualifier {
	if m._FlexibleSpaceBar == "" {
		m._FlexibleSpaceBar = m.File().AsDot("FlexibleSpaceBar")
	}
	return m._FlexibleSpaceBar
}

func (m *Material) FlexibleSpaceBarSettings() Qualifier {
	if m._FlexibleSpaceBarSettings == "" {
		m._FlexibleSpaceBarSettings = m.File().AsDot("FlexibleSpaceBarSettings")
	}
	return m._FlexibleSpaceBarSettings
}

func (m *Material) FlippedCurve() Qualifier {
	if m._FlippedCurve == "" {
		m._FlippedCurve = m.File().AsDot("FlippedCurve")
	}
	return m._FlippedCurve
}

func (m *Material) FlippedTweenSequence() Qualifier {
	if m._FlippedTweenSequence == "" {
		m._FlippedTweenSequence = m.File().AsDot("FlippedTweenSequence")
	}
	return m._FlippedTweenSequence
}

func (m *Material) FloatingActionButton() Qualifier {
	if m._FloatingActionButton == "" {
		m._FloatingActionButton = m.File().AsDot("FloatingActionButton")
	}
	return m._FloatingActionButton
}

func (m *Material) FloatingActionButtonAnimator() Qualifier {
	if m._FloatingActionButtonAnimator == "" {
		m._FloatingActionButtonAnimator = m.File().AsDot("FloatingActionButtonAnimator")
	}
	return m._FloatingActionButtonAnimator
}

func (m *Material) FloatingActionButtonLocation() Qualifier {
	if m._FloatingActionButtonLocation == "" {
		m._FloatingActionButtonLocation = m.File().AsDot("FloatingActionButtonLocation")
	}
	return m._FloatingActionButtonLocation
}

func (m *Material) FloatingActionButtonThemeData() Qualifier {
	if m._FloatingActionButtonThemeData == "" {
		m._FloatingActionButtonThemeData = m.File().AsDot("FloatingActionButtonThemeData")
	}
	return m._FloatingActionButtonThemeData
}

func (m *Material) Flow() Qualifier {
	if m._Flow == "" {
		m._Flow = m.File().AsDot("Flow")
	}
	return m._Flow
}

func (m *Material) FlowDelegate() Qualifier {
	if m._FlowDelegate == "" {
		m._FlowDelegate = m.File().AsDot("FlowDelegate")
	}
	return m._FlowDelegate
}

func (m *Material) FlowPaintingContext() Qualifier {
	if m._FlowPaintingContext == "" {
		m._FlowPaintingContext = m.File().AsDot("FlowPaintingContext")
	}
	return m._FlowPaintingContext
}

func (m *Material) FlutterError() Qualifier {
	if m._FlutterError == "" {
		m._FlutterError = m.File().AsDot("FlutterError")
	}
	return m._FlutterError
}

func (m *Material) FlutterErrorDetails() Qualifier {
	if m._FlutterErrorDetails == "" {
		m._FlutterErrorDetails = m.File().AsDot("FlutterErrorDetails")
	}
	return m._FlutterErrorDetails
}

func (m *Material) FlutterLogo() Qualifier {
	if m._FlutterLogo == "" {
		m._FlutterLogo = m.File().AsDot("FlutterLogo")
	}
	return m._FlutterLogo
}

func (m *Material) FlutterLogoDecoration() Qualifier {
	if m._FlutterLogoDecoration == "" {
		m._FlutterLogoDecoration = m.File().AsDot("FlutterLogoDecoration")
	}
	return m._FlutterLogoDecoration
}

func (m *Material) FlutterLogoStyle() Qualifier {
	if m._FlutterLogoStyle == "" {
		m._FlutterLogoStyle = m.File().AsDot("FlutterLogoStyle")
	}
	return m._FlutterLogoStyle
}

func (m *Material) Focus() Qualifier {
	if m._Focus == "" {
		m._Focus = m.File().AsDot("Focus")
	}
	return m._Focus
}

func (m *Material) FocusAttachment() Qualifier {
	if m._FocusAttachment == "" {
		m._FocusAttachment = m.File().AsDot("FocusAttachment")
	}
	return m._FocusAttachment
}

func (m *Material) FocusHighlightMode() Qualifier {
	if m._FocusHighlightMode == "" {
		m._FocusHighlightMode = m.File().AsDot("FocusHighlightMode")
	}
	return m._FocusHighlightMode
}

func (m *Material) FocusHighlightStrategy() Qualifier {
	if m._FocusHighlightStrategy == "" {
		m._FocusHighlightStrategy = m.File().AsDot("FocusHighlightStrategy")
	}
	return m._FocusHighlightStrategy
}

func (m *Material) FocusManager() Qualifier {
	if m._FocusManager == "" {
		m._FocusManager = m.File().AsDot("FocusManager")
	}
	return m._FocusManager
}

func (m *Material) FocusNode() Qualifier {
	if m._FocusNode == "" {
		m._FocusNode = m.File().AsDot("FocusNode")
	}
	return m._FocusNode
}

func (m *Material) FocusOnKeyCallback() Qualifier {
	if m._FocusOnKeyCallback == "" {
		m._FocusOnKeyCallback = m.File().AsDot("FocusOnKeyCallback")
	}
	return m._FocusOnKeyCallback
}

func (m *Material) FocusScope() Qualifier {
	if m._FocusScope == "" {
		m._FocusScope = m.File().AsDot("FocusScope")
	}
	return m._FocusScope
}

func (m *Material) FocusScopeNode() Qualifier {
	if m._FocusScopeNode == "" {
		m._FocusScopeNode = m.File().AsDot("FocusScopeNode")
	}
	return m._FocusScopeNode
}

func (m *Material) FocusTraversalPolicy() Qualifier {
	if m._FocusTraversalPolicy == "" {
		m._FocusTraversalPolicy = m.File().AsDot("FocusTraversalPolicy")
	}
	return m._FocusTraversalPolicy
}

func (m *Material) FontStyle() Qualifier {
	if m._FontStyle == "" {
		m._FontStyle = m.File().AsDot("FontStyle")
	}
	return m._FontStyle
}

func (m *Material) FontWeight() Qualifier {
	if m._FontWeight == "" {
		m._FontWeight = m.File().AsDot("FontWeight")
	}
	return m._FontWeight
}

func (m *Material) ForcePressDetails() Qualifier {
	if m._ForcePressDetails == "" {
		m._ForcePressDetails = m.File().AsDot("ForcePressDetails")
	}
	return m._ForcePressDetails
}

func (m *Material) Form() Qualifier {
	if m._Form == "" {
		m._Form = m.File().AsDot("Form")
	}
	return m._Form
}

func (m *Material) FormField() Qualifier {
	if m._FormField == "" {
		m._FormField = m.File().AsDot("FormField")
	}
	return m._FormField
}

func (m *Material) FormFieldBuilder() Qualifier {
	if m._FormFieldBuilder == "" {
		m._FormFieldBuilder = m.File().AsDot("FormFieldBuilder")
	}
	return m._FormFieldBuilder
}

func (m *Material) FormFieldSetter() Qualifier {
	if m._FormFieldSetter == "" {
		m._FormFieldSetter = m.File().AsDot("FormFieldSetter")
	}
	return m._FormFieldSetter
}

func (m *Material) FormFieldState() Qualifier {
	if m._FormFieldState == "" {
		m._FormFieldState = m.File().AsDot("FormFieldState")
	}
	return m._FormFieldState
}

func (m *Material) FormFieldValidator() Qualifier {
	if m._FormFieldValidator == "" {
		m._FormFieldValidator = m.File().AsDot("FormFieldValidator")
	}
	return m._FormFieldValidator
}

func (m *Material) FormState() Qualifier {
	if m._FormState == "" {
		m._FormState = m.File().AsDot("FormState")
	}
	return m._FormState
}

func (m *Material) FractionColumnWidth() Qualifier {
	if m._FractionColumnWidth == "" {
		m._FractionColumnWidth = m.File().AsDot("FractionColumnWidth")
	}
	return m._FractionColumnWidth
}

func (m *Material) FractionalOffset() Qualifier {
	if m._FractionalOffset == "" {
		m._FractionalOffset = m.File().AsDot("FractionalOffset")
	}
	return m._FractionalOffset
}

func (m *Material) FractionalOffsetTween() Qualifier {
	if m._FractionalOffsetTween == "" {
		m._FractionalOffsetTween = m.File().AsDot("FractionalOffsetTween")
	}
	return m._FractionalOffsetTween
}

func (m *Material) FractionalTranslation() Qualifier {
	if m._FractionalTranslation == "" {
		m._FractionalTranslation = m.File().AsDot("FractionalTranslation")
	}
	return m._FractionalTranslation
}

func (m *Material) FractionallySizedBox() Qualifier {
	if m._FractionallySizedBox == "" {
		m._FractionallySizedBox = m.File().AsDot("FractionallySizedBox")
	}
	return m._FractionallySizedBox
}

func (m *Material) FutureBuilder() Qualifier {
	if m._FutureBuilder == "" {
		m._FutureBuilder = m.File().AsDot("FutureBuilder")
	}
	return m._FutureBuilder
}

func (m *Material) GenerateAppTitle() Qualifier {
	if m._GenerateAppTitle == "" {
		m._GenerateAppTitle = m.File().AsDot("GenerateAppTitle")
	}
	return m._GenerateAppTitle
}

func (m *Material) GestureDetector() Qualifier {
	if m._GestureDetector == "" {
		m._GestureDetector = m.File().AsDot("GestureDetector")
	}
	return m._GestureDetector
}

func (m *Material) GestureDragCancelCallback() Qualifier {
	if m._GestureDragCancelCallback == "" {
		m._GestureDragCancelCallback = m.File().AsDot("GestureDragCancelCallback")
	}
	return m._GestureDragCancelCallback
}

func (m *Material) GestureDragDownCallback() Qualifier {
	if m._GestureDragDownCallback == "" {
		m._GestureDragDownCallback = m.File().AsDot("GestureDragDownCallback")
	}
	return m._GestureDragDownCallback
}

func (m *Material) GestureDragEndCallback() Qualifier {
	if m._GestureDragEndCallback == "" {
		m._GestureDragEndCallback = m.File().AsDot("GestureDragEndCallback")
	}
	return m._GestureDragEndCallback
}

func (m *Material) GestureDragStartCallback() Qualifier {
	if m._GestureDragStartCallback == "" {
		m._GestureDragStartCallback = m.File().AsDot("GestureDragStartCallback")
	}
	return m._GestureDragStartCallback
}

func (m *Material) GestureDragUpdateCallback() Qualifier {
	if m._GestureDragUpdateCallback == "" {
		m._GestureDragUpdateCallback = m.File().AsDot("GestureDragUpdateCallback")
	}
	return m._GestureDragUpdateCallback
}

func (m *Material) GestureForcePressEndCallback() Qualifier {
	if m._GestureForcePressEndCallback == "" {
		m._GestureForcePressEndCallback = m.File().AsDot("GestureForcePressEndCallback")
	}
	return m._GestureForcePressEndCallback
}

func (m *Material) GestureForcePressPeakCallback() Qualifier {
	if m._GestureForcePressPeakCallback == "" {
		m._GestureForcePressPeakCallback = m.File().AsDot("GestureForcePressPeakCallback")
	}
	return m._GestureForcePressPeakCallback
}

func (m *Material) GestureForcePressStartCallback() Qualifier {
	if m._GestureForcePressStartCallback == "" {
		m._GestureForcePressStartCallback = m.File().AsDot("GestureForcePressStartCallback")
	}
	return m._GestureForcePressStartCallback
}

func (m *Material) GestureForcePressUpdateCallback() Qualifier {
	if m._GestureForcePressUpdateCallback == "" {
		m._GestureForcePressUpdateCallback = m.File().AsDot("GestureForcePressUpdateCallback")
	}
	return m._GestureForcePressUpdateCallback
}

func (m *Material) GestureLongPressCallback() Qualifier {
	if m._GestureLongPressCallback == "" {
		m._GestureLongPressCallback = m.File().AsDot("GestureLongPressCallback")
	}
	return m._GestureLongPressCallback
}

func (m *Material) GestureLongPressEndCallback() Qualifier {
	if m._GestureLongPressEndCallback == "" {
		m._GestureLongPressEndCallback = m.File().AsDot("GestureLongPressEndCallback")
	}
	return m._GestureLongPressEndCallback
}

func (m *Material) GestureLongPressMoveUpdateCallback() Qualifier {
	if m._GestureLongPressMoveUpdateCallback == "" {
		m._GestureLongPressMoveUpdateCallback = m.File().AsDot("GestureLongPressMoveUpdateCallback")
	}
	return m._GestureLongPressMoveUpdateCallback
}

func (m *Material) GestureLongPressStartCallback() Qualifier {
	if m._GestureLongPressStartCallback == "" {
		m._GestureLongPressStartCallback = m.File().AsDot("GestureLongPressStartCallback")
	}
	return m._GestureLongPressStartCallback
}

func (m *Material) GestureLongPressUpCallback() Qualifier {
	if m._GestureLongPressUpCallback == "" {
		m._GestureLongPressUpCallback = m.File().AsDot("GestureLongPressUpCallback")
	}
	return m._GestureLongPressUpCallback
}

func (m *Material) GestureRecognizerFactory() Qualifier {
	if m._GestureRecognizerFactory == "" {
		m._GestureRecognizerFactory = m.File().AsDot("GestureRecognizerFactory")
	}
	return m._GestureRecognizerFactory
}

func (m *Material) GestureRecognizerFactoryConstructor() Qualifier {
	if m._GestureRecognizerFactoryConstructor == "" {
		m._GestureRecognizerFactoryConstructor = m.File().AsDot("GestureRecognizerFactoryConstructor")
	}
	return m._GestureRecognizerFactoryConstructor
}

func (m *Material) GestureRecognizerFactoryInitializer() Qualifier {
	if m._GestureRecognizerFactoryInitializer == "" {
		m._GestureRecognizerFactoryInitializer = m.File().AsDot("GestureRecognizerFactoryInitializer")
	}
	return m._GestureRecognizerFactoryInitializer
}

func (m *Material) GestureRecognizerFactoryWithHandlers() Qualifier {
	if m._GestureRecognizerFactoryWithHandlers == "" {
		m._GestureRecognizerFactoryWithHandlers = m.File().AsDot("GestureRecognizerFactoryWithHandlers")
	}
	return m._GestureRecognizerFactoryWithHandlers
}

func (m *Material) GestureScaleEndCallback() Qualifier {
	if m._GestureScaleEndCallback == "" {
		m._GestureScaleEndCallback = m.File().AsDot("GestureScaleEndCallback")
	}
	return m._GestureScaleEndCallback
}

func (m *Material) GestureScaleStartCallback() Qualifier {
	if m._GestureScaleStartCallback == "" {
		m._GestureScaleStartCallback = m.File().AsDot("GestureScaleStartCallback")
	}
	return m._GestureScaleStartCallback
}

func (m *Material) GestureScaleUpdateCallback() Qualifier {
	if m._GestureScaleUpdateCallback == "" {
		m._GestureScaleUpdateCallback = m.File().AsDot("GestureScaleUpdateCallback")
	}
	return m._GestureScaleUpdateCallback
}

func (m *Material) GestureTapCallback() Qualifier {
	if m._GestureTapCallback == "" {
		m._GestureTapCallback = m.File().AsDot("GestureTapCallback")
	}
	return m._GestureTapCallback
}

func (m *Material) GestureTapCancelCallback() Qualifier {
	if m._GestureTapCancelCallback == "" {
		m._GestureTapCancelCallback = m.File().AsDot("GestureTapCancelCallback")
	}
	return m._GestureTapCancelCallback
}

func (m *Material) GestureTapDownCallback() Qualifier {
	if m._GestureTapDownCallback == "" {
		m._GestureTapDownCallback = m.File().AsDot("GestureTapDownCallback")
	}
	return m._GestureTapDownCallback
}

func (m *Material) GestureTapUpCallback() Qualifier {
	if m._GestureTapUpCallback == "" {
		m._GestureTapUpCallback = m.File().AsDot("GestureTapUpCallback")
	}
	return m._GestureTapUpCallback
}

func (m *Material) GlobalKey() Qualifier {
	if m._GlobalKey == "" {
		m._GlobalKey = m.File().AsDot("GlobalKey")
	}
	return m._GlobalKey
}

func (m *Material) GlobalObjectKey() Qualifier {
	if m._GlobalObjectKey == "" {
		m._GlobalObjectKey = m.File().AsDot("GlobalObjectKey")
	}
	return m._GlobalObjectKey
}

func (m *Material) GlowingOverscrollIndicator() Qualifier {
	if m._GlowingOverscrollIndicator == "" {
		m._GlowingOverscrollIndicator = m.File().AsDot("GlowingOverscrollIndicator")
	}
	return m._GlowingOverscrollIndicator
}

func (m *Material) Gradient() Qualifier {
	if m._Gradient == "" {
		m._Gradient = m.File().AsDot("Gradient")
	}
	return m._Gradient
}

func (m *Material) GradientRotation() Qualifier {
	if m._GradientRotation == "" {
		m._GradientRotation = m.File().AsDot("GradientRotation")
	}
	return m._GradientRotation
}

func (m *Material) GradientTransform() Qualifier {
	if m._GradientTransform == "" {
		m._GradientTransform = m.File().AsDot("GradientTransform")
	}
	return m._GradientTransform
}

func (m *Material) GridPaper() Qualifier {
	if m._GridPaper == "" {
		m._GridPaper = m.File().AsDot("GridPaper")
	}
	return m._GridPaper
}

func (m *Material) GridTile() Qualifier {
	if m._GridTile == "" {
		m._GridTile = m.File().AsDot("GridTile")
	}
	return m._GridTile
}

func (m *Material) GridTileBar() Qualifier {
	if m._GridTileBar == "" {
		m._GridTileBar = m.File().AsDot("GridTileBar")
	}
	return m._GridTileBar
}

func (m *Material) GridView() Qualifier {
	if m._GridView == "" {
		m._GridView = m.File().AsDot("GridView")
	}
	return m._GridView
}

func (m *Material) GrowthDirection() Qualifier {
	if m._GrowthDirection == "" {
		m._GrowthDirection = m.File().AsDot("GrowthDirection")
	}
	return m._GrowthDirection
}

func (m *Material) HSLColor() Qualifier {
	if m._HSLColor == "" {
		m._HSLColor = m.File().AsDot("HSLColor")
	}
	return m._HSLColor
}

func (m *Material) HSVColor() Qualifier {
	if m._HSVColor == "" {
		m._HSVColor = m.File().AsDot("HSVColor")
	}
	return m._HSVColor
}

func (m *Material) Hero() Qualifier {
	if m._Hero == "" {
		m._Hero = m.File().AsDot("Hero")
	}
	return m._Hero
}

func (m *Material) HeroController() Qualifier {
	if m._HeroController == "" {
		m._HeroController = m.File().AsDot("HeroController")
	}
	return m._HeroController
}

func (m *Material) HeroFlightDirection() Qualifier {
	if m._HeroFlightDirection == "" {
		m._HeroFlightDirection = m.File().AsDot("HeroFlightDirection")
	}
	return m._HeroFlightDirection
}

func (m *Material) HeroFlightShuttleBuilder() Qualifier {
	if m._HeroFlightShuttleBuilder == "" {
		m._HeroFlightShuttleBuilder = m.File().AsDot("HeroFlightShuttleBuilder")
	}
	return m._HeroFlightShuttleBuilder
}

func (m *Material) HeroPlaceholderBuilder() Qualifier {
	if m._HeroPlaceholderBuilder == "" {
		m._HeroPlaceholderBuilder = m.File().AsDot("HeroPlaceholderBuilder")
	}
	return m._HeroPlaceholderBuilder
}

func (m *Material) HitTestBehavior() Qualifier {
	if m._HitTestBehavior == "" {
		m._HitTestBehavior = m.File().AsDot("HitTestBehavior")
	}
	return m._HitTestBehavior
}

func (m *Material) HoldScrollActivity() Qualifier {
	if m._HoldScrollActivity == "" {
		m._HoldScrollActivity = m.File().AsDot("HoldScrollActivity")
	}
	return m._HoldScrollActivity
}

func (m *Material) HourFormat() Qualifier {
	if m._HourFormat == "" {
		m._HourFormat = m.File().AsDot("HourFormat")
	}
	return m._HourFormat
}

func (m *Material) HtmlElementView() Qualifier {
	if m._HtmlElementView == "" {
		m._HtmlElementView = m.File().AsDot("HtmlElementView")
	}
	return m._HtmlElementView
}

func (m *Material) HttpClientProvider() Qualifier {
	if m._HttpClientProvider == "" {
		m._HttpClientProvider = m.File().AsDot("HttpClientProvider")
	}
	return m._HttpClientProvider
}

func (m *Material) Icon() Qualifier {
	if m._Icon == "" {
		m._Icon = m.File().AsDot("Icon")
	}
	return m._Icon
}

func (m *Material) IconButton() Qualifier {
	if m._IconButton == "" {
		m._IconButton = m.File().AsDot("IconButton")
	}
	return m._IconButton
}

func (m *Material) IconData() Qualifier {
	if m._IconData == "" {
		m._IconData = m.File().AsDot("IconData")
	}
	return m._IconData
}

func (m *Material) IconDataProperty() Qualifier {
	if m._IconDataProperty == "" {
		m._IconDataProperty = m.File().AsDot("IconDataProperty")
	}
	return m._IconDataProperty
}

func (m *Material) IconTheme() Qualifier {
	if m._IconTheme == "" {
		m._IconTheme = m.File().AsDot("IconTheme")
	}
	return m._IconTheme
}

func (m *Material) IconThemeData() Qualifier {
	if m._IconThemeData == "" {
		m._IconThemeData = m.File().AsDot("IconThemeData")
	}
	return m._IconThemeData
}

func (m *Material) Icons() Qualifier {
	if m._Icons == "" {
		m._Icons = m.File().AsDot("Icons")
	}
	return m._Icons
}

func (m *Material) IdleScrollActivity() Qualifier {
	if m._IdleScrollActivity == "" {
		m._IdleScrollActivity = m.File().AsDot("IdleScrollActivity")
	}
	return m._IdleScrollActivity
}

func (m *Material) IgnorePointer() Qualifier {
	if m._IgnorePointer == "" {
		m._IgnorePointer = m.File().AsDot("IgnorePointer")
	}
	return m._IgnorePointer
}

func (m *Material) Image() Qualifier {
	if m._Image == "" {
		m._Image = m.File().AsDot("Image")
	}
	return m._Image
}

func (m *Material) ImageCache() Qualifier {
	if m._ImageCache == "" {
		m._ImageCache = m.File().AsDot("ImageCache")
	}
	return m._ImageCache
}

func (m *Material) ImageChunkEvent() Qualifier {
	if m._ImageChunkEvent == "" {
		m._ImageChunkEvent = m.File().AsDot("ImageChunkEvent")
	}
	return m._ImageChunkEvent
}

func (m *Material) ImageChunkListener() Qualifier {
	if m._ImageChunkListener == "" {
		m._ImageChunkListener = m.File().AsDot("ImageChunkListener")
	}
	return m._ImageChunkListener
}

func (m *Material) ImageConfiguration() Qualifier {
	if m._ImageConfiguration == "" {
		m._ImageConfiguration = m.File().AsDot("ImageConfiguration")
	}
	return m._ImageConfiguration
}

func (m *Material) ImageErrorListener() Qualifier {
	if m._ImageErrorListener == "" {
		m._ImageErrorListener = m.File().AsDot("ImageErrorListener")
	}
	return m._ImageErrorListener
}

func (m *Material) ImageFrameBuilder() Qualifier {
	if m._ImageFrameBuilder == "" {
		m._ImageFrameBuilder = m.File().AsDot("ImageFrameBuilder")
	}
	return m._ImageFrameBuilder
}

func (m *Material) ImageIcon() Qualifier {
	if m._ImageIcon == "" {
		m._ImageIcon = m.File().AsDot("ImageIcon")
	}
	return m._ImageIcon
}

func (m *Material) ImageInfo() Qualifier {
	if m._ImageInfo == "" {
		m._ImageInfo = m.File().AsDot("ImageInfo")
	}
	return m._ImageInfo
}

func (m *Material) ImageListener() Qualifier {
	if m._ImageListener == "" {
		m._ImageListener = m.File().AsDot("ImageListener")
	}
	return m._ImageListener
}

func (m *Material) ImageLoadingBuilder() Qualifier {
	if m._ImageLoadingBuilder == "" {
		m._ImageLoadingBuilder = m.File().AsDot("ImageLoadingBuilder")
	}
	return m._ImageLoadingBuilder
}

func (m *Material) ImageProvider() Qualifier {
	if m._ImageProvider == "" {
		m._ImageProvider = m.File().AsDot("ImageProvider")
	}
	return m._ImageProvider
}

func (m *Material) ImageRepeat() Qualifier {
	if m._ImageRepeat == "" {
		m._ImageRepeat = m.File().AsDot("ImageRepeat")
	}
	return m._ImageRepeat
}

func (m *Material) ImageShader() Qualifier {
	if m._ImageShader == "" {
		m._ImageShader = m.File().AsDot("ImageShader")
	}
	return m._ImageShader
}

func (m *Material) ImageStream() Qualifier {
	if m._ImageStream == "" {
		m._ImageStream = m.File().AsDot("ImageStream")
	}
	return m._ImageStream
}

func (m *Material) ImageStreamCompleter() Qualifier {
	if m._ImageStreamCompleter == "" {
		m._ImageStreamCompleter = m.File().AsDot("ImageStreamCompleter")
	}
	return m._ImageStreamCompleter
}

func (m *Material) ImageStreamListener() Qualifier {
	if m._ImageStreamListener == "" {
		m._ImageStreamListener = m.File().AsDot("ImageStreamListener")
	}
	return m._ImageStreamListener
}

func (m *Material) ImplicitlyAnimatedWidget() Qualifier {
	if m._ImplicitlyAnimatedWidget == "" {
		m._ImplicitlyAnimatedWidget = m.File().AsDot("ImplicitlyAnimatedWidget")
	}
	return m._ImplicitlyAnimatedWidget
}

func (m *Material) ImplicitlyAnimatedWidgetState() Qualifier {
	if m._ImplicitlyAnimatedWidgetState == "" {
		m._ImplicitlyAnimatedWidgetState = m.File().AsDot("ImplicitlyAnimatedWidgetState")
	}
	return m._ImplicitlyAnimatedWidgetState
}

func (m *Material) IndexedSemantics() Qualifier {
	if m._IndexedSemantics == "" {
		m._IndexedSemantics = m.File().AsDot("IndexedSemantics")
	}
	return m._IndexedSemantics
}

func (m *Material) IndexedStack() Qualifier {
	if m._IndexedStack == "" {
		m._IndexedStack = m.File().AsDot("IndexedStack")
	}
	return m._IndexedStack
}

func (m *Material) IndexedWidgetBuilder() Qualifier {
	if m._IndexedWidgetBuilder == "" {
		m._IndexedWidgetBuilder = m.File().AsDot("IndexedWidgetBuilder")
	}
	return m._IndexedWidgetBuilder
}

func (m *Material) InheritedElement() Qualifier {
	if m._InheritedElement == "" {
		m._InheritedElement = m.File().AsDot("InheritedElement")
	}
	return m._InheritedElement
}

func (m *Material) InheritedModel() Qualifier {
	if m._InheritedModel == "" {
		m._InheritedModel = m.File().AsDot("InheritedModel")
	}
	return m._InheritedModel
}

func (m *Material) InheritedModelElement() Qualifier {
	if m._InheritedModelElement == "" {
		m._InheritedModelElement = m.File().AsDot("InheritedModelElement")
	}
	return m._InheritedModelElement
}

func (m *Material) InheritedNotifier() Qualifier {
	if m._InheritedNotifier == "" {
		m._InheritedNotifier = m.File().AsDot("InheritedNotifier")
	}
	return m._InheritedNotifier
}

func (m *Material) InheritedTheme() Qualifier {
	if m._InheritedTheme == "" {
		m._InheritedTheme = m.File().AsDot("InheritedTheme")
	}
	return m._InheritedTheme
}

func (m *Material) InheritedWidget() Qualifier {
	if m._InheritedWidget == "" {
		m._InheritedWidget = m.File().AsDot("InheritedWidget")
	}
	return m._InheritedWidget
}

func (m *Material) Ink() Qualifier {
	if m._Ink == "" {
		m._Ink = m.File().AsDot("Ink")
	}
	return m._Ink
}

func (m *Material) InkDecoration() Qualifier {
	if m._InkDecoration == "" {
		m._InkDecoration = m.File().AsDot("InkDecoration")
	}
	return m._InkDecoration
}

func (m *Material) InkFeature() Qualifier {
	if m._InkFeature == "" {
		m._InkFeature = m.File().AsDot("InkFeature")
	}
	return m._InkFeature
}

func (m *Material) InkHighlight() Qualifier {
	if m._InkHighlight == "" {
		m._InkHighlight = m.File().AsDot("InkHighlight")
	}
	return m._InkHighlight
}

func (m *Material) InkResponse() Qualifier {
	if m._InkResponse == "" {
		m._InkResponse = m.File().AsDot("InkResponse")
	}
	return m._InkResponse
}

func (m *Material) InkRipple() Qualifier {
	if m._InkRipple == "" {
		m._InkRipple = m.File().AsDot("InkRipple")
	}
	return m._InkRipple
}

func (m *Material) InkSplash() Qualifier {
	if m._InkSplash == "" {
		m._InkSplash = m.File().AsDot("InkSplash")
	}
	return m._InkSplash
}

func (m *Material) InkWell() Qualifier {
	if m._InkWell == "" {
		m._InkWell = m.File().AsDot("InkWell")
	}
	return m._InkWell
}

func (m *Material) InlineSpan() Qualifier {
	if m._InlineSpan == "" {
		m._InlineSpan = m.File().AsDot("InlineSpan")
	}
	return m._InlineSpan
}

func (m *Material) InlineSpanSemanticsInformation() Qualifier {
	if m._InlineSpanSemanticsInformation == "" {
		m._InlineSpanSemanticsInformation = m.File().AsDot("InlineSpanSemanticsInformation")
	}
	return m._InlineSpanSemanticsInformation
}

func (m *Material) InlineSpanVisitor() Qualifier {
	if m._InlineSpanVisitor == "" {
		m._InlineSpanVisitor = m.File().AsDot("InlineSpanVisitor")
	}
	return m._InlineSpanVisitor
}

func (m *Material) InputBorder() Qualifier {
	if m._InputBorder == "" {
		m._InputBorder = m.File().AsDot("InputBorder")
	}
	return m._InputBorder
}

func (m *Material) InputChip() Qualifier {
	if m._InputChip == "" {
		m._InputChip = m.File().AsDot("InputChip")
	}
	return m._InputChip
}

func (m *Material) InputCounterWidgetBuilder() Qualifier {
	if m._InputCounterWidgetBuilder == "" {
		m._InputCounterWidgetBuilder = m.File().AsDot("InputCounterWidgetBuilder")
	}
	return m._InputCounterWidgetBuilder
}

func (m *Material) InputDecoration() Qualifier {
	if m._InputDecoration == "" {
		m._InputDecoration = m.File().AsDot("InputDecoration")
	}
	return m._InputDecoration
}

func (m *Material) InputDecorationTheme() Qualifier {
	if m._InputDecorationTheme == "" {
		m._InputDecorationTheme = m.File().AsDot("InputDecorationTheme")
	}
	return m._InputDecorationTheme
}

func (m *Material) InputDecorator() Qualifier {
	if m._InputDecorator == "" {
		m._InputDecorator = m.File().AsDot("InputDecorator")
	}
	return m._InputDecorator
}

func (m *Material) InspectorSelectButtonBuilder() Qualifier {
	if m._InspectorSelectButtonBuilder == "" {
		m._InspectorSelectButtonBuilder = m.File().AsDot("InspectorSelectButtonBuilder")
	}
	return m._InspectorSelectButtonBuilder
}

func (m *Material) InspectorSelection() Qualifier {
	if m._InspectorSelection == "" {
		m._InspectorSelection = m.File().AsDot("InspectorSelection")
	}
	return m._InspectorSelection
}

func (m *Material) InspectorSelectionChangedCallback() Qualifier {
	if m._InspectorSelectionChangedCallback == "" {
		m._InspectorSelectionChangedCallback = m.File().AsDot("InspectorSelectionChangedCallback")
	}
	return m._InspectorSelectionChangedCallback
}

func (m *Material) IntTween() Qualifier {
	if m._IntTween == "" {
		m._IntTween = m.File().AsDot("IntTween")
	}
	return m._IntTween
}

func (m *Material) Intent() Qualifier {
	if m._Intent == "" {
		m._Intent = m.File().AsDot("Intent")
	}
	return m._Intent
}

func (m *Material) InteractiveInkFeature() Qualifier {
	if m._InteractiveInkFeature == "" {
		m._InteractiveInkFeature = m.File().AsDot("InteractiveInkFeature")
	}
	return m._InteractiveInkFeature
}

func (m *Material) InteractiveInkFeatureFactory() Qualifier {
	if m._InteractiveInkFeatureFactory == "" {
		m._InteractiveInkFeatureFactory = m.File().AsDot("InteractiveInkFeatureFactory")
	}
	return m._InteractiveInkFeatureFactory
}

func (m *Material) Interval() Qualifier {
	if m._Interval == "" {
		m._Interval = m.File().AsDot("Interval")
	}
	return m._Interval
}

func (m *Material) IntrinsicColumnWidth() Qualifier {
	if m._IntrinsicColumnWidth == "" {
		m._IntrinsicColumnWidth = m.File().AsDot("IntrinsicColumnWidth")
	}
	return m._IntrinsicColumnWidth
}

func (m *Material) IntrinsicHeight() Qualifier {
	if m._IntrinsicHeight == "" {
		m._IntrinsicHeight = m.File().AsDot("IntrinsicHeight")
	}
	return m._IntrinsicHeight
}

func (m *Material) IntrinsicWidth() Qualifier {
	if m._IntrinsicWidth == "" {
		m._IntrinsicWidth = m.File().AsDot("IntrinsicWidth")
	}
	return m._IntrinsicWidth
}

func (m *Material) KeepAlive() Qualifier {
	if m._KeepAlive == "" {
		m._KeepAlive = m.File().AsDot("KeepAlive")
	}
	return m._KeepAlive
}

func (m *Material) KeepAliveHandle() Qualifier {
	if m._KeepAliveHandle == "" {
		m._KeepAliveHandle = m.File().AsDot("KeepAliveHandle")
	}
	return m._KeepAliveHandle
}

func (m *Material) KeepAliveNotification() Qualifier {
	if m._KeepAliveNotification == "" {
		m._KeepAliveNotification = m.File().AsDot("KeepAliveNotification")
	}
	return m._KeepAliveNotification
}

func (m *Material) Key() Qualifier {
	if m._Key == "" {
		m._Key = m.File().AsDot("Key")
	}
	return m._Key
}

func (m *Material) KeySet() Qualifier {
	if m._KeySet == "" {
		m._KeySet = m.File().AsDot("KeySet")
	}
	return m._KeySet
}

func (m *Material) KeyedSubtree() Qualifier {
	if m._KeyedSubtree == "" {
		m._KeyedSubtree = m.File().AsDot("KeyedSubtree")
	}
	return m._KeyedSubtree
}

func (m *Material) LabeledGlobalKey() Qualifier {
	if m._LabeledGlobalKey == "" {
		m._LabeledGlobalKey = m.File().AsDot("LabeledGlobalKey")
	}
	return m._LabeledGlobalKey
}

func (m *Material) LayerLink() Qualifier {
	if m._LayerLink == "" {
		m._LayerLink = m.File().AsDot("LayerLink")
	}
	return m._LayerLink
}

func (m *Material) LayoutBuilder() Qualifier {
	if m._LayoutBuilder == "" {
		m._LayoutBuilder = m.File().AsDot("LayoutBuilder")
	}
	return m._LayoutBuilder
}

func (m *Material) LayoutChangedNotification() Qualifier {
	if m._LayoutChangedNotification == "" {
		m._LayoutChangedNotification = m.File().AsDot("LayoutChangedNotification")
	}
	return m._LayoutChangedNotification
}

func (m *Material) LayoutId() Qualifier {
	if m._LayoutId == "" {
		m._LayoutId = m.File().AsDot("LayoutId")
	}
	return m._LayoutId
}

func (m *Material) LayoutWidgetBuilder() Qualifier {
	if m._LayoutWidgetBuilder == "" {
		m._LayoutWidgetBuilder = m.File().AsDot("LayoutWidgetBuilder")
	}
	return m._LayoutWidgetBuilder
}

func (m *Material) LeafRenderObjectElement() Qualifier {
	if m._LeafRenderObjectElement == "" {
		m._LeafRenderObjectElement = m.File().AsDot("LeafRenderObjectElement")
	}
	return m._LeafRenderObjectElement
}

func (m *Material) LeafRenderObjectWidget() Qualifier {
	if m._LeafRenderObjectWidget == "" {
		m._LeafRenderObjectWidget = m.File().AsDot("LeafRenderObjectWidget")
	}
	return m._LeafRenderObjectWidget
}

func (m *Material) LicensePage() Qualifier {
	if m._LicensePage == "" {
		m._LicensePage = m.File().AsDot("LicensePage")
	}
	return m._LicensePage
}

func (m *Material) LimitedBox() Qualifier {
	if m._LimitedBox == "" {
		m._LimitedBox = m.File().AsDot("LimitedBox")
	}
	return m._LimitedBox
}

func (m *Material) LinearGradient() Qualifier {
	if m._LinearGradient == "" {
		m._LinearGradient = m.File().AsDot("LinearGradient")
	}
	return m._LinearGradient
}

func (m *Material) LinearProgressIndicator() Qualifier {
	if m._LinearProgressIndicator == "" {
		m._LinearProgressIndicator = m.File().AsDot("LinearProgressIndicator")
	}
	return m._LinearProgressIndicator
}

func (m *Material) ListBody() Qualifier {
	if m._ListBody == "" {
		m._ListBody = m.File().AsDot("ListBody")
	}
	return m._ListBody
}

func (m *Material) ListTile() Qualifier {
	if m._ListTile == "" {
		m._ListTile = m.File().AsDot("ListTile")
	}
	return m._ListTile
}

func (m *Material) ListTileControlAffinity() Qualifier {
	if m._ListTileControlAffinity == "" {
		m._ListTileControlAffinity = m.File().AsDot("ListTileControlAffinity")
	}
	return m._ListTileControlAffinity
}

func (m *Material) ListTileStyle() Qualifier {
	if m._ListTileStyle == "" {
		m._ListTileStyle = m.File().AsDot("ListTileStyle")
	}
	return m._ListTileStyle
}

func (m *Material) ListTileTheme() Qualifier {
	if m._ListTileTheme == "" {
		m._ListTileTheme = m.File().AsDot("ListTileTheme")
	}
	return m._ListTileTheme
}

func (m *Material) ListView() Qualifier {
	if m._ListView == "" {
		m._ListView = m.File().AsDot("ListView")
	}
	return m._ListView
}

func (m *Material) ListWheelChildBuilderDelegate() Qualifier {
	if m._ListWheelChildBuilderDelegate == "" {
		m._ListWheelChildBuilderDelegate = m.File().AsDot("ListWheelChildBuilderDelegate")
	}
	return m._ListWheelChildBuilderDelegate
}

func (m *Material) ListWheelChildDelegate() Qualifier {
	if m._ListWheelChildDelegate == "" {
		m._ListWheelChildDelegate = m.File().AsDot("ListWheelChildDelegate")
	}
	return m._ListWheelChildDelegate
}

func (m *Material) ListWheelChildListDelegate() Qualifier {
	if m._ListWheelChildListDelegate == "" {
		m._ListWheelChildListDelegate = m.File().AsDot("ListWheelChildListDelegate")
	}
	return m._ListWheelChildListDelegate
}

func (m *Material) ListWheelChildLoopingListDelegate() Qualifier {
	if m._ListWheelChildLoopingListDelegate == "" {
		m._ListWheelChildLoopingListDelegate = m.File().AsDot("ListWheelChildLoopingListDelegate")
	}
	return m._ListWheelChildLoopingListDelegate
}

func (m *Material) ListWheelElement() Qualifier {
	if m._ListWheelElement == "" {
		m._ListWheelElement = m.File().AsDot("ListWheelElement")
	}
	return m._ListWheelElement
}

func (m *Material) ListWheelScrollView() Qualifier {
	if m._ListWheelScrollView == "" {
		m._ListWheelScrollView = m.File().AsDot("ListWheelScrollView")
	}
	return m._ListWheelScrollView
}

func (m *Material) ListWheelViewport() Qualifier {
	if m._ListWheelViewport == "" {
		m._ListWheelViewport = m.File().AsDot("ListWheelViewport")
	}
	return m._ListWheelViewport
}

func (m *Material) Listenable() Qualifier {
	if m._Listenable == "" {
		m._Listenable = m.File().AsDot("Listenable")
	}
	return m._Listenable
}

func (m *Material) Listener() Qualifier {
	if m._Listener == "" {
		m._Listener = m.File().AsDot("Listener")
	}
	return m._Listener
}

func (m *Material) LocalHistoryEntry() Qualifier {
	if m._LocalHistoryEntry == "" {
		m._LocalHistoryEntry = m.File().AsDot("LocalHistoryEntry")
	}
	return m._LocalHistoryEntry
}

func (m *Material) LocalHistoryRoute() Qualifier {
	if m._LocalHistoryRoute == "" {
		m._LocalHistoryRoute = m.File().AsDot("LocalHistoryRoute")
	}
	return m._LocalHistoryRoute
}

func (m *Material) LocalKey() Qualifier {
	if m._LocalKey == "" {
		m._LocalKey = m.File().AsDot("LocalKey")
	}
	return m._LocalKey
}

func (m *Material) Locale() Qualifier {
	if m._Locale == "" {
		m._Locale = m.File().AsDot("Locale")
	}
	return m._Locale
}

func (m *Material) LocaleListResolutionCallback() Qualifier {
	if m._LocaleListResolutionCallback == "" {
		m._LocaleListResolutionCallback = m.File().AsDot("LocaleListResolutionCallback")
	}
	return m._LocaleListResolutionCallback
}

func (m *Material) LocaleResolutionCallback() Qualifier {
	if m._LocaleResolutionCallback == "" {
		m._LocaleResolutionCallback = m.File().AsDot("LocaleResolutionCallback")
	}
	return m._LocaleResolutionCallback
}

func (m *Material) Localizations() Qualifier {
	if m._Localizations == "" {
		m._Localizations = m.File().AsDot("Localizations")
	}
	return m._Localizations
}

func (m *Material) LocalizationsDelegate() Qualifier {
	if m._LocalizationsDelegate == "" {
		m._LocalizationsDelegate = m.File().AsDot("LocalizationsDelegate")
	}
	return m._LocalizationsDelegate
}

func (m *Material) LogicalKeySet() Qualifier {
	if m._LogicalKeySet == "" {
		m._LogicalKeySet = m.File().AsDot("LogicalKeySet")
	}
	return m._LogicalKeySet
}

func (m *Material) LongPressDraggable() Qualifier {
	if m._LongPressDraggable == "" {
		m._LongPressDraggable = m.File().AsDot("LongPressDraggable")
	}
	return m._LongPressDraggable
}

func (m *Material) LongPressEndDetails() Qualifier {
	if m._LongPressEndDetails == "" {
		m._LongPressEndDetails = m.File().AsDot("LongPressEndDetails")
	}
	return m._LongPressEndDetails
}

func (m *Material) LongPressMoveUpdateDetails() Qualifier {
	if m._LongPressMoveUpdateDetails == "" {
		m._LongPressMoveUpdateDetails = m.File().AsDot("LongPressMoveUpdateDetails")
	}
	return m._LongPressMoveUpdateDetails
}

func (m *Material) LongPressStartDetails() Qualifier {
	if m._LongPressStartDetails == "" {
		m._LongPressStartDetails = m.File().AsDot("LongPressStartDetails")
	}
	return m._LongPressStartDetails
}

func (m *Material) MainAxisAlignment() Qualifier {
	if m._MainAxisAlignment == "" {
		m._MainAxisAlignment = m.File().AsDot("MainAxisAlignment")
	}
	return m._MainAxisAlignment
}

func (m *Material) MainAxisSize() Qualifier {
	if m._MainAxisSize == "" {
		m._MainAxisSize = m.File().AsDot("MainAxisSize")
	}
	return m._MainAxisSize
}

func (m *Material) MaskFilter() Qualifier {
	if m._MaskFilter == "" {
		m._MaskFilter = m.File().AsDot("MaskFilter")
	}
	return m._MaskFilter
}

func (m *Material) Material() Qualifier {
	if m._Material == "" {
		m._Material = m.File().AsDot("Material")
	}
	return m._Material
}

func (m *Material) MaterialAccentColor() Qualifier {
	if m._MaterialAccentColor == "" {
		m._MaterialAccentColor = m.File().AsDot("MaterialAccentColor")
	}
	return m._MaterialAccentColor
}

func (m *Material) MaterialApp() Qualifier {
	if m._MaterialApp == "" {
		m._MaterialApp = m.File().AsDot("MaterialApp")
	}
	return m._MaterialApp
}

func (m *Material) MaterialBanner() Qualifier {
	if m._MaterialBanner == "" {
		m._MaterialBanner = m.File().AsDot("MaterialBanner")
	}
	return m._MaterialBanner
}

func (m *Material) MaterialBannerTheme() Qualifier {
	if m._MaterialBannerTheme == "" {
		m._MaterialBannerTheme = m.File().AsDot("MaterialBannerTheme")
	}
	return m._MaterialBannerTheme
}

func (m *Material) MaterialBannerThemeData() Qualifier {
	if m._MaterialBannerThemeData == "" {
		m._MaterialBannerThemeData = m.File().AsDot("MaterialBannerThemeData")
	}
	return m._MaterialBannerThemeData
}

func (m *Material) MaterialBasedCupertinoThemeData() Qualifier {
	if m._MaterialBasedCupertinoThemeData == "" {
		m._MaterialBasedCupertinoThemeData = m.File().AsDot("MaterialBasedCupertinoThemeData")
	}
	return m._MaterialBasedCupertinoThemeData
}

func (m *Material) MaterialButton() Qualifier {
	if m._MaterialButton == "" {
		m._MaterialButton = m.File().AsDot("MaterialButton")
	}
	return m._MaterialButton
}

func (m *Material) MaterialButtonWithIconMixin() Qualifier {
	if m._MaterialButtonWithIconMixin == "" {
		m._MaterialButtonWithIconMixin = m.File().AsDot("MaterialButtonWithIconMixin")
	}
	return m._MaterialButtonWithIconMixin
}

func (m *Material) MaterialColor() Qualifier {
	if m._MaterialColor == "" {
		m._MaterialColor = m.File().AsDot("MaterialColor")
	}
	return m._MaterialColor
}

func (m *Material) MaterialGap() Qualifier {
	if m._MaterialGap == "" {
		m._MaterialGap = m.File().AsDot("MaterialGap")
	}
	return m._MaterialGap
}

func (m *Material) MaterialInkController() Qualifier {
	if m._MaterialInkController == "" {
		m._MaterialInkController = m.File().AsDot("MaterialInkController")
	}
	return m._MaterialInkController
}

func (m *Material) MaterialLocalizations() Qualifier {
	if m._MaterialLocalizations == "" {
		m._MaterialLocalizations = m.File().AsDot("MaterialLocalizations")
	}
	return m._MaterialLocalizations
}

func (m *Material) MaterialPageRoute() Qualifier {
	if m._MaterialPageRoute == "" {
		m._MaterialPageRoute = m.File().AsDot("MaterialPageRoute")
	}
	return m._MaterialPageRoute
}

func (m *Material) MaterialPointArcTween() Qualifier {
	if m._MaterialPointArcTween == "" {
		m._MaterialPointArcTween = m.File().AsDot("MaterialPointArcTween")
	}
	return m._MaterialPointArcTween
}

func (m *Material) MaterialPropertyResolver() Qualifier {
	if m._MaterialPropertyResolver == "" {
		m._MaterialPropertyResolver = m.File().AsDot("MaterialPropertyResolver")
	}
	return m._MaterialPropertyResolver
}

func (m *Material) MaterialRectArcTween() Qualifier {
	if m._MaterialRectArcTween == "" {
		m._MaterialRectArcTween = m.File().AsDot("MaterialRectArcTween")
	}
	return m._MaterialRectArcTween
}

func (m *Material) MaterialRectCenterArcTween() Qualifier {
	if m._MaterialRectCenterArcTween == "" {
		m._MaterialRectCenterArcTween = m.File().AsDot("MaterialRectCenterArcTween")
	}
	return m._MaterialRectCenterArcTween
}

func (m *Material) MaterialSlice() Qualifier {
	if m._MaterialSlice == "" {
		m._MaterialSlice = m.File().AsDot("MaterialSlice")
	}
	return m._MaterialSlice
}

func (m *Material) MaterialState() Qualifier {
	if m._MaterialState == "" {
		m._MaterialState = m.File().AsDot("MaterialState")
	}
	return m._MaterialState
}

func (m *Material) MaterialStateColor() Qualifier {
	if m._MaterialStateColor == "" {
		m._MaterialStateColor = m.File().AsDot("MaterialStateColor")
	}
	return m._MaterialStateColor
}

func (m *Material) MaterialStateProperty() Qualifier {
	if m._MaterialStateProperty == "" {
		m._MaterialStateProperty = m.File().AsDot("MaterialStateProperty")
	}
	return m._MaterialStateProperty
}

func (m *Material) MaterialTapTargetSize() Qualifier {
	if m._MaterialTapTargetSize == "" {
		m._MaterialTapTargetSize = m.File().AsDot("MaterialTapTargetSize")
	}
	return m._MaterialTapTargetSize
}

func (m *Material) MaterialType() Qualifier {
	if m._MaterialType == "" {
		m._MaterialType = m.File().AsDot("MaterialType")
	}
	return m._MaterialType
}

func (m *Material) Matrix4() Qualifier {
	if m._Matrix4 == "" {
		m._Matrix4 = m.File().AsDot("Matrix4")
	}
	return m._Matrix4
}

func (m *Material) Matrix4Tween() Qualifier {
	if m._Matrix4Tween == "" {
		m._Matrix4Tween = m.File().AsDot("Matrix4Tween")
	}
	return m._Matrix4Tween
}

func (m *Material) MatrixUtils() Qualifier {
	if m._MatrixUtils == "" {
		m._MatrixUtils = m.File().AsDot("MatrixUtils")
	}
	return m._MatrixUtils
}

func (m *Material) MaxColumnWidth() Qualifier {
	if m._MaxColumnWidth == "" {
		m._MaxColumnWidth = m.File().AsDot("MaxColumnWidth")
	}
	return m._MaxColumnWidth
}

func (m *Material) MediaQuery() Qualifier {
	if m._MediaQuery == "" {
		m._MediaQuery = m.File().AsDot("MediaQuery")
	}
	return m._MediaQuery
}

func (m *Material) MediaQueryData() Qualifier {
	if m._MediaQueryData == "" {
		m._MediaQueryData = m.File().AsDot("MediaQueryData")
	}
	return m._MediaQueryData
}

func (m *Material) MemoryImage() Qualifier {
	if m._MemoryImage == "" {
		m._MemoryImage = m.File().AsDot("MemoryImage")
	}
	return m._MemoryImage
}

func (m *Material) MergeSemantics() Qualifier {
	if m._MergeSemantics == "" {
		m._MergeSemantics = m.File().AsDot("MergeSemantics")
	}
	return m._MergeSemantics
}

func (m *Material) MergeableMaterial() Qualifier {
	if m._MergeableMaterial == "" {
		m._MergeableMaterial = m.File().AsDot("MergeableMaterial")
	}
	return m._MergeableMaterial
}

func (m *Material) MergeableMaterialItem() Qualifier {
	if m._MergeableMaterialItem == "" {
		m._MergeableMaterialItem = m.File().AsDot("MergeableMaterialItem")
	}
	return m._MergeableMaterialItem
}

func (m *Material) MetaData() Qualifier {
	if m._MetaData == "" {
		m._MetaData = m.File().AsDot("MetaData")
	}
	return m._MetaData
}

func (m *Material) MinColumnWidth() Qualifier {
	if m._MinColumnWidth == "" {
		m._MinColumnWidth = m.File().AsDot("MinColumnWidth")
	}
	return m._MinColumnWidth
}

func (m *Material) ModalBarrier() Qualifier {
	if m._ModalBarrier == "" {
		m._ModalBarrier = m.File().AsDot("ModalBarrier")
	}
	return m._ModalBarrier
}

func (m *Material) ModalRoute() Qualifier {
	if m._ModalRoute == "" {
		m._ModalRoute = m.File().AsDot("ModalRoute")
	}
	return m._ModalRoute
}

func (m *Material) MonthPicker() Qualifier {
	if m._MonthPicker == "" {
		m._MonthPicker = m.File().AsDot("MonthPicker")
	}
	return m._MonthPicker
}

func (m *Material) MouseRegion() Qualifier {
	if m._MouseRegion == "" {
		m._MouseRegion = m.File().AsDot("MouseRegion")
	}
	return m._MouseRegion
}

func (m *Material) MultiChildLayoutDelegate() Qualifier {
	if m._MultiChildLayoutDelegate == "" {
		m._MultiChildLayoutDelegate = m.File().AsDot("MultiChildLayoutDelegate")
	}
	return m._MultiChildLayoutDelegate
}

func (m *Material) MultiChildRenderObjectElement() Qualifier {
	if m._MultiChildRenderObjectElement == "" {
		m._MultiChildRenderObjectElement = m.File().AsDot("MultiChildRenderObjectElement")
	}
	return m._MultiChildRenderObjectElement
}

func (m *Material) MultiChildRenderObjectWidget() Qualifier {
	if m._MultiChildRenderObjectWidget == "" {
		m._MultiChildRenderObjectWidget = m.File().AsDot("MultiChildRenderObjectWidget")
	}
	return m._MultiChildRenderObjectWidget
}

func (m *Material) MultiFrameImageStreamCompleter() Qualifier {
	if m._MultiFrameImageStreamCompleter == "" {
		m._MultiFrameImageStreamCompleter = m.File().AsDot("MultiFrameImageStreamCompleter")
	}
	return m._MultiFrameImageStreamCompleter
}

func (m *Material) NavigationToolbar() Qualifier {
	if m._NavigationToolbar == "" {
		m._NavigationToolbar = m.File().AsDot("NavigationToolbar")
	}
	return m._NavigationToolbar
}

func (m *Material) Navigator() Qualifier {
	if m._Navigator == "" {
		m._Navigator = m.File().AsDot("Navigator")
	}
	return m._Navigator
}

func (m *Material) NavigatorObserver() Qualifier {
	if m._NavigatorObserver == "" {
		m._NavigatorObserver = m.File().AsDot("NavigatorObserver")
	}
	return m._NavigatorObserver
}

func (m *Material) NavigatorState() Qualifier {
	if m._NavigatorState == "" {
		m._NavigatorState = m.File().AsDot("NavigatorState")
	}
	return m._NavigatorState
}

func (m *Material) NestedScrollView() Qualifier {
	if m._NestedScrollView == "" {
		m._NestedScrollView = m.File().AsDot("NestedScrollView")
	}
	return m._NestedScrollView
}

func (m *Material) NestedScrollViewHeaderSliversBuilder() Qualifier {
	if m._NestedScrollViewHeaderSliversBuilder == "" {
		m._NestedScrollViewHeaderSliversBuilder = m.File().AsDot("NestedScrollViewHeaderSliversBuilder")
	}
	return m._NestedScrollViewHeaderSliversBuilder
}

func (m *Material) NestedScrollViewViewport() Qualifier {
	if m._NestedScrollViewViewport == "" {
		m._NestedScrollViewViewport = m.File().AsDot("NestedScrollViewViewport")
	}
	return m._NestedScrollViewViewport
}

func (m *Material) NetworkImage() Qualifier {
	if m._NetworkImage == "" {
		m._NetworkImage = m.File().AsDot("NetworkImage")
	}
	return m._NetworkImage
}

func (m *Material) NetworkImageLoadException() Qualifier {
	if m._NetworkImageLoadException == "" {
		m._NetworkImageLoadException = m.File().AsDot("NetworkImageLoadException")
	}
	return m._NetworkImageLoadException
}

func (m *Material) NeverScrollableScrollPhysics() Qualifier {
	if m._NeverScrollableScrollPhysics == "" {
		m._NeverScrollableScrollPhysics = m.File().AsDot("NeverScrollableScrollPhysics")
	}
	return m._NeverScrollableScrollPhysics
}

func (m *Material) NextFocusAction() Qualifier {
	if m._NextFocusAction == "" {
		m._NextFocusAction = m.File().AsDot("NextFocusAction")
	}
	return m._NextFocusAction
}

func (m *Material) NotchedShape() Qualifier {
	if m._NotchedShape == "" {
		m._NotchedShape = m.File().AsDot("NotchedShape")
	}
	return m._NotchedShape
}

func (m *Material) Notification() Qualifier {
	if m._Notification == "" {
		m._Notification = m.File().AsDot("Notification")
	}
	return m._Notification
}

func (m *Material) NotificationListener() Qualifier {
	if m._NotificationListener == "" {
		m._NotificationListener = m.File().AsDot("NotificationListener")
	}
	return m._NotificationListener
}

func (m *Material) NotificationListenerCallback() Qualifier {
	if m._NotificationListenerCallback == "" {
		m._NotificationListenerCallback = m.File().AsDot("NotificationListenerCallback")
	}
	return m._NotificationListenerCallback
}

func (m *Material) ObjectKey() Qualifier {
	if m._ObjectKey == "" {
		m._ObjectKey = m.File().AsDot("ObjectKey")
	}
	return m._ObjectKey
}

func (m *Material) Offset() Qualifier {
	if m._Offset == "" {
		m._Offset = m.File().AsDot("Offset")
	}
	return m._Offset
}

func (m *Material) Offstage() Qualifier {
	if m._Offstage == "" {
		m._Offstage = m.File().AsDot("Offstage")
	}
	return m._Offstage
}

func (m *Material) OnInvokeCallback() Qualifier {
	if m._OnInvokeCallback == "" {
		m._OnInvokeCallback = m.File().AsDot("OnInvokeCallback")
	}
	return m._OnInvokeCallback
}

func (m *Material) OneFrameImageStreamCompleter() Qualifier {
	if m._OneFrameImageStreamCompleter == "" {
		m._OneFrameImageStreamCompleter = m.File().AsDot("OneFrameImageStreamCompleter")
	}
	return m._OneFrameImageStreamCompleter
}

func (m *Material) Opacity() Qualifier {
	if m._Opacity == "" {
		m._Opacity = m.File().AsDot("Opacity")
	}
	return m._Opacity
}

func (m *Material) OpenUpwardsPageTransitionsBuilder() Qualifier {
	if m._OpenUpwardsPageTransitionsBuilder == "" {
		m._OpenUpwardsPageTransitionsBuilder = m.File().AsDot("OpenUpwardsPageTransitionsBuilder")
	}
	return m._OpenUpwardsPageTransitionsBuilder
}

func (m *Material) Orientation() Qualifier {
	if m._Orientation == "" {
		m._Orientation = m.File().AsDot("Orientation")
	}
	return m._Orientation
}

func (m *Material) OrientationBuilder() Qualifier {
	if m._OrientationBuilder == "" {
		m._OrientationBuilder = m.File().AsDot("OrientationBuilder")
	}
	return m._OrientationBuilder
}

func (m *Material) OrientationWidgetBuilder() Qualifier {
	if m._OrientationWidgetBuilder == "" {
		m._OrientationWidgetBuilder = m.File().AsDot("OrientationWidgetBuilder")
	}
	return m._OrientationWidgetBuilder
}

func (m *Material) OutlineButton() Qualifier {
	if m._OutlineButton == "" {
		m._OutlineButton = m.File().AsDot("OutlineButton")
	}
	return m._OutlineButton
}

func (m *Material) OutlineInputBorder() Qualifier {
	if m._OutlineInputBorder == "" {
		m._OutlineInputBorder = m.File().AsDot("OutlineInputBorder")
	}
	return m._OutlineInputBorder
}

func (m *Material) Overflow() Qualifier {
	if m._Overflow == "" {
		m._Overflow = m.File().AsDot("Overflow")
	}
	return m._Overflow
}

func (m *Material) OverflowBox() Qualifier {
	if m._OverflowBox == "" {
		m._OverflowBox = m.File().AsDot("OverflowBox")
	}
	return m._OverflowBox
}

func (m *Material) Overlay() Qualifier {
	if m._Overlay == "" {
		m._Overlay = m.File().AsDot("Overlay")
	}
	return m._Overlay
}

func (m *Material) OverlayEntry() Qualifier {
	if m._OverlayEntry == "" {
		m._OverlayEntry = m.File().AsDot("OverlayEntry")
	}
	return m._OverlayEntry
}

func (m *Material) OverlayRoute() Qualifier {
	if m._OverlayRoute == "" {
		m._OverlayRoute = m.File().AsDot("OverlayRoute")
	}
	return m._OverlayRoute
}

func (m *Material) OverlayState() Qualifier {
	if m._OverlayState == "" {
		m._OverlayState = m.File().AsDot("OverlayState")
	}
	return m._OverlayState
}

func (m *Material) OverscrollIndicatorNotification() Qualifier {
	if m._OverscrollIndicatorNotification == "" {
		m._OverscrollIndicatorNotification = m.File().AsDot("OverscrollIndicatorNotification")
	}
	return m._OverscrollIndicatorNotification
}

func (m *Material) OverscrollNotification() Qualifier {
	if m._OverscrollNotification == "" {
		m._OverscrollNotification = m.File().AsDot("OverscrollNotification")
	}
	return m._OverscrollNotification
}

func (m *Material) Padding() Qualifier {
	if m._Padding == "" {
		m._Padding = m.File().AsDot("Padding")
	}
	return m._Padding
}

func (m *Material) PaddleRangeSliderValueIndicatorShape() Qualifier {
	if m._PaddleRangeSliderValueIndicatorShape == "" {
		m._PaddleRangeSliderValueIndicatorShape = m.File().AsDot("PaddleRangeSliderValueIndicatorShape")
	}
	return m._PaddleRangeSliderValueIndicatorShape
}

func (m *Material) PaddleSliderValueIndicatorShape() Qualifier {
	if m._PaddleSliderValueIndicatorShape == "" {
		m._PaddleSliderValueIndicatorShape = m.File().AsDot("PaddleSliderValueIndicatorShape")
	}
	return m._PaddleSliderValueIndicatorShape
}

func (m *Material) PageController() Qualifier {
	if m._PageController == "" {
		m._PageController = m.File().AsDot("PageController")
	}
	return m._PageController
}

func (m *Material) PageMetrics() Qualifier {
	if m._PageMetrics == "" {
		m._PageMetrics = m.File().AsDot("PageMetrics")
	}
	return m._PageMetrics
}

func (m *Material) PageRoute() Qualifier {
	if m._PageRoute == "" {
		m._PageRoute = m.File().AsDot("PageRoute")
	}
	return m._PageRoute
}

func (m *Material) PageRouteBuilder() Qualifier {
	if m._PageRouteBuilder == "" {
		m._PageRouteBuilder = m.File().AsDot("PageRouteBuilder")
	}
	return m._PageRouteBuilder
}

func (m *Material) PageRouteFactory() Qualifier {
	if m._PageRouteFactory == "" {
		m._PageRouteFactory = m.File().AsDot("PageRouteFactory")
	}
	return m._PageRouteFactory
}

func (m *Material) PageScrollPhysics() Qualifier {
	if m._PageScrollPhysics == "" {
		m._PageScrollPhysics = m.File().AsDot("PageScrollPhysics")
	}
	return m._PageScrollPhysics
}

func (m *Material) PageStorage() Qualifier {
	if m._PageStorage == "" {
		m._PageStorage = m.File().AsDot("PageStorage")
	}
	return m._PageStorage
}

func (m *Material) PageStorageBucket() Qualifier {
	if m._PageStorageBucket == "" {
		m._PageStorageBucket = m.File().AsDot("PageStorageBucket")
	}
	return m._PageStorageBucket
}

func (m *Material) PageStorageKey() Qualifier {
	if m._PageStorageKey == "" {
		m._PageStorageKey = m.File().AsDot("PageStorageKey")
	}
	return m._PageStorageKey
}

func (m *Material) PageTransitionsBuilder() Qualifier {
	if m._PageTransitionsBuilder == "" {
		m._PageTransitionsBuilder = m.File().AsDot("PageTransitionsBuilder")
	}
	return m._PageTransitionsBuilder
}

func (m *Material) PageTransitionsTheme() Qualifier {
	if m._PageTransitionsTheme == "" {
		m._PageTransitionsTheme = m.File().AsDot("PageTransitionsTheme")
	}
	return m._PageTransitionsTheme
}

func (m *Material) PageView() Qualifier {
	if m._PageView == "" {
		m._PageView = m.File().AsDot("PageView")
	}
	return m._PageView
}

func (m *Material) PaginatedDataTable() Qualifier {
	if m._PaginatedDataTable == "" {
		m._PaginatedDataTable = m.File().AsDot("PaginatedDataTable")
	}
	return m._PaginatedDataTable
}

func (m *Material) PaginatedDataTableState() Qualifier {
	if m._PaginatedDataTableState == "" {
		m._PaginatedDataTableState = m.File().AsDot("PaginatedDataTableState")
	}
	return m._PaginatedDataTableState
}

func (m *Material) Paint() Qualifier {
	if m._Paint == "" {
		m._Paint = m.File().AsDot("Paint")
	}
	return m._Paint
}

func (m *Material) PaintingBinding() Qualifier {
	if m._PaintingBinding == "" {
		m._PaintingBinding = m.File().AsDot("PaintingBinding")
	}
	return m._PaintingBinding
}

func (m *Material) PaintingContext() Qualifier {
	if m._PaintingContext == "" {
		m._PaintingContext = m.File().AsDot("PaintingContext")
	}
	return m._PaintingContext
}

func (m *Material) PaintingStyle() Qualifier {
	if m._PaintingStyle == "" {
		m._PaintingStyle = m.File().AsDot("PaintingStyle")
	}
	return m._PaintingStyle
}

func (m *Material) ParentDataElement() Qualifier {
	if m._ParentDataElement == "" {
		m._ParentDataElement = m.File().AsDot("ParentDataElement")
	}
	return m._ParentDataElement
}

func (m *Material) ParentDataWidget() Qualifier {
	if m._ParentDataWidget == "" {
		m._ParentDataWidget = m.File().AsDot("ParentDataWidget")
	}
	return m._ParentDataWidget
}

func (m *Material) Path() Qualifier {
	if m._Path == "" {
		m._Path = m.File().AsDot("Path")
	}
	return m._Path
}

func (m *Material) PathFillType() Qualifier {
	if m._PathFillType == "" {
		m._PathFillType = m.File().AsDot("PathFillType")
	}
	return m._PathFillType
}

func (m *Material) PathOperation() Qualifier {
	if m._PathOperation == "" {
		m._PathOperation = m.File().AsDot("PathOperation")
	}
	return m._PathOperation
}

func (m *Material) PerformanceOverlay() Qualifier {
	if m._PerformanceOverlay == "" {
		m._PerformanceOverlay = m.File().AsDot("PerformanceOverlay")
	}
	return m._PerformanceOverlay
}

func (m *Material) PersistentBottomSheetController() Qualifier {
	if m._PersistentBottomSheetController == "" {
		m._PersistentBottomSheetController = m.File().AsDot("PersistentBottomSheetController")
	}
	return m._PersistentBottomSheetController
}

func (m *Material) PhysicalModel() Qualifier {
	if m._PhysicalModel == "" {
		m._PhysicalModel = m.File().AsDot("PhysicalModel")
	}
	return m._PhysicalModel
}

func (m *Material) PhysicalShape() Qualifier {
	if m._PhysicalShape == "" {
		m._PhysicalShape = m.File().AsDot("PhysicalShape")
	}
	return m._PhysicalShape
}

func (m *Material) Placeholder() Qualifier {
	if m._Placeholder == "" {
		m._Placeholder = m.File().AsDot("Placeholder")
	}
	return m._Placeholder
}

func (m *Material) PlaceholderAlignment() Qualifier {
	if m._PlaceholderAlignment == "" {
		m._PlaceholderAlignment = m.File().AsDot("PlaceholderAlignment")
	}
	return m._PlaceholderAlignment
}

func (m *Material) PlaceholderDimensions() Qualifier {
	if m._PlaceholderDimensions == "" {
		m._PlaceholderDimensions = m.File().AsDot("PlaceholderDimensions")
	}
	return m._PlaceholderDimensions
}

func (m *Material) PlaceholderSpan() Qualifier {
	if m._PlaceholderSpan == "" {
		m._PlaceholderSpan = m.File().AsDot("PlaceholderSpan")
	}
	return m._PlaceholderSpan
}

func (m *Material) PlatformViewCreationParams() Qualifier {
	if m._PlatformViewCreationParams == "" {
		m._PlatformViewCreationParams = m.File().AsDot("PlatformViewCreationParams")
	}
	return m._PlatformViewCreationParams
}

func (m *Material) PlatformViewLink() Qualifier {
	if m._PlatformViewLink == "" {
		m._PlatformViewLink = m.File().AsDot("PlatformViewLink")
	}
	return m._PlatformViewLink
}

func (m *Material) PlatformViewSurface() Qualifier {
	if m._PlatformViewSurface == "" {
		m._PlatformViewSurface = m.File().AsDot("PlatformViewSurface")
	}
	return m._PlatformViewSurface
}

func (m *Material) PlatformViewSurfaceFactory() Qualifier {
	if m._PlatformViewSurfaceFactory == "" {
		m._PlatformViewSurfaceFactory = m.File().AsDot("PlatformViewSurfaceFactory")
	}
	return m._PlatformViewSurfaceFactory
}

func (m *Material) PointerCancelEvent() Qualifier {
	if m._PointerCancelEvent == "" {
		m._PointerCancelEvent = m.File().AsDot("PointerCancelEvent")
	}
	return m._PointerCancelEvent
}

func (m *Material) PointerCancelEventListener() Qualifier {
	if m._PointerCancelEventListener == "" {
		m._PointerCancelEventListener = m.File().AsDot("PointerCancelEventListener")
	}
	return m._PointerCancelEventListener
}

func (m *Material) PointerDownEvent() Qualifier {
	if m._PointerDownEvent == "" {
		m._PointerDownEvent = m.File().AsDot("PointerDownEvent")
	}
	return m._PointerDownEvent
}

func (m *Material) PointerDownEventListener() Qualifier {
	if m._PointerDownEventListener == "" {
		m._PointerDownEventListener = m.File().AsDot("PointerDownEventListener")
	}
	return m._PointerDownEventListener
}

func (m *Material) PointerEvent() Qualifier {
	if m._PointerEvent == "" {
		m._PointerEvent = m.File().AsDot("PointerEvent")
	}
	return m._PointerEvent
}

func (m *Material) PointerMoveEvent() Qualifier {
	if m._PointerMoveEvent == "" {
		m._PointerMoveEvent = m.File().AsDot("PointerMoveEvent")
	}
	return m._PointerMoveEvent
}

func (m *Material) PointerMoveEventListener() Qualifier {
	if m._PointerMoveEventListener == "" {
		m._PointerMoveEventListener = m.File().AsDot("PointerMoveEventListener")
	}
	return m._PointerMoveEventListener
}

func (m *Material) PointerUpEvent() Qualifier {
	if m._PointerUpEvent == "" {
		m._PointerUpEvent = m.File().AsDot("PointerUpEvent")
	}
	return m._PointerUpEvent
}

func (m *Material) PointerUpEventListener() Qualifier {
	if m._PointerUpEventListener == "" {
		m._PointerUpEventListener = m.File().AsDot("PointerUpEventListener")
	}
	return m._PointerUpEventListener
}

func (m *Material) PopupMenuButton() Qualifier {
	if m._PopupMenuButton == "" {
		m._PopupMenuButton = m.File().AsDot("PopupMenuButton")
	}
	return m._PopupMenuButton
}

func (m *Material) PopupMenuCanceled() Qualifier {
	if m._PopupMenuCanceled == "" {
		m._PopupMenuCanceled = m.File().AsDot("PopupMenuCanceled")
	}
	return m._PopupMenuCanceled
}

func (m *Material) PopupMenuDivider() Qualifier {
	if m._PopupMenuDivider == "" {
		m._PopupMenuDivider = m.File().AsDot("PopupMenuDivider")
	}
	return m._PopupMenuDivider
}

func (m *Material) PopupMenuEntry() Qualifier {
	if m._PopupMenuEntry == "" {
		m._PopupMenuEntry = m.File().AsDot("PopupMenuEntry")
	}
	return m._PopupMenuEntry
}

func (m *Material) PopupMenuItem() Qualifier {
	if m._PopupMenuItem == "" {
		m._PopupMenuItem = m.File().AsDot("PopupMenuItem")
	}
	return m._PopupMenuItem
}

func (m *Material) PopupMenuItemBuilder() Qualifier {
	if m._PopupMenuItemBuilder == "" {
		m._PopupMenuItemBuilder = m.File().AsDot("PopupMenuItemBuilder")
	}
	return m._PopupMenuItemBuilder
}

func (m *Material) PopupMenuItemSelected() Qualifier {
	if m._PopupMenuItemSelected == "" {
		m._PopupMenuItemSelected = m.File().AsDot("PopupMenuItemSelected")
	}
	return m._PopupMenuItemSelected
}

func (m *Material) PopupMenuItemState() Qualifier {
	if m._PopupMenuItemState == "" {
		m._PopupMenuItemState = m.File().AsDot("PopupMenuItemState")
	}
	return m._PopupMenuItemState
}

func (m *Material) PopupMenuTheme() Qualifier {
	if m._PopupMenuTheme == "" {
		m._PopupMenuTheme = m.File().AsDot("PopupMenuTheme")
	}
	return m._PopupMenuTheme
}

func (m *Material) PopupMenuThemeData() Qualifier {
	if m._PopupMenuThemeData == "" {
		m._PopupMenuThemeData = m.File().AsDot("PopupMenuThemeData")
	}
	return m._PopupMenuThemeData
}

func (m *Material) PopupRoute() Qualifier {
	if m._PopupRoute == "" {
		m._PopupRoute = m.File().AsDot("PopupRoute")
	}
	return m._PopupRoute
}

func (m *Material) Positioned() Qualifier {
	if m._Positioned == "" {
		m._Positioned = m.File().AsDot("Positioned")
	}
	return m._Positioned
}

func (m *Material) PositionedDirectional() Qualifier {
	if m._PositionedDirectional == "" {
		m._PositionedDirectional = m.File().AsDot("PositionedDirectional")
	}
	return m._PositionedDirectional
}

func (m *Material) PositionedTransition() Qualifier {
	if m._PositionedTransition == "" {
		m._PositionedTransition = m.File().AsDot("PositionedTransition")
	}
	return m._PositionedTransition
}

func (m *Material) PreferredSize() Qualifier {
	if m._PreferredSize == "" {
		m._PreferredSize = m.File().AsDot("PreferredSize")
	}
	return m._PreferredSize
}

func (m *Material) PreferredSizeWidget() Qualifier {
	if m._PreferredSizeWidget == "" {
		m._PreferredSizeWidget = m.File().AsDot("PreferredSizeWidget")
	}
	return m._PreferredSizeWidget
}

func (m *Material) PreviousFocusAction() Qualifier {
	if m._PreviousFocusAction == "" {
		m._PreviousFocusAction = m.File().AsDot("PreviousFocusAction")
	}
	return m._PreviousFocusAction
}

func (m *Material) PrimaryScrollController() Qualifier {
	if m._PrimaryScrollController == "" {
		m._PrimaryScrollController = m.File().AsDot("PrimaryScrollController")
	}
	return m._PrimaryScrollController
}

func (m *Material) ProgressIndicator() Qualifier {
	if m._ProgressIndicator == "" {
		m._ProgressIndicator = m.File().AsDot("ProgressIndicator")
	}
	return m._ProgressIndicator
}

func (m *Material) ProxyAnimation() Qualifier {
	if m._ProxyAnimation == "" {
		m._ProxyAnimation = m.File().AsDot("ProxyAnimation")
	}
	return m._ProxyAnimation
}

func (m *Material) ProxyElement() Qualifier {
	if m._ProxyElement == "" {
		m._ProxyElement = m.File().AsDot("ProxyElement")
	}
	return m._ProxyElement
}

func (m *Material) ProxyWidget() Qualifier {
	if m._ProxyWidget == "" {
		m._ProxyWidget = m.File().AsDot("ProxyWidget")
	}
	return m._ProxyWidget
}

func (m *Material) RRect() Qualifier {
	if m._RRect == "" {
		m._RRect = m.File().AsDot("RRect")
	}
	return m._RRect
}

func (m *Material) RSTransform() Qualifier {
	if m._RSTransform == "" {
		m._RSTransform = m.File().AsDot("RSTransform")
	}
	return m._RSTransform
}

func (m *Material) RadialGradient() Qualifier {
	if m._RadialGradient == "" {
		m._RadialGradient = m.File().AsDot("RadialGradient")
	}
	return m._RadialGradient
}

func (m *Material) Radio() Qualifier {
	if m._Radio == "" {
		m._Radio = m.File().AsDot("Radio")
	}
	return m._Radio
}

func (m *Material) RadioListTile() Qualifier {
	if m._RadioListTile == "" {
		m._RadioListTile = m.File().AsDot("RadioListTile")
	}
	return m._RadioListTile
}

func (m *Material) Radius() Qualifier {
	if m._Radius == "" {
		m._Radius = m.File().AsDot("Radius")
	}
	return m._Radius
}

func (m *Material) RaisedButton() Qualifier {
	if m._RaisedButton == "" {
		m._RaisedButton = m.File().AsDot("RaisedButton")
	}
	return m._RaisedButton
}

func (m *Material) RangeLabels() Qualifier {
	if m._RangeLabels == "" {
		m._RangeLabels = m.File().AsDot("RangeLabels")
	}
	return m._RangeLabels
}

func (m *Material) RangeSemanticFormatterCallback() Qualifier {
	if m._RangeSemanticFormatterCallback == "" {
		m._RangeSemanticFormatterCallback = m.File().AsDot("RangeSemanticFormatterCallback")
	}
	return m._RangeSemanticFormatterCallback
}

func (m *Material) RangeSlider() Qualifier {
	if m._RangeSlider == "" {
		m._RangeSlider = m.File().AsDot("RangeSlider")
	}
	return m._RangeSlider
}

func (m *Material) RangeSliderThumbShape() Qualifier {
	if m._RangeSliderThumbShape == "" {
		m._RangeSliderThumbShape = m.File().AsDot("RangeSliderThumbShape")
	}
	return m._RangeSliderThumbShape
}

func (m *Material) RangeSliderTickMarkShape() Qualifier {
	if m._RangeSliderTickMarkShape == "" {
		m._RangeSliderTickMarkShape = m.File().AsDot("RangeSliderTickMarkShape")
	}
	return m._RangeSliderTickMarkShape
}

func (m *Material) RangeSliderTrackShape() Qualifier {
	if m._RangeSliderTrackShape == "" {
		m._RangeSliderTrackShape = m.File().AsDot("RangeSliderTrackShape")
	}
	return m._RangeSliderTrackShape
}

func (m *Material) RangeSliderValueIndicatorShape() Qualifier {
	if m._RangeSliderValueIndicatorShape == "" {
		m._RangeSliderValueIndicatorShape = m.File().AsDot("RangeSliderValueIndicatorShape")
	}
	return m._RangeSliderValueIndicatorShape
}

func (m *Material) RangeThumbSelector() Qualifier {
	if m._RangeThumbSelector == "" {
		m._RangeThumbSelector = m.File().AsDot("RangeThumbSelector")
	}
	return m._RangeThumbSelector
}

func (m *Material) RangeValues() Qualifier {
	if m._RangeValues == "" {
		m._RangeValues = m.File().AsDot("RangeValues")
	}
	return m._RangeValues
}

func (m *Material) RawChip() Qualifier {
	if m._RawChip == "" {
		m._RawChip = m.File().AsDot("RawChip")
	}
	return m._RawChip
}

func (m *Material) RawGestureDetector() Qualifier {
	if m._RawGestureDetector == "" {
		m._RawGestureDetector = m.File().AsDot("RawGestureDetector")
	}
	return m._RawGestureDetector
}

func (m *Material) RawGestureDetectorState() Qualifier {
	if m._RawGestureDetectorState == "" {
		m._RawGestureDetectorState = m.File().AsDot("RawGestureDetectorState")
	}
	return m._RawGestureDetectorState
}

func (m *Material) RawImage() Qualifier {
	if m._RawImage == "" {
		m._RawImage = m.File().AsDot("RawImage")
	}
	return m._RawImage
}

func (m *Material) RawKeyEvent() Qualifier {
	if m._RawKeyEvent == "" {
		m._RawKeyEvent = m.File().AsDot("RawKeyEvent")
	}
	return m._RawKeyEvent
}

func (m *Material) RawKeyboardListener() Qualifier {
	if m._RawKeyboardListener == "" {
		m._RawKeyboardListener = m.File().AsDot("RawKeyboardListener")
	}
	return m._RawKeyboardListener
}

func (m *Material) RawMaterialButton() Qualifier {
	if m._RawMaterialButton == "" {
		m._RawMaterialButton = m.File().AsDot("RawMaterialButton")
	}
	return m._RawMaterialButton
}

func (m *Material) ReadingOrderTraversalPolicy() Qualifier {
	if m._ReadingOrderTraversalPolicy == "" {
		m._ReadingOrderTraversalPolicy = m.File().AsDot("ReadingOrderTraversalPolicy")
	}
	return m._ReadingOrderTraversalPolicy
}

func (m *Material) RebuildDirtyWidgetCallback() Qualifier {
	if m._RebuildDirtyWidgetCallback == "" {
		m._RebuildDirtyWidgetCallback = m.File().AsDot("RebuildDirtyWidgetCallback")
	}
	return m._RebuildDirtyWidgetCallback
}

func (m *Material) Rect() Qualifier {
	if m._Rect == "" {
		m._Rect = m.File().AsDot("Rect")
	}
	return m._Rect
}

func (m *Material) RectCallback() Qualifier {
	if m._RectCallback == "" {
		m._RectCallback = m.File().AsDot("RectCallback")
	}
	return m._RectCallback
}

func (m *Material) RectTween() Qualifier {
	if m._RectTween == "" {
		m._RectTween = m.File().AsDot("RectTween")
	}
	return m._RectTween
}

func (m *Material) RectangularRangeSliderTrackShape() Qualifier {
	if m._RectangularRangeSliderTrackShape == "" {
		m._RectangularRangeSliderTrackShape = m.File().AsDot("RectangularRangeSliderTrackShape")
	}
	return m._RectangularRangeSliderTrackShape
}

func (m *Material) RectangularSliderTrackShape() Qualifier {
	if m._RectangularSliderTrackShape == "" {
		m._RectangularSliderTrackShape = m.File().AsDot("RectangularSliderTrackShape")
	}
	return m._RectangularSliderTrackShape
}

func (m *Material) RefreshCallback() Qualifier {
	if m._RefreshCallback == "" {
		m._RefreshCallback = m.File().AsDot("RefreshCallback")
	}
	return m._RefreshCallback
}

func (m *Material) RefreshIndicator() Qualifier {
	if m._RefreshIndicator == "" {
		m._RefreshIndicator = m.File().AsDot("RefreshIndicator")
	}
	return m._RefreshIndicator
}

func (m *Material) RefreshIndicatorState() Qualifier {
	if m._RefreshIndicatorState == "" {
		m._RefreshIndicatorState = m.File().AsDot("RefreshIndicatorState")
	}
	return m._RefreshIndicatorState
}

func (m *Material) RefreshProgressIndicator() Qualifier {
	if m._RefreshProgressIndicator == "" {
		m._RefreshProgressIndicator = m.File().AsDot("RefreshProgressIndicator")
	}
	return m._RefreshProgressIndicator
}

func (m *Material) RelativePositionedTransition() Qualifier {
	if m._RelativePositionedTransition == "" {
		m._RelativePositionedTransition = m.File().AsDot("RelativePositionedTransition")
	}
	return m._RelativePositionedTransition
}

func (m *Material) RelativeRect() Qualifier {
	if m._RelativeRect == "" {
		m._RelativeRect = m.File().AsDot("RelativeRect")
	}
	return m._RelativeRect
}

func (m *Material) RelativeRectTween() Qualifier {
	if m._RelativeRectTween == "" {
		m._RelativeRectTween = m.File().AsDot("RelativeRectTween")
	}
	return m._RelativeRectTween
}

func (m *Material) RenderBox() Qualifier {
	if m._RenderBox == "" {
		m._RenderBox = m.File().AsDot("RenderBox")
	}
	return m._RenderBox
}

func (m *Material) RenderComparison() Qualifier {
	if m._RenderComparison == "" {
		m._RenderComparison = m.File().AsDot("RenderComparison")
	}
	return m._RenderComparison
}

func (m *Material) RenderConstrainedLayoutBuilder() Qualifier {
	if m._RenderConstrainedLayoutBuilder == "" {
		m._RenderConstrainedLayoutBuilder = m.File().AsDot("RenderConstrainedLayoutBuilder")
	}
	return m._RenderConstrainedLayoutBuilder
}

func (m *Material) RenderNestedScrollViewViewport() Qualifier {
	if m._RenderNestedScrollViewViewport == "" {
		m._RenderNestedScrollViewViewport = m.File().AsDot("RenderNestedScrollViewViewport")
	}
	return m._RenderNestedScrollViewViewport
}

func (m *Material) RenderObject() Qualifier {
	if m._RenderObject == "" {
		m._RenderObject = m.File().AsDot("RenderObject")
	}
	return m._RenderObject
}

func (m *Material) RenderObjectElement() Qualifier {
	if m._RenderObjectElement == "" {
		m._RenderObjectElement = m.File().AsDot("RenderObjectElement")
	}
	return m._RenderObjectElement
}

func (m *Material) RenderObjectToWidgetAdapter() Qualifier {
	if m._RenderObjectToWidgetAdapter == "" {
		m._RenderObjectToWidgetAdapter = m.File().AsDot("RenderObjectToWidgetAdapter")
	}
	return m._RenderObjectToWidgetAdapter
}

func (m *Material) RenderObjectToWidgetElement() Qualifier {
	if m._RenderObjectToWidgetElement == "" {
		m._RenderObjectToWidgetElement = m.File().AsDot("RenderObjectToWidgetElement")
	}
	return m._RenderObjectToWidgetElement
}

func (m *Material) RenderObjectWidget() Qualifier {
	if m._RenderObjectWidget == "" {
		m._RenderObjectWidget = m.File().AsDot("RenderObjectWidget")
	}
	return m._RenderObjectWidget
}

func (m *Material) RenderSemanticsGestureHandler() Qualifier {
	if m._RenderSemanticsGestureHandler == "" {
		m._RenderSemanticsGestureHandler = m.File().AsDot("RenderSemanticsGestureHandler")
	}
	return m._RenderSemanticsGestureHandler
}

func (m *Material) RenderSliverOverlapAbsorber() Qualifier {
	if m._RenderSliverOverlapAbsorber == "" {
		m._RenderSliverOverlapAbsorber = m.File().AsDot("RenderSliverOverlapAbsorber")
	}
	return m._RenderSliverOverlapAbsorber
}

func (m *Material) RenderSliverOverlapInjector() Qualifier {
	if m._RenderSliverOverlapInjector == "" {
		m._RenderSliverOverlapInjector = m.File().AsDot("RenderSliverOverlapInjector")
	}
	return m._RenderSliverOverlapInjector
}

func (m *Material) RenderToggleable() Qualifier {
	if m._RenderToggleable == "" {
		m._RenderToggleable = m.File().AsDot("RenderToggleable")
	}
	return m._RenderToggleable
}

func (m *Material) ReorderCallback() Qualifier {
	if m._ReorderCallback == "" {
		m._ReorderCallback = m.File().AsDot("ReorderCallback")
	}
	return m._ReorderCallback
}

func (m *Material) ReorderableListView() Qualifier {
	if m._ReorderableListView == "" {
		m._ReorderableListView = m.File().AsDot("ReorderableListView")
	}
	return m._ReorderableListView
}

func (m *Material) RepaintBoundary() Qualifier {
	if m._RepaintBoundary == "" {
		m._RepaintBoundary = m.File().AsDot("RepaintBoundary")
	}
	return m._RepaintBoundary
}

func (m *Material) RequestFocusAction() Qualifier {
	if m._RequestFocusAction == "" {
		m._RequestFocusAction = m.File().AsDot("RequestFocusAction")
	}
	return m._RequestFocusAction
}

func (m *Material) ResizeImage() Qualifier {
	if m._ResizeImage == "" {
		m._ResizeImage = m.File().AsDot("ResizeImage")
	}
	return m._ResizeImage
}

func (m *Material) ReverseAnimation() Qualifier {
	if m._ReverseAnimation == "" {
		m._ReverseAnimation = m.File().AsDot("ReverseAnimation")
	}
	return m._ReverseAnimation
}

func (m *Material) ReverseTween() Qualifier {
	if m._ReverseTween == "" {
		m._ReverseTween = m.File().AsDot("ReverseTween")
	}
	return m._ReverseTween
}

func (m *Material) RichText() Qualifier {
	if m._RichText == "" {
		m._RichText = m.File().AsDot("RichText")
	}
	return m._RichText
}

func (m *Material) RootRenderObjectElement() Qualifier {
	if m._RootRenderObjectElement == "" {
		m._RootRenderObjectElement = m.File().AsDot("RootRenderObjectElement")
	}
	return m._RootRenderObjectElement
}

func (m *Material) RotatedBox() Qualifier {
	if m._RotatedBox == "" {
		m._RotatedBox = m.File().AsDot("RotatedBox")
	}
	return m._RotatedBox
}

func (m *Material) RotationTransition() Qualifier {
	if m._RotationTransition == "" {
		m._RotationTransition = m.File().AsDot("RotationTransition")
	}
	return m._RotationTransition
}

func (m *Material) RoundRangeSliderThumbShape() Qualifier {
	if m._RoundRangeSliderThumbShape == "" {
		m._RoundRangeSliderThumbShape = m.File().AsDot("RoundRangeSliderThumbShape")
	}
	return m._RoundRangeSliderThumbShape
}

func (m *Material) RoundRangeSliderTickMarkShape() Qualifier {
	if m._RoundRangeSliderTickMarkShape == "" {
		m._RoundRangeSliderTickMarkShape = m.File().AsDot("RoundRangeSliderTickMarkShape")
	}
	return m._RoundRangeSliderTickMarkShape
}

func (m *Material) RoundSliderOverlayShape() Qualifier {
	if m._RoundSliderOverlayShape == "" {
		m._RoundSliderOverlayShape = m.File().AsDot("RoundSliderOverlayShape")
	}
	return m._RoundSliderOverlayShape
}

func (m *Material) RoundSliderThumbShape() Qualifier {
	if m._RoundSliderThumbShape == "" {
		m._RoundSliderThumbShape = m.File().AsDot("RoundSliderThumbShape")
	}
	return m._RoundSliderThumbShape
}

func (m *Material) RoundSliderTickMarkShape() Qualifier {
	if m._RoundSliderTickMarkShape == "" {
		m._RoundSliderTickMarkShape = m.File().AsDot("RoundSliderTickMarkShape")
	}
	return m._RoundSliderTickMarkShape
}

func (m *Material) RoundedRectRangeSliderTrackShape() Qualifier {
	if m._RoundedRectRangeSliderTrackShape == "" {
		m._RoundedRectRangeSliderTrackShape = m.File().AsDot("RoundedRectRangeSliderTrackShape")
	}
	return m._RoundedRectRangeSliderTrackShape
}

func (m *Material) RoundedRectSliderTrackShape() Qualifier {
	if m._RoundedRectSliderTrackShape == "" {
		m._RoundedRectSliderTrackShape = m.File().AsDot("RoundedRectSliderTrackShape")
	}
	return m._RoundedRectSliderTrackShape
}

func (m *Material) RoundedRectangleBorder() Qualifier {
	if m._RoundedRectangleBorder == "" {
		m._RoundedRectangleBorder = m.File().AsDot("RoundedRectangleBorder")
	}
	return m._RoundedRectangleBorder
}

func (m *Material) Route() Qualifier {
	if m._Route == "" {
		m._Route = m.File().AsDot("Route")
	}
	return m._Route
}

func (m *Material) RouteAware() Qualifier {
	if m._RouteAware == "" {
		m._RouteAware = m.File().AsDot("RouteAware")
	}
	return m._RouteAware
}

func (m *Material) RouteFactory() Qualifier {
	if m._RouteFactory == "" {
		m._RouteFactory = m.File().AsDot("RouteFactory")
	}
	return m._RouteFactory
}

func (m *Material) RouteObserver() Qualifier {
	if m._RouteObserver == "" {
		m._RouteObserver = m.File().AsDot("RouteObserver")
	}
	return m._RouteObserver
}

func (m *Material) RoutePageBuilder() Qualifier {
	if m._RoutePageBuilder == "" {
		m._RoutePageBuilder = m.File().AsDot("RoutePageBuilder")
	}
	return m._RoutePageBuilder
}

func (m *Material) RoutePopDisposition() Qualifier {
	if m._RoutePopDisposition == "" {
		m._RoutePopDisposition = m.File().AsDot("RoutePopDisposition")
	}
	return m._RoutePopDisposition
}

func (m *Material) RoutePredicate() Qualifier {
	if m._RoutePredicate == "" {
		m._RoutePredicate = m.File().AsDot("RoutePredicate")
	}
	return m._RoutePredicate
}

func (m *Material) RouteSettings() Qualifier {
	if m._RouteSettings == "" {
		m._RouteSettings = m.File().AsDot("RouteSettings")
	}
	return m._RouteSettings
}

func (m *Material) RouteTransitionsBuilder() Qualifier {
	if m._RouteTransitionsBuilder == "" {
		m._RouteTransitionsBuilder = m.File().AsDot("RouteTransitionsBuilder")
	}
	return m._RouteTransitionsBuilder
}

func (m *Material) Row() Qualifier {
	if m._Row == "" {
		m._Row = m.File().AsDot("Row")
	}
	return m._Row
}

func (m *Material) SafeArea() Qualifier {
	if m._SafeArea == "" {
		m._SafeArea = m.File().AsDot("SafeArea")
	}
	return m._SafeArea
}

func (m *Material) SawTooth() Qualifier {
	if m._SawTooth == "" {
		m._SawTooth = m.File().AsDot("SawTooth")
	}
	return m._SawTooth
}

func (m *Material) Scaffold() Qualifier {
	if m._Scaffold == "" {
		m._Scaffold = m.File().AsDot("Scaffold")
	}
	return m._Scaffold
}

func (m *Material) ScaffoldFeatureController() Qualifier {
	if m._ScaffoldFeatureController == "" {
		m._ScaffoldFeatureController = m.File().AsDot("ScaffoldFeatureController")
	}
	return m._ScaffoldFeatureController
}

func (m *Material) ScaffoldGeometry() Qualifier {
	if m._ScaffoldGeometry == "" {
		m._ScaffoldGeometry = m.File().AsDot("ScaffoldGeometry")
	}
	return m._ScaffoldGeometry
}

func (m *Material) ScaffoldPrelayoutGeometry() Qualifier {
	if m._ScaffoldPrelayoutGeometry == "" {
		m._ScaffoldPrelayoutGeometry = m.File().AsDot("ScaffoldPrelayoutGeometry")
	}
	return m._ScaffoldPrelayoutGeometry
}

func (m *Material) ScaffoldState() Qualifier {
	if m._ScaffoldState == "" {
		m._ScaffoldState = m.File().AsDot("ScaffoldState")
	}
	return m._ScaffoldState
}

func (m *Material) ScaleEndDetails() Qualifier {
	if m._ScaleEndDetails == "" {
		m._ScaleEndDetails = m.File().AsDot("ScaleEndDetails")
	}
	return m._ScaleEndDetails
}

func (m *Material) ScaleStartDetails() Qualifier {
	if m._ScaleStartDetails == "" {
		m._ScaleStartDetails = m.File().AsDot("ScaleStartDetails")
	}
	return m._ScaleStartDetails
}

func (m *Material) ScaleTransition() Qualifier {
	if m._ScaleTransition == "" {
		m._ScaleTransition = m.File().AsDot("ScaleTransition")
	}
	return m._ScaleTransition
}

func (m *Material) ScaleUpdateDetails() Qualifier {
	if m._ScaleUpdateDetails == "" {
		m._ScaleUpdateDetails = m.File().AsDot("ScaleUpdateDetails")
	}
	return m._ScaleUpdateDetails
}

func (m *Material) ScriptCategory() Qualifier {
	if m._ScriptCategory == "" {
		m._ScriptCategory = m.File().AsDot("ScriptCategory")
	}
	return m._ScriptCategory
}

func (m *Material) ScrollActivity() Qualifier {
	if m._ScrollActivity == "" {
		m._ScrollActivity = m.File().AsDot("ScrollActivity")
	}
	return m._ScrollActivity
}

func (m *Material) ScrollActivityDelegate() Qualifier {
	if m._ScrollActivityDelegate == "" {
		m._ScrollActivityDelegate = m.File().AsDot("ScrollActivityDelegate")
	}
	return m._ScrollActivityDelegate
}

func (m *Material) ScrollBehavior() Qualifier {
	if m._ScrollBehavior == "" {
		m._ScrollBehavior = m.File().AsDot("ScrollBehavior")
	}
	return m._ScrollBehavior
}

func (m *Material) ScrollConfiguration() Qualifier {
	if m._ScrollConfiguration == "" {
		m._ScrollConfiguration = m.File().AsDot("ScrollConfiguration")
	}
	return m._ScrollConfiguration
}

func (m *Material) ScrollContext() Qualifier {
	if m._ScrollContext == "" {
		m._ScrollContext = m.File().AsDot("ScrollContext")
	}
	return m._ScrollContext
}

func (m *Material) ScrollController() Qualifier {
	if m._ScrollController == "" {
		m._ScrollController = m.File().AsDot("ScrollController")
	}
	return m._ScrollController
}

func (m *Material) ScrollDragController() Qualifier {
	if m._ScrollDragController == "" {
		m._ScrollDragController = m.File().AsDot("ScrollDragController")
	}
	return m._ScrollDragController
}

func (m *Material) ScrollEndNotification() Qualifier {
	if m._ScrollEndNotification == "" {
		m._ScrollEndNotification = m.File().AsDot("ScrollEndNotification")
	}
	return m._ScrollEndNotification
}

func (m *Material) ScrollHoldController() Qualifier {
	if m._ScrollHoldController == "" {
		m._ScrollHoldController = m.File().AsDot("ScrollHoldController")
	}
	return m._ScrollHoldController
}

func (m *Material) ScrollMetrics() Qualifier {
	if m._ScrollMetrics == "" {
		m._ScrollMetrics = m.File().AsDot("ScrollMetrics")
	}
	return m._ScrollMetrics
}

func (m *Material) ScrollNotification() Qualifier {
	if m._ScrollNotification == "" {
		m._ScrollNotification = m.File().AsDot("ScrollNotification")
	}
	return m._ScrollNotification
}

func (m *Material) ScrollNotificationPredicate() Qualifier {
	if m._ScrollNotificationPredicate == "" {
		m._ScrollNotificationPredicate = m.File().AsDot("ScrollNotificationPredicate")
	}
	return m._ScrollNotificationPredicate
}

func (m *Material) ScrollPhysics() Qualifier {
	if m._ScrollPhysics == "" {
		m._ScrollPhysics = m.File().AsDot("ScrollPhysics")
	}
	return m._ScrollPhysics
}

func (m *Material) ScrollPosition() Qualifier {
	if m._ScrollPosition == "" {
		m._ScrollPosition = m.File().AsDot("ScrollPosition")
	}
	return m._ScrollPosition
}

func (m *Material) ScrollPositionWithSingleContext() Qualifier {
	if m._ScrollPositionWithSingleContext == "" {
		m._ScrollPositionWithSingleContext = m.File().AsDot("ScrollPositionWithSingleContext")
	}
	return m._ScrollPositionWithSingleContext
}

func (m *Material) ScrollSpringSimulation() Qualifier {
	if m._ScrollSpringSimulation == "" {
		m._ScrollSpringSimulation = m.File().AsDot("ScrollSpringSimulation")
	}
	return m._ScrollSpringSimulation
}

func (m *Material) ScrollStartNotification() Qualifier {
	if m._ScrollStartNotification == "" {
		m._ScrollStartNotification = m.File().AsDot("ScrollStartNotification")
	}
	return m._ScrollStartNotification
}

func (m *Material) ScrollUpdateNotification() Qualifier {
	if m._ScrollUpdateNotification == "" {
		m._ScrollUpdateNotification = m.File().AsDot("ScrollUpdateNotification")
	}
	return m._ScrollUpdateNotification
}

func (m *Material) ScrollView() Qualifier {
	if m._ScrollView == "" {
		m._ScrollView = m.File().AsDot("ScrollView")
	}
	return m._ScrollView
}

func (m *Material) Scrollable() Qualifier {
	if m._Scrollable == "" {
		m._Scrollable = m.File().AsDot("Scrollable")
	}
	return m._Scrollable
}

func (m *Material) ScrollableState() Qualifier {
	if m._ScrollableState == "" {
		m._ScrollableState = m.File().AsDot("ScrollableState")
	}
	return m._ScrollableState
}

func (m *Material) ScrollableWidgetBuilder() Qualifier {
	if m._ScrollableWidgetBuilder == "" {
		m._ScrollableWidgetBuilder = m.File().AsDot("ScrollableWidgetBuilder")
	}
	return m._ScrollableWidgetBuilder
}

func (m *Material) Scrollbar() Qualifier {
	if m._Scrollbar == "" {
		m._Scrollbar = m.File().AsDot("Scrollbar")
	}
	return m._Scrollbar
}

func (m *Material) ScrollbarPainter() Qualifier {
	if m._ScrollbarPainter == "" {
		m._ScrollbarPainter = m.File().AsDot("ScrollbarPainter")
	}
	return m._ScrollbarPainter
}

func (m *Material) SearchDelegate() Qualifier {
	if m._SearchDelegate == "" {
		m._SearchDelegate = m.File().AsDot("SearchDelegate")
	}
	return m._SearchDelegate
}

func (m *Material) SelectAction() Qualifier {
	if m._SelectAction == "" {
		m._SelectAction = m.File().AsDot("SelectAction")
	}
	return m._SelectAction
}

func (m *Material) SelectableChipAttributes() Qualifier {
	if m._SelectableChipAttributes == "" {
		m._SelectableChipAttributes = m.File().AsDot("SelectableChipAttributes")
	}
	return m._SelectableChipAttributes
}

func (m *Material) SelectableDayPredicate() Qualifier {
	if m._SelectableDayPredicate == "" {
		m._SelectableDayPredicate = m.File().AsDot("SelectableDayPredicate")
	}
	return m._SelectableDayPredicate
}

func (m *Material) SelectableText() Qualifier {
	if m._SelectableText == "" {
		m._SelectableText = m.File().AsDot("SelectableText")
	}
	return m._SelectableText
}

func (m *Material) SelectionChangedCallback() Qualifier {
	if m._SelectionChangedCallback == "" {
		m._SelectionChangedCallback = m.File().AsDot("SelectionChangedCallback")
	}
	return m._SelectionChangedCallback
}

func (m *Material) SelectionChangedCause() Qualifier {
	if m._SelectionChangedCause == "" {
		m._SelectionChangedCause = m.File().AsDot("SelectionChangedCause")
	}
	return m._SelectionChangedCause
}

func (m *Material) SemanticFormatterCallback() Qualifier {
	if m._SemanticFormatterCallback == "" {
		m._SemanticFormatterCallback = m.File().AsDot("SemanticFormatterCallback")
	}
	return m._SemanticFormatterCallback
}

func (m *Material) SemanticIndexCallback() Qualifier {
	if m._SemanticIndexCallback == "" {
		m._SemanticIndexCallback = m.File().AsDot("SemanticIndexCallback")
	}
	return m._SemanticIndexCallback
}

func (m *Material) Semantics() Qualifier {
	if m._Semantics == "" {
		m._Semantics = m.File().AsDot("Semantics")
	}
	return m._Semantics
}

func (m *Material) SemanticsBuilderCallback() Qualifier {
	if m._SemanticsBuilderCallback == "" {
		m._SemanticsBuilderCallback = m.File().AsDot("SemanticsBuilderCallback")
	}
	return m._SemanticsBuilderCallback
}

func (m *Material) SemanticsDebugger() Qualifier {
	if m._SemanticsDebugger == "" {
		m._SemanticsDebugger = m.File().AsDot("SemanticsDebugger")
	}
	return m._SemanticsDebugger
}

func (m *Material) SemanticsGestureDelegate() Qualifier {
	if m._SemanticsGestureDelegate == "" {
		m._SemanticsGestureDelegate = m.File().AsDot("SemanticsGestureDelegate")
	}
	return m._SemanticsGestureDelegate
}

func (m *Material) Shader() Qualifier {
	if m._Shader == "" {
		m._Shader = m.File().AsDot("Shader")
	}
	return m._Shader
}

func (m *Material) ShaderCallback() Qualifier {
	if m._ShaderCallback == "" {
		m._ShaderCallback = m.File().AsDot("ShaderCallback")
	}
	return m._ShaderCallback
}

func (m *Material) ShaderMask() Qualifier {
	if m._ShaderMask == "" {
		m._ShaderMask = m.File().AsDot("ShaderMask")
	}
	return m._ShaderMask
}

func (m *Material) ShaderWarmUp() Qualifier {
	if m._ShaderWarmUp == "" {
		m._ShaderWarmUp = m.File().AsDot("ShaderWarmUp")
	}
	return m._ShaderWarmUp
}

func (m *Material) Shadow() Qualifier {
	if m._Shadow == "" {
		m._Shadow = m.File().AsDot("Shadow")
	}
	return m._Shadow
}

func (m *Material) ShapeBorder() Qualifier {
	if m._ShapeBorder == "" {
		m._ShapeBorder = m.File().AsDot("ShapeBorder")
	}
	return m._ShapeBorder
}

func (m *Material) ShapeBorderClipper() Qualifier {
	if m._ShapeBorderClipper == "" {
		m._ShapeBorderClipper = m.File().AsDot("ShapeBorderClipper")
	}
	return m._ShapeBorderClipper
}

func (m *Material) ShapeBorderTween() Qualifier {
	if m._ShapeBorderTween == "" {
		m._ShapeBorderTween = m.File().AsDot("ShapeBorderTween")
	}
	return m._ShapeBorderTween
}

func (m *Material) ShapeDecoration() Qualifier {
	if m._ShapeDecoration == "" {
		m._ShapeDecoration = m.File().AsDot("ShapeDecoration")
	}
	return m._ShapeDecoration
}

func (m *Material) ShortcutManager() Qualifier {
	if m._ShortcutManager == "" {
		m._ShortcutManager = m.File().AsDot("ShortcutManager")
	}
	return m._ShortcutManager
}

func (m *Material) Shortcuts() Qualifier {
	if m._Shortcuts == "" {
		m._Shortcuts = m.File().AsDot("Shortcuts")
	}
	return m._Shortcuts
}

func (m *Material) ShowValueIndicator() Qualifier {
	if m._ShowValueIndicator == "" {
		m._ShowValueIndicator = m.File().AsDot("ShowValueIndicator")
	}
	return m._ShowValueIndicator
}

func (m *Material) ShrinkWrappingViewport() Qualifier {
	if m._ShrinkWrappingViewport == "" {
		m._ShrinkWrappingViewport = m.File().AsDot("ShrinkWrappingViewport")
	}
	return m._ShrinkWrappingViewport
}

func (m *Material) SimpleDialog() Qualifier {
	if m._SimpleDialog == "" {
		m._SimpleDialog = m.File().AsDot("SimpleDialog")
	}
	return m._SimpleDialog
}

func (m *Material) SimpleDialogOption() Qualifier {
	if m._SimpleDialogOption == "" {
		m._SimpleDialogOption = m.File().AsDot("SimpleDialogOption")
	}
	return m._SimpleDialogOption
}

func (m *Material) Simulation() Qualifier {
	if m._Simulation == "" {
		m._Simulation = m.File().AsDot("Simulation")
	}
	return m._Simulation
}

func (m *Material) SingleChildLayoutDelegate() Qualifier {
	if m._SingleChildLayoutDelegate == "" {
		m._SingleChildLayoutDelegate = m.File().AsDot("SingleChildLayoutDelegate")
	}
	return m._SingleChildLayoutDelegate
}

func (m *Material) SingleChildRenderObjectElement() Qualifier {
	if m._SingleChildRenderObjectElement == "" {
		m._SingleChildRenderObjectElement = m.File().AsDot("SingleChildRenderObjectElement")
	}
	return m._SingleChildRenderObjectElement
}

func (m *Material) SingleChildRenderObjectWidget() Qualifier {
	if m._SingleChildRenderObjectWidget == "" {
		m._SingleChildRenderObjectWidget = m.File().AsDot("SingleChildRenderObjectWidget")
	}
	return m._SingleChildRenderObjectWidget
}

func (m *Material) SingleChildScrollView() Qualifier {
	if m._SingleChildScrollView == "" {
		m._SingleChildScrollView = m.File().AsDot("SingleChildScrollView")
	}
	return m._SingleChildScrollView
}

func (m *Material) SingleTickerProviderStateMixin() Qualifier {
	if m._SingleTickerProviderStateMixin == "" {
		m._SingleTickerProviderStateMixin = m.File().AsDot("SingleTickerProviderStateMixin")
	}
	return m._SingleTickerProviderStateMixin
}

func (m *Material) Size() Qualifier {
	if m._Size == "" {
		m._Size = m.File().AsDot("Size")
	}
	return m._Size
}

func (m *Material) SizeChangedLayoutNotification() Qualifier {
	if m._SizeChangedLayoutNotification == "" {
		m._SizeChangedLayoutNotification = m.File().AsDot("SizeChangedLayoutNotification")
	}
	return m._SizeChangedLayoutNotification
}

func (m *Material) SizeChangedLayoutNotifier() Qualifier {
	if m._SizeChangedLayoutNotifier == "" {
		m._SizeChangedLayoutNotifier = m.File().AsDot("SizeChangedLayoutNotifier")
	}
	return m._SizeChangedLayoutNotifier
}

func (m *Material) SizeTransition() Qualifier {
	if m._SizeTransition == "" {
		m._SizeTransition = m.File().AsDot("SizeTransition")
	}
	return m._SizeTransition
}

func (m *Material) SizeTween() Qualifier {
	if m._SizeTween == "" {
		m._SizeTween = m.File().AsDot("SizeTween")
	}
	return m._SizeTween
}

func (m *Material) SizedBox() Qualifier {
	if m._SizedBox == "" {
		m._SizedBox = m.File().AsDot("SizedBox")
	}
	return m._SizedBox
}

func (m *Material) SizedOverflowBox() Qualifier {
	if m._SizedOverflowBox == "" {
		m._SizedOverflowBox = m.File().AsDot("SizedOverflowBox")
	}
	return m._SizedOverflowBox
}

func (m *Material) SlideTransition() Qualifier {
	if m._SlideTransition == "" {
		m._SlideTransition = m.File().AsDot("SlideTransition")
	}
	return m._SlideTransition
}

func (m *Material) Slider() Qualifier {
	if m._Slider == "" {
		m._Slider = m.File().AsDot("Slider")
	}
	return m._Slider
}

func (m *Material) SliderComponentShape() Qualifier {
	if m._SliderComponentShape == "" {
		m._SliderComponentShape = m.File().AsDot("SliderComponentShape")
	}
	return m._SliderComponentShape
}

func (m *Material) SliderTheme() Qualifier {
	if m._SliderTheme == "" {
		m._SliderTheme = m.File().AsDot("SliderTheme")
	}
	return m._SliderTheme
}

func (m *Material) SliderThemeData() Qualifier {
	if m._SliderThemeData == "" {
		m._SliderThemeData = m.File().AsDot("SliderThemeData")
	}
	return m._SliderThemeData
}

func (m *Material) SliderTickMarkShape() Qualifier {
	if m._SliderTickMarkShape == "" {
		m._SliderTickMarkShape = m.File().AsDot("SliderTickMarkShape")
	}
	return m._SliderTickMarkShape
}

func (m *Material) SliderTrackShape() Qualifier {
	if m._SliderTrackShape == "" {
		m._SliderTrackShape = m.File().AsDot("SliderTrackShape")
	}
	return m._SliderTrackShape
}

func (m *Material) SliverAnimatedList() Qualifier {
	if m._SliverAnimatedList == "" {
		m._SliverAnimatedList = m.File().AsDot("SliverAnimatedList")
	}
	return m._SliverAnimatedList
}

func (m *Material) SliverAnimatedListState() Qualifier {
	if m._SliverAnimatedListState == "" {
		m._SliverAnimatedListState = m.File().AsDot("SliverAnimatedListState")
	}
	return m._SliverAnimatedListState
}

func (m *Material) SliverAppBar() Qualifier {
	if m._SliverAppBar == "" {
		m._SliverAppBar = m.File().AsDot("SliverAppBar")
	}
	return m._SliverAppBar
}

func (m *Material) SliverChildBuilderDelegate() Qualifier {
	if m._SliverChildBuilderDelegate == "" {
		m._SliverChildBuilderDelegate = m.File().AsDot("SliverChildBuilderDelegate")
	}
	return m._SliverChildBuilderDelegate
}

func (m *Material) SliverChildDelegate() Qualifier {
	if m._SliverChildDelegate == "" {
		m._SliverChildDelegate = m.File().AsDot("SliverChildDelegate")
	}
	return m._SliverChildDelegate
}

func (m *Material) SliverChildListDelegate() Qualifier {
	if m._SliverChildListDelegate == "" {
		m._SliverChildListDelegate = m.File().AsDot("SliverChildListDelegate")
	}
	return m._SliverChildListDelegate
}

func (m *Material) SliverFillRemaining() Qualifier {
	if m._SliverFillRemaining == "" {
		m._SliverFillRemaining = m.File().AsDot("SliverFillRemaining")
	}
	return m._SliverFillRemaining
}

func (m *Material) SliverFillViewport() Qualifier {
	if m._SliverFillViewport == "" {
		m._SliverFillViewport = m.File().AsDot("SliverFillViewport")
	}
	return m._SliverFillViewport
}

func (m *Material) SliverFixedExtentList() Qualifier {
	if m._SliverFixedExtentList == "" {
		m._SliverFixedExtentList = m.File().AsDot("SliverFixedExtentList")
	}
	return m._SliverFixedExtentList
}

func (m *Material) SliverGrid() Qualifier {
	if m._SliverGrid == "" {
		m._SliverGrid = m.File().AsDot("SliverGrid")
	}
	return m._SliverGrid
}

func (m *Material) SliverGridDelegate() Qualifier {
	if m._SliverGridDelegate == "" {
		m._SliverGridDelegate = m.File().AsDot("SliverGridDelegate")
	}
	return m._SliverGridDelegate
}

func (m *Material) SliverGridDelegateWithFixedCrossAxisCount() Qualifier {
	if m._SliverGridDelegateWithFixedCrossAxisCount == "" {
		m._SliverGridDelegateWithFixedCrossAxisCount = m.File().AsDot("SliverGridDelegateWithFixedCrossAxisCount")
	}
	return m._SliverGridDelegateWithFixedCrossAxisCount
}

func (m *Material) SliverGridDelegateWithMaxCrossAxisExtent() Qualifier {
	if m._SliverGridDelegateWithMaxCrossAxisExtent == "" {
		m._SliverGridDelegateWithMaxCrossAxisExtent = m.File().AsDot("SliverGridDelegateWithMaxCrossAxisExtent")
	}
	return m._SliverGridDelegateWithMaxCrossAxisExtent
}

func (m *Material) SliverLayoutBuilder() Qualifier {
	if m._SliverLayoutBuilder == "" {
		m._SliverLayoutBuilder = m.File().AsDot("SliverLayoutBuilder")
	}
	return m._SliverLayoutBuilder
}

func (m *Material) SliverLayoutWidgetBuilder() Qualifier {
	if m._SliverLayoutWidgetBuilder == "" {
		m._SliverLayoutWidgetBuilder = m.File().AsDot("SliverLayoutWidgetBuilder")
	}
	return m._SliverLayoutWidgetBuilder
}

func (m *Material) SliverList() Qualifier {
	if m._SliverList == "" {
		m._SliverList = m.File().AsDot("SliverList")
	}
	return m._SliverList
}

func (m *Material) SliverMultiBoxAdaptorElement() Qualifier {
	if m._SliverMultiBoxAdaptorElement == "" {
		m._SliverMultiBoxAdaptorElement = m.File().AsDot("SliverMultiBoxAdaptorElement")
	}
	return m._SliverMultiBoxAdaptorElement
}

func (m *Material) SliverMultiBoxAdaptorWidget() Qualifier {
	if m._SliverMultiBoxAdaptorWidget == "" {
		m._SliverMultiBoxAdaptorWidget = m.File().AsDot("SliverMultiBoxAdaptorWidget")
	}
	return m._SliverMultiBoxAdaptorWidget
}

func (m *Material) SliverOverlapAbsorber() Qualifier {
	if m._SliverOverlapAbsorber == "" {
		m._SliverOverlapAbsorber = m.File().AsDot("SliverOverlapAbsorber")
	}
	return m._SliverOverlapAbsorber
}

func (m *Material) SliverOverlapAbsorberHandle() Qualifier {
	if m._SliverOverlapAbsorberHandle == "" {
		m._SliverOverlapAbsorberHandle = m.File().AsDot("SliverOverlapAbsorberHandle")
	}
	return m._SliverOverlapAbsorberHandle
}

func (m *Material) SliverOverlapInjector() Qualifier {
	if m._SliverOverlapInjector == "" {
		m._SliverOverlapInjector = m.File().AsDot("SliverOverlapInjector")
	}
	return m._SliverOverlapInjector
}

func (m *Material) SliverPadding() Qualifier {
	if m._SliverPadding == "" {
		m._SliverPadding = m.File().AsDot("SliverPadding")
	}
	return m._SliverPadding
}

func (m *Material) SliverPersistentHeader() Qualifier {
	if m._SliverPersistentHeader == "" {
		m._SliverPersistentHeader = m.File().AsDot("SliverPersistentHeader")
	}
	return m._SliverPersistentHeader
}

func (m *Material) SliverPersistentHeaderDelegate() Qualifier {
	if m._SliverPersistentHeaderDelegate == "" {
		m._SliverPersistentHeaderDelegate = m.File().AsDot("SliverPersistentHeaderDelegate")
	}
	return m._SliverPersistentHeaderDelegate
}

func (m *Material) SliverPrototypeExtentList() Qualifier {
	if m._SliverPrototypeExtentList == "" {
		m._SliverPrototypeExtentList = m.File().AsDot("SliverPrototypeExtentList")
	}
	return m._SliverPrototypeExtentList
}

func (m *Material) SliverSafeArea() Qualifier {
	if m._SliverSafeArea == "" {
		m._SliverSafeArea = m.File().AsDot("SliverSafeArea")
	}
	return m._SliverSafeArea
}

func (m *Material) SliverToBoxAdapter() Qualifier {
	if m._SliverToBoxAdapter == "" {
		m._SliverToBoxAdapter = m.File().AsDot("SliverToBoxAdapter")
	}
	return m._SliverToBoxAdapter
}

func (m *Material) SliverWithKeepAliveWidget() Qualifier {
	if m._SliverWithKeepAliveWidget == "" {
		m._SliverWithKeepAliveWidget = m.File().AsDot("SliverWithKeepAliveWidget")
	}
	return m._SliverWithKeepAliveWidget
}

func (m *Material) SnackBar() Qualifier {
	if m._SnackBar == "" {
		m._SnackBar = m.File().AsDot("SnackBar")
	}
	return m._SnackBar
}

func (m *Material) SnackBarAction() Qualifier {
	if m._SnackBarAction == "" {
		m._SnackBarAction = m.File().AsDot("SnackBarAction")
	}
	return m._SnackBarAction
}

func (m *Material) SnackBarBehavior() Qualifier {
	if m._SnackBarBehavior == "" {
		m._SnackBarBehavior = m.File().AsDot("SnackBarBehavior")
	}
	return m._SnackBarBehavior
}

func (m *Material) SnackBarClosedReason() Qualifier {
	if m._SnackBarClosedReason == "" {
		m._SnackBarClosedReason = m.File().AsDot("SnackBarClosedReason")
	}
	return m._SnackBarClosedReason
}

func (m *Material) SnackBarThemeData() Qualifier {
	if m._SnackBarThemeData == "" {
		m._SnackBarThemeData = m.File().AsDot("SnackBarThemeData")
	}
	return m._SnackBarThemeData
}

func (m *Material) Spacer() Qualifier {
	if m._Spacer == "" {
		m._Spacer = m.File().AsDot("Spacer")
	}
	return m._Spacer
}

func (m *Material) Stack() Qualifier {
	if m._Stack == "" {
		m._Stack = m.File().AsDot("Stack")
	}
	return m._Stack
}

func (m *Material) StackFit() Qualifier {
	if m._StackFit == "" {
		m._StackFit = m.File().AsDot("StackFit")
	}
	return m._StackFit
}

func (m *Material) StadiumBorder() Qualifier {
	if m._StadiumBorder == "" {
		m._StadiumBorder = m.File().AsDot("StadiumBorder")
	}
	return m._StadiumBorder
}

func (m *Material) State() Qualifier {
	if m._State == "" {
		m._State = m.File().AsDot("State")
	}
	return m._State
}

func (m *Material) StateSetter() Qualifier {
	if m._StateSetter == "" {
		m._StateSetter = m.File().AsDot("StateSetter")
	}
	return m._StateSetter
}

func (m *Material) StatefulBuilder() Qualifier {
	if m._StatefulBuilder == "" {
		m._StatefulBuilder = m.File().AsDot("StatefulBuilder")
	}
	return m._StatefulBuilder
}

func (m *Material) StatefulElement() Qualifier {
	if m._StatefulElement == "" {
		m._StatefulElement = m.File().AsDot("StatefulElement")
	}
	return m._StatefulElement
}

func (m *Material) StatefulWidget() Qualifier {
	if m._StatefulWidget == "" {
		m._StatefulWidget = m.File().AsDot("StatefulWidget")
	}
	return m._StatefulWidget
}

func (m *Material) StatefulWidgetBuilder() Qualifier {
	if m._StatefulWidgetBuilder == "" {
		m._StatefulWidgetBuilder = m.File().AsDot("StatefulWidgetBuilder")
	}
	return m._StatefulWidgetBuilder
}

func (m *Material) StatelessElement() Qualifier {
	if m._StatelessElement == "" {
		m._StatelessElement = m.File().AsDot("StatelessElement")
	}
	return m._StatelessElement
}

func (m *Material) StatelessWidget() Qualifier {
	if m._StatelessWidget == "" {
		m._StatelessWidget = m.File().AsDot("StatelessWidget")
	}
	return m._StatelessWidget
}

func (m *Material) StatusTransitionWidget() Qualifier {
	if m._StatusTransitionWidget == "" {
		m._StatusTransitionWidget = m.File().AsDot("StatusTransitionWidget")
	}
	return m._StatusTransitionWidget
}

func (m *Material) Step() Qualifier {
	if m._Step == "" {
		m._Step = m.File().AsDot("Step")
	}
	return m._Step
}

func (m *Material) StepState() Qualifier {
	if m._StepState == "" {
		m._StepState = m.File().AsDot("StepState")
	}
	return m._StepState
}

func (m *Material) StepTween() Qualifier {
	if m._StepTween == "" {
		m._StepTween = m.File().AsDot("StepTween")
	}
	return m._StepTween
}

func (m *Material) Stepper() Qualifier {
	if m._Stepper == "" {
		m._Stepper = m.File().AsDot("Stepper")
	}
	return m._Stepper
}

func (m *Material) StepperType() Qualifier {
	if m._StepperType == "" {
		m._StepperType = m.File().AsDot("StepperType")
	}
	return m._StepperType
}

func (m *Material) StreamBuilder() Qualifier {
	if m._StreamBuilder == "" {
		m._StreamBuilder = m.File().AsDot("StreamBuilder")
	}
	return m._StreamBuilder
}

func (m *Material) StreamBuilderBase() Qualifier {
	if m._StreamBuilderBase == "" {
		m._StreamBuilderBase = m.File().AsDot("StreamBuilderBase")
	}
	return m._StreamBuilderBase
}

func (m *Material) StrokeCap() Qualifier {
	if m._StrokeCap == "" {
		m._StrokeCap = m.File().AsDot("StrokeCap")
	}
	return m._StrokeCap
}

func (m *Material) StrokeJoin() Qualifier {
	if m._StrokeJoin == "" {
		m._StrokeJoin = m.File().AsDot("StrokeJoin")
	}
	return m._StrokeJoin
}

func (m *Material) StrutStyle() Qualifier {
	if m._StrutStyle == "" {
		m._StrutStyle = m.File().AsDot("StrutStyle")
	}
	return m._StrutStyle
}

func (m *Material) SweepGradient() Qualifier {
	if m._SweepGradient == "" {
		m._SweepGradient = m.File().AsDot("SweepGradient")
	}
	return m._SweepGradient
}

func (m *Material) Switch() Qualifier {
	if m._Switch == "" {
		m._Switch = m.File().AsDot("Switch")
	}
	return m._Switch
}

func (m *Material) SwitchListTile() Qualifier {
	if m._SwitchListTile == "" {
		m._SwitchListTile = m.File().AsDot("SwitchListTile")
	}
	return m._SwitchListTile
}

func (m *Material) Tab() Qualifier {
	if m._Tab == "" {
		m._Tab = m.File().AsDot("Tab")
	}
	return m._Tab
}

func (m *Material) TabBar() Qualifier {
	if m._TabBar == "" {
		m._TabBar = m.File().AsDot("TabBar")
	}
	return m._TabBar
}

func (m *Material) TabBarIndicatorSize() Qualifier {
	if m._TabBarIndicatorSize == "" {
		m._TabBarIndicatorSize = m.File().AsDot("TabBarIndicatorSize")
	}
	return m._TabBarIndicatorSize
}

func (m *Material) TabBarTheme() Qualifier {
	if m._TabBarTheme == "" {
		m._TabBarTheme = m.File().AsDot("TabBarTheme")
	}
	return m._TabBarTheme
}

func (m *Material) TabBarView() Qualifier {
	if m._TabBarView == "" {
		m._TabBarView = m.File().AsDot("TabBarView")
	}
	return m._TabBarView
}

func (m *Material) TabController() Qualifier {
	if m._TabController == "" {
		m._TabController = m.File().AsDot("TabController")
	}
	return m._TabController
}

func (m *Material) TabPageSelector() Qualifier {
	if m._TabPageSelector == "" {
		m._TabPageSelector = m.File().AsDot("TabPageSelector")
	}
	return m._TabPageSelector
}

func (m *Material) TabPageSelectorIndicator() Qualifier {
	if m._TabPageSelectorIndicator == "" {
		m._TabPageSelectorIndicator = m.File().AsDot("TabPageSelectorIndicator")
	}
	return m._TabPageSelectorIndicator
}

func (m *Material) Table() Qualifier {
	if m._Table == "" {
		m._Table = m.File().AsDot("Table")
	}
	return m._Table
}

func (m *Material) TableBorder() Qualifier {
	if m._TableBorder == "" {
		m._TableBorder = m.File().AsDot("TableBorder")
	}
	return m._TableBorder
}

func (m *Material) TableCell() Qualifier {
	if m._TableCell == "" {
		m._TableCell = m.File().AsDot("TableCell")
	}
	return m._TableCell
}

func (m *Material) TableCellVerticalAlignment() Qualifier {
	if m._TableCellVerticalAlignment == "" {
		m._TableCellVerticalAlignment = m.File().AsDot("TableCellVerticalAlignment")
	}
	return m._TableCellVerticalAlignment
}

func (m *Material) TableColumnWidth() Qualifier {
	if m._TableColumnWidth == "" {
		m._TableColumnWidth = m.File().AsDot("TableColumnWidth")
	}
	return m._TableColumnWidth
}

func (m *Material) TableRow() Qualifier {
	if m._TableRow == "" {
		m._TableRow = m.File().AsDot("TableRow")
	}
	return m._TableRow
}

func (m *Material) TableRowInkWell() Qualifier {
	if m._TableRowInkWell == "" {
		m._TableRowInkWell = m.File().AsDot("TableRowInkWell")
	}
	return m._TableRowInkWell
}

func (m *Material) TapDownDetails() Qualifier {
	if m._TapDownDetails == "" {
		m._TapDownDetails = m.File().AsDot("TapDownDetails")
	}
	return m._TapDownDetails
}

func (m *Material) TapUpDetails() Qualifier {
	if m._TapUpDetails == "" {
		m._TapUpDetails = m.File().AsDot("TapUpDetails")
	}
	return m._TapUpDetails
}

func (m *Material) TappableChipAttributes() Qualifier {
	if m._TappableChipAttributes == "" {
		m._TappableChipAttributes = m.File().AsDot("TappableChipAttributes")
	}
	return m._TappableChipAttributes
}

func (m *Material) TargetPlatform() Qualifier {
	if m._TargetPlatform == "" {
		m._TargetPlatform = m.File().AsDot("TargetPlatform")
	}
	return m._TargetPlatform
}

func (m *Material) Text() Qualifier {
	if m._Text == "" {
		m._Text = m.File().AsDot("Text")
	}
	return m._Text
}

func (m *Material) TextAffinity() Qualifier {
	if m._TextAffinity == "" {
		m._TextAffinity = m.File().AsDot("TextAffinity")
	}
	return m._TextAffinity
}

func (m *Material) TextAlign() Qualifier {
	if m._TextAlign == "" {
		m._TextAlign = m.File().AsDot("TextAlign")
	}
	return m._TextAlign
}

func (m *Material) TextAlignVertical() Qualifier {
	if m._TextAlignVertical == "" {
		m._TextAlignVertical = m.File().AsDot("TextAlignVertical")
	}
	return m._TextAlignVertical
}

func (m *Material) TextBaseline() Qualifier {
	if m._TextBaseline == "" {
		m._TextBaseline = m.File().AsDot("TextBaseline")
	}
	return m._TextBaseline
}

func (m *Material) TextBox() Qualifier {
	if m._TextBox == "" {
		m._TextBox = m.File().AsDot("TextBox")
	}
	return m._TextBox
}

func (m *Material) TextCapitalization() Qualifier {
	if m._TextCapitalization == "" {
		m._TextCapitalization = m.File().AsDot("TextCapitalization")
	}
	return m._TextCapitalization
}

func (m *Material) TextDecoration() Qualifier {
	if m._TextDecoration == "" {
		m._TextDecoration = m.File().AsDot("TextDecoration")
	}
	return m._TextDecoration
}

func (m *Material) TextDecorationStyle() Qualifier {
	if m._TextDecorationStyle == "" {
		m._TextDecorationStyle = m.File().AsDot("TextDecorationStyle")
	}
	return m._TextDecorationStyle
}

func (m *Material) TextDirection() Qualifier {
	if m._TextDirection == "" {
		m._TextDirection = m.File().AsDot("TextDirection")
	}
	return m._TextDirection
}

func (m *Material) TextEditingController() Qualifier {
	if m._TextEditingController == "" {
		m._TextEditingController = m.File().AsDot("TextEditingController")
	}
	return m._TextEditingController
}

func (m *Material) TextEditingValue() Qualifier {
	if m._TextEditingValue == "" {
		m._TextEditingValue = m.File().AsDot("TextEditingValue")
	}
	return m._TextEditingValue
}

func (m *Material) TextField() Qualifier {
	if m._TextField == "" {
		m._TextField = m.File().AsDot("TextField")
	}
	return m._TextField
}

func (m *Material) TextFormField() Qualifier {
	if m._TextFormField == "" {
		m._TextFormField = m.File().AsDot("TextFormField")
	}
	return m._TextFormField
}

func (m *Material) TextInputAction() Qualifier {
	if m._TextInputAction == "" {
		m._TextInputAction = m.File().AsDot("TextInputAction")
	}
	return m._TextInputAction
}

func (m *Material) TextInputType() Qualifier {
	if m._TextInputType == "" {
		m._TextInputType = m.File().AsDot("TextInputType")
	}
	return m._TextInputType
}

func (m *Material) TextOverflow() Qualifier {
	if m._TextOverflow == "" {
		m._TextOverflow = m.File().AsDot("TextOverflow")
	}
	return m._TextOverflow
}

func (m *Material) TextPainter() Qualifier {
	if m._TextPainter == "" {
		m._TextPainter = m.File().AsDot("TextPainter")
	}
	return m._TextPainter
}

func (m *Material) TextPosition() Qualifier {
	if m._TextPosition == "" {
		m._TextPosition = m.File().AsDot("TextPosition")
	}
	return m._TextPosition
}

func (m *Material) TextRange() Qualifier {
	if m._TextRange == "" {
		m._TextRange = m.File().AsDot("TextRange")
	}
	return m._TextRange
}

func (m *Material) TextSelection() Qualifier {
	if m._TextSelection == "" {
		m._TextSelection = m.File().AsDot("TextSelection")
	}
	return m._TextSelection
}

func (m *Material) TextSelectionControls() Qualifier {
	if m._TextSelectionControls == "" {
		m._TextSelectionControls = m.File().AsDot("TextSelectionControls")
	}
	return m._TextSelectionControls
}

func (m *Material) TextSelectionDelegate() Qualifier {
	if m._TextSelectionDelegate == "" {
		m._TextSelectionDelegate = m.File().AsDot("TextSelectionDelegate")
	}
	return m._TextSelectionDelegate
}

func (m *Material) TextSelectionGestureDetector() Qualifier {
	if m._TextSelectionGestureDetector == "" {
		m._TextSelectionGestureDetector = m.File().AsDot("TextSelectionGestureDetector")
	}
	return m._TextSelectionGestureDetector
}

func (m *Material) TextSelectionGestureDetectorBuilder() Qualifier {
	if m._TextSelectionGestureDetectorBuilder == "" {
		m._TextSelectionGestureDetectorBuilder = m.File().AsDot("TextSelectionGestureDetectorBuilder")
	}
	return m._TextSelectionGestureDetectorBuilder
}

func (m *Material) TextSelectionGestureDetectorBuilderDelegate() Qualifier {
	if m._TextSelectionGestureDetectorBuilderDelegate == "" {
		m._TextSelectionGestureDetectorBuilderDelegate = m.File().AsDot("TextSelectionGestureDetectorBuilderDelegate")
	}
	return m._TextSelectionGestureDetectorBuilderDelegate
}

func (m *Material) TextSelectionHandleType() Qualifier {
	if m._TextSelectionHandleType == "" {
		m._TextSelectionHandleType = m.File().AsDot("TextSelectionHandleType")
	}
	return m._TextSelectionHandleType
}

func (m *Material) TextSelectionOverlay() Qualifier {
	if m._TextSelectionOverlay == "" {
		m._TextSelectionOverlay = m.File().AsDot("TextSelectionOverlay")
	}
	return m._TextSelectionOverlay
}

func (m *Material) TextSelectionOverlayChanged() Qualifier {
	if m._TextSelectionOverlayChanged == "" {
		m._TextSelectionOverlayChanged = m.File().AsDot("TextSelectionOverlayChanged")
	}
	return m._TextSelectionOverlayChanged
}

func (m *Material) TextSpan() Qualifier {
	if m._TextSpan == "" {
		m._TextSpan = m.File().AsDot("TextSpan")
	}
	return m._TextSpan
}

func (m *Material) TextStyle() Qualifier {
	if m._TextStyle == "" {
		m._TextStyle = m.File().AsDot("TextStyle")
	}
	return m._TextStyle
}

func (m *Material) TextStyleTween() Qualifier {
	if m._TextStyleTween == "" {
		m._TextStyleTween = m.File().AsDot("TextStyleTween")
	}
	return m._TextStyleTween
}

func (m *Material) TextTheme() Qualifier {
	if m._TextTheme == "" {
		m._TextTheme = m.File().AsDot("TextTheme")
	}
	return m._TextTheme
}

func (m *Material) TextWidthBasis() Qualifier {
	if m._TextWidthBasis == "" {
		m._TextWidthBasis = m.File().AsDot("TextWidthBasis")
	}
	return m._TextWidthBasis
}

func (m *Material) Texture() Qualifier {
	if m._Texture == "" {
		m._Texture = m.File().AsDot("Texture")
	}
	return m._Texture
}

func (m *Material) Theme() Qualifier {
	if m._Theme == "" {
		m._Theme = m.File().AsDot("Theme")
	}
	return m._Theme
}

func (m *Material) ThemeData() Qualifier {
	if m._ThemeData == "" {
		m._ThemeData = m.File().AsDot("ThemeData")
	}
	return m._ThemeData
}

func (m *Material) ThemeDataTween() Qualifier {
	if m._ThemeDataTween == "" {
		m._ThemeDataTween = m.File().AsDot("ThemeDataTween")
	}
	return m._ThemeDataTween
}

func (m *Material) ThemeMode() Qualifier {
	if m._ThemeMode == "" {
		m._ThemeMode = m.File().AsDot("ThemeMode")
	}
	return m._ThemeMode
}

func (m *Material) Threshold() Qualifier {
	if m._Threshold == "" {
		m._Threshold = m.File().AsDot("Threshold")
	}
	return m._Threshold
}

func (m *Material) Thumb() Qualifier {
	if m._Thumb == "" {
		m._Thumb = m.File().AsDot("Thumb")
	}
	return m._Thumb
}

func (m *Material) TickerCanceled() Qualifier {
	if m._TickerCanceled == "" {
		m._TickerCanceled = m.File().AsDot("TickerCanceled")
	}
	return m._TickerCanceled
}

func (m *Material) TickerFuture() Qualifier {
	if m._TickerFuture == "" {
		m._TickerFuture = m.File().AsDot("TickerFuture")
	}
	return m._TickerFuture
}

func (m *Material) TickerMode() Qualifier {
	if m._TickerMode == "" {
		m._TickerMode = m.File().AsDot("TickerMode")
	}
	return m._TickerMode
}

func (m *Material) TickerProvider() Qualifier {
	if m._TickerProvider == "" {
		m._TickerProvider = m.File().AsDot("TickerProvider")
	}
	return m._TickerProvider
}

func (m *Material) TickerProviderStateMixin() Qualifier {
	if m._TickerProviderStateMixin == "" {
		m._TickerProviderStateMixin = m.File().AsDot("TickerProviderStateMixin")
	}
	return m._TickerProviderStateMixin
}

func (m *Material) TileMode() Qualifier {
	if m._TileMode == "" {
		m._TileMode = m.File().AsDot("TileMode")
	}
	return m._TileMode
}

func (m *Material) TimeOfDay() Qualifier {
	if m._TimeOfDay == "" {
		m._TimeOfDay = m.File().AsDot("TimeOfDay")
	}
	return m._TimeOfDay
}

func (m *Material) TimeOfDayFormat() Qualifier {
	if m._TimeOfDayFormat == "" {
		m._TimeOfDayFormat = m.File().AsDot("TimeOfDayFormat")
	}
	return m._TimeOfDayFormat
}

func (m *Material) Title() Qualifier {
	if m._Title == "" {
		m._Title = m.File().AsDot("Title")
	}
	return m._Title
}

func (m *Material) ToggleButtons() Qualifier {
	if m._ToggleButtons == "" {
		m._ToggleButtons = m.File().AsDot("ToggleButtons")
	}
	return m._ToggleButtons
}

func (m *Material) ToggleButtonsTheme() Qualifier {
	if m._ToggleButtonsTheme == "" {
		m._ToggleButtonsTheme = m.File().AsDot("ToggleButtonsTheme")
	}
	return m._ToggleButtonsTheme
}

func (m *Material) ToggleButtonsThemeData() Qualifier {
	if m._ToggleButtonsThemeData == "" {
		m._ToggleButtonsThemeData = m.File().AsDot("ToggleButtonsThemeData")
	}
	return m._ToggleButtonsThemeData
}

func (m *Material) Tolerance() Qualifier {
	if m._Tolerance == "" {
		m._Tolerance = m.File().AsDot("Tolerance")
	}
	return m._Tolerance
}

func (m *Material) ToolbarOptions() Qualifier {
	if m._ToolbarOptions == "" {
		m._ToolbarOptions = m.File().AsDot("ToolbarOptions")
	}
	return m._ToolbarOptions
}

func (m *Material) Tooltip() Qualifier {
	if m._Tooltip == "" {
		m._Tooltip = m.File().AsDot("Tooltip")
	}
	return m._Tooltip
}

func (m *Material) TooltipTheme() Qualifier {
	if m._TooltipTheme == "" {
		m._TooltipTheme = m.File().AsDot("TooltipTheme")
	}
	return m._TooltipTheme
}

func (m *Material) TooltipThemeData() Qualifier {
	if m._TooltipThemeData == "" {
		m._TooltipThemeData = m.File().AsDot("TooltipThemeData")
	}
	return m._TooltipThemeData
}

func (m *Material) TrackingScrollController() Qualifier {
	if m._TrackingScrollController == "" {
		m._TrackingScrollController = m.File().AsDot("TrackingScrollController")
	}
	return m._TrackingScrollController
}

func (m *Material) TrainHoppingAnimation() Qualifier {
	if m._TrainHoppingAnimation == "" {
		m._TrainHoppingAnimation = m.File().AsDot("TrainHoppingAnimation")
	}
	return m._TrainHoppingAnimation
}

func (m *Material) Transform() Qualifier {
	if m._Transform == "" {
		m._Transform = m.File().AsDot("Transform")
	}
	return m._Transform
}

func (m *Material) TransformProperty() Qualifier {
	if m._TransformProperty == "" {
		m._TransformProperty = m.File().AsDot("TransformProperty")
	}
	return m._TransformProperty
}

func (m *Material) TransitionBuilder() Qualifier {
	if m._TransitionBuilder == "" {
		m._TransitionBuilder = m.File().AsDot("TransitionBuilder")
	}
	return m._TransitionBuilder
}

func (m *Material) TransitionRoute() Qualifier {
	if m._TransitionRoute == "" {
		m._TransitionRoute = m.File().AsDot("TransitionRoute")
	}
	return m._TransitionRoute
}

func (m *Material) TraversalDirection() Qualifier {
	if m._TraversalDirection == "" {
		m._TraversalDirection = m.File().AsDot("TraversalDirection")
	}
	return m._TraversalDirection
}

func (m *Material) Tween() Qualifier {
	if m._Tween == "" {
		m._Tween = m.File().AsDot("Tween")
	}
	return m._Tween
}

func (m *Material) TweenAnimationBuilder() Qualifier {
	if m._TweenAnimationBuilder == "" {
		m._TweenAnimationBuilder = m.File().AsDot("TweenAnimationBuilder")
	}
	return m._TweenAnimationBuilder
}

func (m *Material) TweenConstructor() Qualifier {
	if m._TweenConstructor == "" {
		m._TweenConstructor = m.File().AsDot("TweenConstructor")
	}
	return m._TweenConstructor
}

func (m *Material) TweenSequence() Qualifier {
	if m._TweenSequence == "" {
		m._TweenSequence = m.File().AsDot("TweenSequence")
	}
	return m._TweenSequence
}

func (m *Material) TweenSequenceItem() Qualifier {
	if m._TweenSequenceItem == "" {
		m._TweenSequenceItem = m.File().AsDot("TweenSequenceItem")
	}
	return m._TweenSequenceItem
}

func (m *Material) TweenVisitor() Qualifier {
	if m._TweenVisitor == "" {
		m._TweenVisitor = m.File().AsDot("TweenVisitor")
	}
	return m._TweenVisitor
}

func (m *Material) TypeMatcher() Qualifier {
	if m._TypeMatcher == "" {
		m._TypeMatcher = m.File().AsDot("TypeMatcher")
	}
	return m._TypeMatcher
}

func (m *Material) Typography() Qualifier {
	if m._Typography == "" {
		m._Typography = m.File().AsDot("Typography")
	}
	return m._Typography
}

func (m *Material) UiKitView() Qualifier {
	if m._UiKitView == "" {
		m._UiKitView = m.File().AsDot("UiKitView")
	}
	return m._UiKitView
}

func (m *Material) UnconstrainedBox() Qualifier {
	if m._UnconstrainedBox == "" {
		m._UnconstrainedBox = m.File().AsDot("UnconstrainedBox")
	}
	return m._UnconstrainedBox
}

func (m *Material) UnderlineInputBorder() Qualifier {
	if m._UnderlineInputBorder == "" {
		m._UnderlineInputBorder = m.File().AsDot("UnderlineInputBorder")
	}
	return m._UnderlineInputBorder
}

func (m *Material) UnderlineTabIndicator() Qualifier {
	if m._UnderlineTabIndicator == "" {
		m._UnderlineTabIndicator = m.File().AsDot("UnderlineTabIndicator")
	}
	return m._UnderlineTabIndicator
}

func (m *Material) UniqueKey() Qualifier {
	if m._UniqueKey == "" {
		m._UniqueKey = m.File().AsDot("UniqueKey")
	}
	return m._UniqueKey
}

func (m *Material) UniqueWidget() Qualifier {
	if m._UniqueWidget == "" {
		m._UniqueWidget = m.File().AsDot("UniqueWidget")
	}
	return m._UniqueWidget
}

func (m *Material) UserAccountsDrawerHeader() Qualifier {
	if m._UserAccountsDrawerHeader == "" {
		m._UserAccountsDrawerHeader = m.File().AsDot("UserAccountsDrawerHeader")
	}
	return m._UserAccountsDrawerHeader
}

func (m *Material) UserScrollNotification() Qualifier {
	if m._UserScrollNotification == "" {
		m._UserScrollNotification = m.File().AsDot("UserScrollNotification")
	}
	return m._UserScrollNotification
}

func (m *Material) ValueChanged() Qualifier {
	if m._ValueChanged == "" {
		m._ValueChanged = m.File().AsDot("ValueChanged")
	}
	return m._ValueChanged
}

func (m *Material) ValueGetter() Qualifier {
	if m._ValueGetter == "" {
		m._ValueGetter = m.File().AsDot("ValueGetter")
	}
	return m._ValueGetter
}

func (m *Material) ValueKey() Qualifier {
	if m._ValueKey == "" {
		m._ValueKey = m.File().AsDot("ValueKey")
	}
	return m._ValueKey
}

func (m *Material) ValueListenableBuilder() Qualifier {
	if m._ValueListenableBuilder == "" {
		m._ValueListenableBuilder = m.File().AsDot("ValueListenableBuilder")
	}
	return m._ValueListenableBuilder
}

func (m *Material) ValueNotifier() Qualifier {
	if m._ValueNotifier == "" {
		m._ValueNotifier = m.File().AsDot("ValueNotifier")
	}
	return m._ValueNotifier
}

func (m *Material) ValueSetter() Qualifier {
	if m._ValueSetter == "" {
		m._ValueSetter = m.File().AsDot("ValueSetter")
	}
	return m._ValueSetter
}

func (m *Material) ValueWidgetBuilder() Qualifier {
	if m._ValueWidgetBuilder == "" {
		m._ValueWidgetBuilder = m.File().AsDot("ValueWidgetBuilder")
	}
	return m._ValueWidgetBuilder
}

func (m *Material) Velocity() Qualifier {
	if m._Velocity == "" {
		m._Velocity = m.File().AsDot("Velocity")
	}
	return m._Velocity
}

func (m *Material) VertexMode() Qualifier {
	if m._VertexMode == "" {
		m._VertexMode = m.File().AsDot("VertexMode")
	}
	return m._VertexMode
}

func (m *Material) VerticalDirection() Qualifier {
	if m._VerticalDirection == "" {
		m._VerticalDirection = m.File().AsDot("VerticalDirection")
	}
	return m._VerticalDirection
}

func (m *Material) VerticalDivider() Qualifier {
	if m._VerticalDivider == "" {
		m._VerticalDivider = m.File().AsDot("VerticalDivider")
	}
	return m._VerticalDivider
}

func (m *Material) Viewport() Qualifier {
	if m._Viewport == "" {
		m._Viewport = m.File().AsDot("Viewport")
	}
	return m._Viewport
}

func (m *Material) ViewportBuilder() Qualifier {
	if m._ViewportBuilder == "" {
		m._ViewportBuilder = m.File().AsDot("ViewportBuilder")
	}
	return m._ViewportBuilder
}

func (m *Material) ViewportNotificationMixin() Qualifier {
	if m._ViewportNotificationMixin == "" {
		m._ViewportNotificationMixin = m.File().AsDot("ViewportNotificationMixin")
	}
	return m._ViewportNotificationMixin
}

func (m *Material) Visibility() Qualifier {
	if m._Visibility == "" {
		m._Visibility = m.File().AsDot("Visibility")
	}
	return m._Visibility
}

func (m *Material) VoidCallback() Qualifier {
	if m._VoidCallback == "" {
		m._VoidCallback = m.File().AsDot("VoidCallback")
	}
	return m._VoidCallback
}

func (m *Material) Widget() Qualifier {
	if m._Widget == "" {
		m._Widget = m.File().AsDot("Widget")
	}
	return m._Widget
}

func (m *Material) WidgetBuilder() Qualifier {
	if m._WidgetBuilder == "" {
		m._WidgetBuilder = m.File().AsDot("WidgetBuilder")
	}
	return m._WidgetBuilder
}

func (m *Material) WidgetInspector() Qualifier {
	if m._WidgetInspector == "" {
		m._WidgetInspector = m.File().AsDot("WidgetInspector")
	}
	return m._WidgetInspector
}

func (m *Material) WidgetInspectorService() Qualifier {
	if m._WidgetInspectorService == "" {
		m._WidgetInspectorService = m.File().AsDot("WidgetInspectorService")
	}
	return m._WidgetInspectorService
}

func (m *Material) WidgetOrderFocusTraversalPolicy() Qualifier {
	if m._WidgetOrderFocusTraversalPolicy == "" {
		m._WidgetOrderFocusTraversalPolicy = m.File().AsDot("WidgetOrderFocusTraversalPolicy")
	}
	return m._WidgetOrderFocusTraversalPolicy
}

func (m *Material) WidgetSpan() Qualifier {
	if m._WidgetSpan == "" {
		m._WidgetSpan = m.File().AsDot("WidgetSpan")
	}
	return m._WidgetSpan
}

func (m *Material) WidgetToRenderBoxAdapter() Qualifier {
	if m._WidgetToRenderBoxAdapter == "" {
		m._WidgetToRenderBoxAdapter = m.File().AsDot("WidgetToRenderBoxAdapter")
	}
	return m._WidgetToRenderBoxAdapter
}

func (m *Material) WidgetsApp() Qualifier {
	if m._WidgetsApp == "" {
		m._WidgetsApp = m.File().AsDot("WidgetsApp")
	}
	return m._WidgetsApp
}

func (m *Material) WidgetsBinding() Qualifier {
	if m._WidgetsBinding == "" {
		m._WidgetsBinding = m.File().AsDot("WidgetsBinding")
	}
	return m._WidgetsBinding
}

func (m *Material) WidgetsBindingObserver() Qualifier {
	if m._WidgetsBindingObserver == "" {
		m._WidgetsBindingObserver = m.File().AsDot("WidgetsBindingObserver")
	}
	return m._WidgetsBindingObserver
}

func (m *Material) WidgetsFlutterBinding() Qualifier {
	if m._WidgetsFlutterBinding == "" {
		m._WidgetsFlutterBinding = m.File().AsDot("WidgetsFlutterBinding")
	}
	return m._WidgetsFlutterBinding
}

func (m *Material) WidgetsLocalizations() Qualifier {
	if m._WidgetsLocalizations == "" {
		m._WidgetsLocalizations = m.File().AsDot("WidgetsLocalizations")
	}
	return m._WidgetsLocalizations
}

func (m *Material) WillPopCallback() Qualifier {
	if m._WillPopCallback == "" {
		m._WillPopCallback = m.File().AsDot("WillPopCallback")
	}
	return m._WillPopCallback
}

func (m *Material) WillPopScope() Qualifier {
	if m._WillPopScope == "" {
		m._WillPopScope = m.File().AsDot("WillPopScope")
	}
	return m._WillPopScope
}

func (m *Material) Wrap() Qualifier {
	if m._Wrap == "" {
		m._Wrap = m.File().AsDot("Wrap")
	}
	return m._Wrap
}

func (m *Material) WrapAlignment() Qualifier {
	if m._WrapAlignment == "" {
		m._WrapAlignment = m.File().AsDot("WrapAlignment")
	}
	return m._WrapAlignment
}

func (m *Material) WrapCrossAlignment() Qualifier {
	if m._WrapCrossAlignment == "" {
		m._WrapCrossAlignment = m.File().AsDot("WrapCrossAlignment")
	}
	return m._WrapCrossAlignment
}

func (m *Material) YearPicker() Qualifier {
	if m._YearPicker == "" {
		m._YearPicker = m.File().AsDot("YearPicker")
	}
	return m._YearPicker
}

func (m *Material) ZoomPageTransitionsBuilder() Qualifier {
	if m._ZoomPageTransitionsBuilder == "" {
		m._ZoomPageTransitionsBuilder = m.File().AsDot("ZoomPageTransitionsBuilder")
	}
	return m._ZoomPageTransitionsBuilder
}

func (m *Material) ApplyBoxFit() Qualifier {
	if m._applyBoxFit == "" {
		m._applyBoxFit = m.File().AsDot("applyBoxFit")
	}
	return m._applyBoxFit
}

func (m *Material) AxisDirectionIsReversed() Qualifier {
	if m._axisDirectionIsReversed == "" {
		m._axisDirectionIsReversed = m.File().AsDot("axisDirectionIsReversed")
	}
	return m._axisDirectionIsReversed
}

func (m *Material) AxisDirectionToAxis() Qualifier {
	if m._axisDirectionToAxis == "" {
		m._axisDirectionToAxis = m.File().AsDot("axisDirectionToAxis")
	}
	return m._axisDirectionToAxis
}

func (m *Material) CreateLocalImageConfiguration() Qualifier {
	if m._createLocalImageConfiguration == "" {
		m._createLocalImageConfiguration = m.File().AsDot("createLocalImageConfiguration")
	}
	return m._createLocalImageConfiguration
}

func (m *Material) DebugAssertAllPaintingVarsUnset() Qualifier {
	if m._debugAssertAllPaintingVarsUnset == "" {
		m._debugAssertAllPaintingVarsUnset = m.File().AsDot("debugAssertAllPaintingVarsUnset")
	}
	return m._debugAssertAllPaintingVarsUnset
}

func (m *Material) DebugAssertAllWidgetVarsUnset() Qualifier {
	if m._debugAssertAllWidgetVarsUnset == "" {
		m._debugAssertAllWidgetVarsUnset = m.File().AsDot("debugAssertAllWidgetVarsUnset")
	}
	return m._debugAssertAllWidgetVarsUnset
}

func (m *Material) DebugCheckHasDirectionality() Qualifier {
	if m._debugCheckHasDirectionality == "" {
		m._debugCheckHasDirectionality = m.File().AsDot("debugCheckHasDirectionality")
	}
	return m._debugCheckHasDirectionality
}

func (m *Material) DebugCheckHasMaterial() Qualifier {
	if m._debugCheckHasMaterial == "" {
		m._debugCheckHasMaterial = m.File().AsDot("debugCheckHasMaterial")
	}
	return m._debugCheckHasMaterial
}

func (m *Material) DebugCheckHasMaterialLocalizations() Qualifier {
	if m._debugCheckHasMaterialLocalizations == "" {
		m._debugCheckHasMaterialLocalizations = m.File().AsDot("debugCheckHasMaterialLocalizations")
	}
	return m._debugCheckHasMaterialLocalizations
}

func (m *Material) DebugCheckHasMediaQuery() Qualifier {
	if m._debugCheckHasMediaQuery == "" {
		m._debugCheckHasMediaQuery = m.File().AsDot("debugCheckHasMediaQuery")
	}
	return m._debugCheckHasMediaQuery
}

func (m *Material) DebugCheckHasScaffold() Qualifier {
	if m._debugCheckHasScaffold == "" {
		m._debugCheckHasScaffold = m.File().AsDot("debugCheckHasScaffold")
	}
	return m._debugCheckHasScaffold
}

func (m *Material) DebugCheckHasTable() Qualifier {
	if m._debugCheckHasTable == "" {
		m._debugCheckHasTable = m.File().AsDot("debugCheckHasTable")
	}
	return m._debugCheckHasTable
}

func (m *Material) DebugChildrenHaveDuplicateKeys() Qualifier {
	if m._debugChildrenHaveDuplicateKeys == "" {
		m._debugChildrenHaveDuplicateKeys = m.File().AsDot("debugChildrenHaveDuplicateKeys")
	}
	return m._debugChildrenHaveDuplicateKeys
}

func (m *Material) DebugDescribeFocusTree() Qualifier {
	if m._debugDescribeFocusTree == "" {
		m._debugDescribeFocusTree = m.File().AsDot("debugDescribeFocusTree")
	}
	return m._debugDescribeFocusTree
}

func (m *Material) DebugDescribeTransform() Qualifier {
	if m._debugDescribeTransform == "" {
		m._debugDescribeTransform = m.File().AsDot("debugDescribeTransform")
	}
	return m._debugDescribeTransform
}

func (m *Material) DebugDisableShadows() Qualifier {
	if m._debugDisableShadows == "" {
		m._debugDisableShadows = m.File().AsDot("debugDisableShadows")
	}
	return m._debugDisableShadows
}

func (m *Material) DebugDumpApp() Qualifier {
	if m._debugDumpApp == "" {
		m._debugDumpApp = m.File().AsDot("debugDumpApp")
	}
	return m._debugDumpApp
}

func (m *Material) DebugDumpFocusTree() Qualifier {
	if m._debugDumpFocusTree == "" {
		m._debugDumpFocusTree = m.File().AsDot("debugDumpFocusTree")
	}
	return m._debugDumpFocusTree
}

func (m *Material) DebugDumpLayerTree() Qualifier {
	if m._debugDumpLayerTree == "" {
		m._debugDumpLayerTree = m.File().AsDot("debugDumpLayerTree")
	}
	return m._debugDumpLayerTree
}

func (m *Material) DebugDumpRenderTree() Qualifier {
	if m._debugDumpRenderTree == "" {
		m._debugDumpRenderTree = m.File().AsDot("debugDumpRenderTree")
	}
	return m._debugDumpRenderTree
}

func (m *Material) DebugHighlightDeprecatedWidgets() Qualifier {
	if m._debugHighlightDeprecatedWidgets == "" {
		m._debugHighlightDeprecatedWidgets = m.File().AsDot("debugHighlightDeprecatedWidgets")
	}
	return m._debugHighlightDeprecatedWidgets
}

func (m *Material) DebugItemsHaveDuplicateKeys() Qualifier {
	if m._debugItemsHaveDuplicateKeys == "" {
		m._debugItemsHaveDuplicateKeys = m.File().AsDot("debugItemsHaveDuplicateKeys")
	}
	return m._debugItemsHaveDuplicateKeys
}

func (m *Material) DebugNetworkImageHttpClientProvider() Qualifier {
	if m._debugNetworkImageHttpClientProvider == "" {
		m._debugNetworkImageHttpClientProvider = m.File().AsDot("debugNetworkImageHttpClientProvider")
	}
	return m._debugNetworkImageHttpClientProvider
}

func (m *Material) DebugOnRebuildDirtyWidget() Qualifier {
	if m._debugOnRebuildDirtyWidget == "" {
		m._debugOnRebuildDirtyWidget = m.File().AsDot("debugOnRebuildDirtyWidget")
	}
	return m._debugOnRebuildDirtyWidget
}

func (m *Material) DebugPrint() Qualifier {
	if m._debugPrint == "" {
		m._debugPrint = m.File().AsDot("debugPrint")
	}
	return m._debugPrint
}

func (m *Material) DebugPrintBuildScope() Qualifier {
	if m._debugPrintBuildScope == "" {
		m._debugPrintBuildScope = m.File().AsDot("debugPrintBuildScope")
	}
	return m._debugPrintBuildScope
}

func (m *Material) DebugPrintGlobalKeyedWidgetLifecycle() Qualifier {
	if m._debugPrintGlobalKeyedWidgetLifecycle == "" {
		m._debugPrintGlobalKeyedWidgetLifecycle = m.File().AsDot("debugPrintGlobalKeyedWidgetLifecycle")
	}
	return m._debugPrintGlobalKeyedWidgetLifecycle
}

func (m *Material) DebugPrintRebuildDirtyWidgets() Qualifier {
	if m._debugPrintRebuildDirtyWidgets == "" {
		m._debugPrintRebuildDirtyWidgets = m.File().AsDot("debugPrintRebuildDirtyWidgets")
	}
	return m._debugPrintRebuildDirtyWidgets
}

func (m *Material) DebugPrintScheduleBuildForStacks() Qualifier {
	if m._debugPrintScheduleBuildForStacks == "" {
		m._debugPrintScheduleBuildForStacks = m.File().AsDot("debugPrintScheduleBuildForStacks")
	}
	return m._debugPrintScheduleBuildForStacks
}

func (m *Material) DebugPrintStack() Qualifier {
	if m._debugPrintStack == "" {
		m._debugPrintStack = m.File().AsDot("debugPrintStack")
	}
	return m._debugPrintStack
}

func (m *Material) DebugProfileBuildsEnabled() Qualifier {
	if m._debugProfileBuildsEnabled == "" {
		m._debugProfileBuildsEnabled = m.File().AsDot("debugProfileBuildsEnabled")
	}
	return m._debugProfileBuildsEnabled
}

func (m *Material) DebugWidgetBuilderValue() Qualifier {
	if m._debugWidgetBuilderValue == "" {
		m._debugWidgetBuilderValue = m.File().AsDot("debugWidgetBuilderValue")
	}
	return m._debugWidgetBuilderValue
}

func (m *Material) DecodeImageFromList() Qualifier {
	if m._decodeImageFromList == "" {
		m._decodeImageFromList = m.File().AsDot("decodeImageFromList")
	}
	return m._decodeImageFromList
}

func (m *Material) DefaultScrollNotificationPredicate() Qualifier {
	if m._defaultScrollNotificationPredicate == "" {
		m._defaultScrollNotificationPredicate = m.File().AsDot("defaultScrollNotificationPredicate")
	}
	return m._defaultScrollNotificationPredicate
}

func (m *Material) FlipAxis() Qualifier {
	if m._flipAxis == "" {
		m._flipAxis = m.File().AsDot("flipAxis")
	}
	return m._flipAxis
}

func (m *Material) FlipAxisDirection() Qualifier {
	if m._flipAxisDirection == "" {
		m._flipAxisDirection = m.File().AsDot("flipAxisDirection")
	}
	return m._flipAxisDirection
}

func (m *Material) GetAxisDirectionFromAxisReverseAndDirectionality() Qualifier {
	if m._getAxisDirectionFromAxisReverseAndDirectionality == "" {
		m._getAxisDirectionFromAxisReverseAndDirectionality = m.File().AsDot("getAxisDirectionFromAxisReverseAndDirectionality")
	}
	return m._getAxisDirectionFromAxisReverseAndDirectionality
}

func (m *Material) HashList() Qualifier {
	if m._hashList == "" {
		m._hashList = m.File().AsDot("hashList")
	}
	return m._hashList
}

func (m *Material) HashValues() Qualifier {
	if m._hashValues == "" {
		m._hashValues = m.File().AsDot("hashValues")
	}
	return m._hashValues
}

func (m *Material) HourFormat_() Qualifier {
	if m._hourFormat == "" {
		m._hourFormat = m.File().AsDot("hourFormat")
	}
	return m._hourFormat
}

func (m *Material) IOSHorizontalOffset() Qualifier {
	if m._iOSHorizontalOffset == "" {
		m._iOSHorizontalOffset = m.File().AsDot("iOSHorizontalOffset")
	}
	return m._iOSHorizontalOffset
}

func (m *Material) ImageCache_() Qualifier {
	if m._imageCache == "" {
		m._imageCache = m.File().AsDot("imageCache")
	}
	return m._imageCache
}

func (m *Material) Immutable() Qualifier {
	if m._immutable == "" {
		m._immutable = m.File().AsDot("immutable")
	}
	return m._immutable
}

func (m *Material) KAlwaysCompleteAnimation() Qualifier {
	if m._kAlwaysCompleteAnimation == "" {
		m._kAlwaysCompleteAnimation = m.File().AsDot("kAlwaysCompleteAnimation")
	}
	return m._kAlwaysCompleteAnimation
}

func (m *Material) KAlwaysDismissedAnimation() Qualifier {
	if m._kAlwaysDismissedAnimation == "" {
		m._kAlwaysDismissedAnimation = m.File().AsDot("kAlwaysDismissedAnimation")
	}
	return m._kAlwaysDismissedAnimation
}

func (m *Material) KBottomNavigationBarHeight() Qualifier {
	if m._kBottomNavigationBarHeight == "" {
		m._kBottomNavigationBarHeight = m.File().AsDot("kBottomNavigationBarHeight")
	}
	return m._kBottomNavigationBarHeight
}

func (m *Material) KElevationToShadow() Qualifier {
	if m._kElevationToShadow == "" {
		m._kElevationToShadow = m.File().AsDot("kElevationToShadow")
	}
	return m._kElevationToShadow
}

func (m *Material) KFloatingActionButtonMargin() Qualifier {
	if m._kFloatingActionButtonMargin == "" {
		m._kFloatingActionButtonMargin = m.File().AsDot("kFloatingActionButtonMargin")
	}
	return m._kFloatingActionButtonMargin
}

func (m *Material) KFloatingActionButtonSegue() Qualifier {
	if m._kFloatingActionButtonSegue == "" {
		m._kFloatingActionButtonSegue = m.File().AsDot("kFloatingActionButtonSegue")
	}
	return m._kFloatingActionButtonSegue
}

func (m *Material) KFloatingActionButtonTurnInterval() Qualifier {
	if m._kFloatingActionButtonTurnInterval == "" {
		m._kFloatingActionButtonTurnInterval = m.File().AsDot("kFloatingActionButtonTurnInterval")
	}
	return m._kFloatingActionButtonTurnInterval
}

func (m *Material) KMaterialEdges() Qualifier {
	if m._kMaterialEdges == "" {
		m._kMaterialEdges = m.File().AsDot("kMaterialEdges")
	}
	return m._kMaterialEdges
}

func (m *Material) KMaterialListPadding() Qualifier {
	if m._kMaterialListPadding == "" {
		m._kMaterialListPadding = m.File().AsDot("kMaterialListPadding")
	}
	return m._kMaterialListPadding
}

func (m *Material) KMinInteractiveDimension() Qualifier {
	if m._kMinInteractiveDimension == "" {
		m._kMinInteractiveDimension = m.File().AsDot("kMinInteractiveDimension")
	}
	return m._kMinInteractiveDimension
}

func (m *Material) KRadialReactionAlpha() Qualifier {
	if m._kRadialReactionAlpha == "" {
		m._kRadialReactionAlpha = m.File().AsDot("kRadialReactionAlpha")
	}
	return m._kRadialReactionAlpha
}

func (m *Material) KRadialReactionDuration() Qualifier {
	if m._kRadialReactionDuration == "" {
		m._kRadialReactionDuration = m.File().AsDot("kRadialReactionDuration")
	}
	return m._kRadialReactionDuration
}

func (m *Material) KRadialReactionRadius() Qualifier {
	if m._kRadialReactionRadius == "" {
		m._kRadialReactionRadius = m.File().AsDot("kRadialReactionRadius")
	}
	return m._kRadialReactionRadius
}

func (m *Material) KTabLabelPadding() Qualifier {
	if m._kTabLabelPadding == "" {
		m._kTabLabelPadding = m.File().AsDot("kTabLabelPadding")
	}
	return m._kTabLabelPadding
}

func (m *Material) KTabScrollDuration() Qualifier {
	if m._kTabScrollDuration == "" {
		m._kTabScrollDuration = m.File().AsDot("kTabScrollDuration")
	}
	return m._kTabScrollDuration
}

func (m *Material) KTextTabBarHeight() Qualifier {
	if m._kTextTabBarHeight == "" {
		m._kTextTabBarHeight = m.File().AsDot("kTextTabBarHeight")
	}
	return m._kTextTabBarHeight
}

func (m *Material) KThemeAnimationDuration() Qualifier {
	if m._kThemeAnimationDuration == "" {
		m._kThemeAnimationDuration = m.File().AsDot("kThemeAnimationDuration")
	}
	return m._kThemeAnimationDuration
}

func (m *Material) KThemeChangeDuration() Qualifier {
	if m._kThemeChangeDuration == "" {
		m._kThemeChangeDuration = m.File().AsDot("kThemeChangeDuration")
	}
	return m._kThemeChangeDuration
}

func (m *Material) KToolbarHeight() Qualifier {
	if m._kToolbarHeight == "" {
		m._kToolbarHeight = m.File().AsDot("kToolbarHeight")
	}
	return m._kToolbarHeight
}

func (m *Material) MaterialTextSelectionControls() Qualifier {
	if m._materialTextSelectionControls == "" {
		m._materialTextSelectionControls = m.File().AsDot("materialTextSelectionControls")
	}
	return m._materialTextSelectionControls
}

func (m *Material) MustCallSuper() Qualifier {
	if m._mustCallSuper == "" {
		m._mustCallSuper = m.File().AsDot("mustCallSuper")
	}
	return m._mustCallSuper
}

func (m *Material) OptionalTypeArgs() Qualifier {
	if m._optionalTypeArgs == "" {
		m._optionalTypeArgs = m.File().AsDot("optionalTypeArgs")
	}
	return m._optionalTypeArgs
}

func (m *Material) PaintBorder() Qualifier {
	if m._paintBorder == "" {
		m._paintBorder = m.File().AsDot("paintBorder")
	}
	return m._paintBorder
}

func (m *Material) PaintImage() Qualifier {
	if m._paintImage == "" {
		m._paintImage = m.File().AsDot("paintImage")
	}
	return m._paintImage
}

func (m *Material) PaintZigZag() Qualifier {
	if m._paintZigZag == "" {
		m._paintZigZag = m.File().AsDot("paintZigZag")
	}
	return m._paintZigZag
}

func (m *Material) PositionDependentBox() Qualifier {
	if m._positionDependentBox == "" {
		m._positionDependentBox = m.File().AsDot("positionDependentBox")
	}
	return m._positionDependentBox
}

func (m *Material) PrecacheImage() Qualifier {
	if m._precacheImage == "" {
		m._precacheImage = m.File().AsDot("precacheImage")
	}
	return m._precacheImage
}

func (m *Material) PrimaryFocus() Qualifier {
	if m._primaryFocus == "" {
		m._primaryFocus = m.File().AsDot("primaryFocus")
	}
	return m._primaryFocus
}

func (m *Material) Protected() Qualifier {
	if m._protected == "" {
		m._protected = m.File().AsDot("protected")
	}
	return m._protected
}

func (m *Material) Required() Qualifier {
	if m._required == "" {
		m._required = m.File().AsDot("required")
	}
	return m._required
}

func (m *Material) RunApp() Qualifier {
	if m._runApp == "" {
		m._runApp = m.File().AsDot("runApp")
	}
	return m._runApp
}

func (m *Material) ShowAboutDialog() Qualifier {
	if m._showAboutDialog == "" {
		m._showAboutDialog = m.File().AsDot("showAboutDialog")
	}
	return m._showAboutDialog
}

func (m *Material) ShowBottomSheet() Qualifier {
	if m._showBottomSheet == "" {
		m._showBottomSheet = m.File().AsDot("showBottomSheet")
	}
	return m._showBottomSheet
}

func (m *Material) ShowDatePicker() Qualifier {
	if m._showDatePicker == "" {
		m._showDatePicker = m.File().AsDot("showDatePicker")
	}
	return m._showDatePicker
}

func (m *Material) ShowDialog() Qualifier {
	if m._showDialog == "" {
		m._showDialog = m.File().AsDot("showDialog")
	}
	return m._showDialog
}

func (m *Material) ShowGeneralDialog() Qualifier {
	if m._showGeneralDialog == "" {
		m._showGeneralDialog = m.File().AsDot("showGeneralDialog")
	}
	return m._showGeneralDialog
}

func (m *Material) ShowLicensePage() Qualifier {
	if m._showLicensePage == "" {
		m._showLicensePage = m.File().AsDot("showLicensePage")
	}
	return m._showLicensePage
}

func (m *Material) ShowMenu() Qualifier {
	if m._showMenu == "" {
		m._showMenu = m.File().AsDot("showMenu")
	}
	return m._showMenu
}

func (m *Material) ShowModalBottomSheet() Qualifier {
	if m._showModalBottomSheet == "" {
		m._showModalBottomSheet = m.File().AsDot("showModalBottomSheet")
	}
	return m._showModalBottomSheet
}

func (m *Material) ShowSearch() Qualifier {
	if m._showSearch == "" {
		m._showSearch = m.File().AsDot("showSearch")
	}
	return m._showSearch
}

func (m *Material) ShowTimePicker() Qualifier {
	if m._showTimePicker == "" {
		m._showTimePicker = m.File().AsDot("showTimePicker")
	}
	return m._showTimePicker
}

func (m *Material) TextDirectionToAxisDirection() Qualifier {
	if m._textDirectionToAxisDirection == "" {
		m._textDirectionToAxisDirection = m.File().AsDot("textDirectionToAxisDirection")
	}
	return m._textDirectionToAxisDirection
}

func (m *Material) TransformDebugCreator() Qualifier {
	if m._transformDebugCreator == "" {
		m._transformDebugCreator = m.File().AsDot("transformDebugCreator")
	}
	return m._transformDebugCreator
}

func (m *Material) VisibleForTesting() Qualifier {
	if m._visibleForTesting == "" {
		m._visibleForTesting = m.File().AsDot("visibleForTesting")
	}
	return m._visibleForTesting
}
